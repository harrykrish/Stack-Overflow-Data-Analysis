{"title": "How can I skip tests in maven install goal, while running them in maven test goal?", "tags": ["maven", "integration-testing", "maven-surefire-plugin", "maven-failsafe-plugin"], "creation_date": 1371301454, "score": 39, "body": "<p>It sounds like you didn't understand the concept of the <a href=\"http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html\" rel=\"nofollow\">build life-cycle</a> in Maven. If you run <code>mvn install</code> all life-cycle phases (including the <code>install</code> phase itself) run before the install phase. This means running the following phases:</p>\n\n<ol>\n<li>validate</li>\n<li>initialize</li>\n<li>generate-sources</li>\n<li>process-sources</li>\n<li>generate-resources</li>\n<li>process-resources</li>\n<li>compile</li>\n<li>process-classes</li>\n<li>generate-test-sources</li>\n<li>process-test-sources</li>\n<li>generate-test-resources</li>\n<li>process-test-resources</li>\n<li>test-compile</li>\n<li>process-test-classes</li>\n<li>test</li>\n<li>prepare-package</li>\n<li>package</li>\n<li>pre-integration-test</li>\n<li>integration-test</li>\n<li>post-integration-test</li>\n<li>verify</li>\n<li>install</li>\n</ol>\n\n<p>which means in other words the <code>test</code> as well as <code>integration-test</code> life-cycle phases are included. So without any supplemental information it's not possible to change the behaviour as you wish it. </p>\n\n<p>It could be achieved by using a profile in Maven:</p>\n\n<pre><code> &lt;project&gt;\n  [...]\n  &lt;profiles&gt;\n    &lt;profile&gt;\n      &lt;id&gt;no-unit-tests&lt;/id&gt;\n      &lt;build&gt;\n        &lt;plugins&gt;\n          &lt;plugin&gt;\n            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;\n            &lt;configuration&gt;\n              &lt;skipTests&gt;true&lt;/skipTests&gt;\n            &lt;/configuration&gt;\n          &lt;/plugin&gt;\n        &lt;/plugins&gt;\n      &lt;/build&gt;\n    &lt;/profile&gt;\n  &lt;/profiles&gt;\n  [...]\n&lt;/project&gt;\n</code></pre>\n\n<p>So your first requirement:</p>\n\n<ol>\n<li>If I run mvn install, I want all tests to compile, but I do not want to execute any.</li>\n</ol>\n\n<p>can be achieved by using the following:</p>\n\n<pre><code>mvn -Pno-unit-test test\n</code></pre>\n\n<ol start=\"2\">\n<li>If I run mvn test, I want all tests to compile, but execute only unit tests.</li>\n</ol>\n\n<p>This can simply achieved by using the plain call:</p>\n\n<pre><code>mvn test\n</code></pre>\n\n<p>caus the integration tests phase is not run (see the buid life cycle).</p>\n\n<ol start=\"3\">\n<li>If I run mvn integration-test, I want to compile and execute all tests.</li>\n</ol>\n\n<p>This means running the default which includes running the <code>test</code> phase which will run the unit tests (maven-surefire-plugin) and furthermore running the integration test which are handled by the maven-failsafe-plugin. But you should be aware that if you like to call the integration tests you should using the following:</p>\n\n<pre><code>mvn verify\n</code></pre>\n\n<p>instead cause you missed the <code>post-integration-test</code> phase in your previous call.</p>\n\n<p>Apart from the above you should follow the naming conventions for unit and integration tests where <a href=\"http://maven.apache.org/surefire/maven-surefire-plugin/test-mojo.html\" rel=\"nofollow\">unit tests</a> should be named like the following:</p>\n\n<pre><code>&lt;includes&gt;\n &lt;include&gt;**/*Test*.java&lt;/include&gt;\n &lt;include&gt;**/*Test.java&lt;/include&gt;\n &lt;include&gt;**/*TestCase.java&lt;/include&gt;\n&lt;/includes&gt;\n</code></pre>\n\n<p>and <a href=\"http://maven.apache.org/surefire/maven-failsafe-plugin/integration-test-mojo.html#includes\" rel=\"nofollow\">integration tests</a> should be named like the following:</p>\n\n<pre><code>&lt;includes&gt;\n &lt;include&gt;**/IT*.java&lt;/include&gt;\n &lt;include&gt;**/*IT.java&lt;/include&gt;\n &lt;include&gt;**/*ITCase.java&lt;/include&gt;\n&lt;/includes&gt;\n</code></pre>\n\n<p>I hope you have configured the maven-failsafe-plugin like the following which is needed to bound the maven-failsafe-plugin to the correct life-cycle-phases:</p>\n\n<pre><code>&lt;project&gt;\n  [...]\n  &lt;build&gt;\n    &lt;plugins&gt;\n      &lt;plugin&gt;\n        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n        &lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;\n        &lt;version&gt;2.15&lt;/version&gt;\n        &lt;executions&gt;\n          &lt;execution&gt;\n            &lt;goals&gt;\n              &lt;goal&gt;integration-test&lt;/goal&gt;\n              &lt;goal&gt;verify&lt;/goal&gt;\n            &lt;/goals&gt;\n          &lt;/execution&gt;\n        &lt;/executions&gt;\n      &lt;/plugin&gt;\n    &lt;/plugins&gt;\n  &lt;/build&gt;\n  [...]\n&lt;/project&gt;\n</code></pre>\n\n<p>as you correctly did, but you should be aware that the <code>include</code> tags work on the source code (<em>.java) and not on the compiled names (</em>.class). I wouldn't use the Category annotation, just simply using the naming conventions makes the pom simpler and shorter.</p>\n", "last_activity_date": 1476296676, "answer_id": 17123957, "is_accepted": true, "owner": {"user_id": 296328, "reputation": 46682, "user_type": "registered", "accept_rate": 68, "display_name": "khmarbaise", "link": "http://stackoverflow.com/users/296328/khmarbaise", "profile_image": "https://i.stack.imgur.com/DSpH6.jpg?s=128&g=1"}, "last_edit_date": 1476296676, "question_id": 17117589}