{"body": "\n\n<p>If you move the data to a shared service that is provided at the root scope (<code>AppModule</code>) or some other component that is not removed from the DOM when navigating, the data stays available.</p>\n\n<pre class=\"lang-ts prettyprint-override\"><code>@Injectable()\nexport class MyService {\n  // data properties here\n  private mainArray = new Array();\n\n  static persons: Array&lt;PersonDirective&gt; = [];\n}\n</code></pre>\n\n\n\n<pre class=\"lang-ts prettyprint-override\"><code>@NgModule({\n  providers: [BrowserModule, MyService, /* other providers */],\n  ...\n})\nexport class AppModule {}\n</code></pre>\n\n\n\n<pre class=\"lang-ts prettyprint-override\"><code>export class PersonInvolvedComponent {    \n    constructor(private myService:MyService private router: Router, private \n_globalService:GlobalService, private el: ElementRef) {\n    if(this.myService.persons.length == 0) {\n        this.myService.persons.push(new PersonDirective());\n    }\n}\nget persons(){\n    return this.myService.persons;\n}\naddPerson() {\n    this.myService.persons.push(new PersonDirective());\n}\n\nremovePerson(index) {\n    this.myService.persons.splice(index,1);\n}\n\nonFormSubmit(event) {\n    $(this.el.nativeElement).find(\"person-directive\").each((i,val) =&gt; {\n        this.myService.mainArray[i] = new Array(10);\n        this.myService.mainArray[i][0] = $(val).find(\"#raceSelect\").val();\n        this.myService.mainArray[i][1] = $(val).find(\"#genderSelect\").val();\n        this.myService.mainArray[i][2] = $(val).find(\"#ageSelect\").val();\n        this.myService.mainArray[i][3] = $(val).find(\"#heightSelect\").val();\n        this.myService.mainArray[i][4] = $(val).find(\"#buildSelect\").val();\n        this.myService.mainArray[i][5] = $(val).find(\"#eyeColorSelect\").val();\n        this.myService.mainArray[i][6] = $(val).find(\"#hairColorSelect\").val();\n        this.myService.mainArray[i][7] = $(val).find(\"#addInfoSelect\").val();\n        this.myService.mainArray[i][8] = $(val).find(\"#nameSelect\").val();\n        this.myService.mainArray[i][9] = $(val).find(\"#aliasNameSelect\").val();\n    });\n    this._globalService.setPageData(this.myService.mainArray,'person');\n    this.router.navigate(['step1']);\n}\n</code></pre>\n", "tags": ["angular2"], "creation_date": 1477287021, "score": 2, "last_activity_date": 1477287021, "answer_id": 40211276, "is_accepted": false, "owner": {"user_id": 217408, "reputation": 130599, "user_type": "registered", "accept_rate": 99, "display_name": "G&#252;nter Z&#246;chbauer", "link": "http://stackoverflow.com/users/217408/g%c3%bcnter-z%c3%b6chbauer", "profile_image": "https://i.stack.imgur.com/IlnZm.jpg?s=128&g=1"}, "title": "Data flow with child and parent class maintenance in angular2", "question_id": 40211244}