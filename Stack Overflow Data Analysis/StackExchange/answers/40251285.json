{"body": "<p>The simplest way I have found to run task synchronously and without blocking UI thread is to use RunSynchronously() like:</p>\n\n<pre><code>Task t = new Task(() =&gt; \n{ \n   //.... YOUR CODE ....\n});\nt.RunSynchronously();\n</code></pre>\n\n<p>In my case, I have an event that fires when something occurs.  I dont know how many times it will occur.  So, I use code above in my event, so whenever it fires, it creates a task.  Tasks are executed synchronously and it works great for me.  I was just surprised that it took me so long to find out of this considering how simple it is.  Usually, recommendations are much more complex and error prone.  This was it is simple and clean.</p>\n", "tags": ["c#", "asynchronous", "c#-5.0", "async-await"], "creation_date": 1477437765, "score": 0, "last_activity_date": 1477437765, "answer_id": 40251285, "is_accepted": false, "owner": {"user_id": 3453898, "reputation": 695, "user_type": "registered", "accept_rate": 74, "display_name": "dbnex14", "link": "http://stackoverflow.com/users/3453898/dbnex14", "profile_image": "https://www.gravatar.com/avatar/654b07502deb9fcacf3193a50203cffb?s=128&d=identicon&r=PG&f=1"}, "title": "How would I run an async Task&lt;T&gt; method synchronously?", "question_id": 5095183}