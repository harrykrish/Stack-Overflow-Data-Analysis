{"title": "Is it more efficient to pass a List or individual List Items as method arguments in Java?", "tags": ["java", "list", "methods", "parameter-passing", "pass-by-value"], "creation_date": 1476838545, "score": 4, "body": "<p>I recommend you ignore potential difference in performance (which would be negligible in this case) and focus entirely on clarity of your code. In other words, the question is not which is more efficient but which better reflects the intention of the method you are calling. If <code>foo</code> is a method which would naturally expect two arguments (such as <code>storeFullName</code>) then it should be passed two arguments. If it would naturally expect to select two values from a list (such as <code>printTwoLongestStrings</code>) then it should take a collection.</p>\n\n<p>You might also consider the principle of giving each method a <a href=\"https://en.wikipedia.org/wiki/Single_responsibility_principle\" rel=\"nofollow\">single responsibility</a>. In that case it might make sense to have separate methods for selecting the two values and doing something with them:</p>\n\n<pre><code>Pair&lt;String, String&gt; longestPair = getTwoLongestStrings(list);\nprintStrings(longestPair);\n</code></pre>\n\n<p>** Edit **</p>\n\n<p>Your question has clarified that you are focused specifically on performance and you provided more detail of your use case. Specifically you are asking if there is a difference in performance in passing a list or two values to a method. Yes there is a difference. I ran a trial calling an empty function 10 billion times with two String arguments and with a list. The list call took 24 secs and the separate argument call took 13 secs. It's likely that other physical hardware will show different results. It's also possible that JVM optimisation is not making this a fair test.</p>\n\n<pre><code>public class PerfTest {\n\n    public static void main(String[] args) {\n        List&lt;String&gt; list = Arrays.asList(\"a\", \"b\");\n        long time1 = System.currentTimeMillis();\n        for (long i = 0; i &lt; 1E10; i++) {\n            func1(\"a\", \"b\");\n        }\n        long time2 = System.currentTimeMillis();\n        for (long i = 0; i &lt; 1E10; i++) {\n            func2(list);\n        }\n        System.out.println((time2 - time1) + \"/\" + (System.currentTimeMillis() - time2));\n    }\n\n    private static void func1(String s1, String s2) { }\n    private static void func2(List&lt;String&gt; sl) { }\n}\n</code></pre>\n\n<p>However my answer above still stands: if you are calling a function 10 billion times then it might be worth optimising but it is much better practice to start with a focus on clarity and then use profiling to focus code-tuning effort if that is required.</p>\n", "last_activity_date": 1476843784, "answer_id": 40120378, "is_accepted": true, "owner": {"user_id": 3705127, "reputation": 10046, "user_type": "registered", "accept_rate": 53, "display_name": "sprinter", "link": "http://stackoverflow.com/users/3705127/sprinter", "profile_image": "https://www.gravatar.com/avatar/b03aedaddfa4dc1c2b331f318a724ec7?s=128&d=identicon&r=PG&f=1"}, "last_edit_date": 1476843784, "question_id": 40120289}