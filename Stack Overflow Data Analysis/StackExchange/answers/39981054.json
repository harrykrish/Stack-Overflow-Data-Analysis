{"title": "Transforming a rectangle image into a quadrilateral using a CATransform3D", "tags": ["iphone", "ios", "cocoa-touch", "math", "core-animation"], "creation_date": 1476199843, "score": 0, "body": "<p>With 100% thanks to JoshRL, here's a Swift version of JoshRL's class.</p>\n\n<p>This has been completely and totally debugged.  Lines that suffer the \"too long in Swift\" issue have been refactored and destruction tested.</p>\n\n<p>It is working flawlessly in high-volume production. Hope it helps someone, somewhere.</p>\n\n<p>Couldn't be easier to use.  Example showing how to use in Swift below.</p>\n\n<h1>2016 Swift version... full, working, copy and paste solution</h1>\n\n<pre><code>// JoshQuadView in Swift\n// from: http://stackoverflow.com/a/18606029/294884\n\n// NB: JoshRL uses the ordering convention\n// \"topleft, topright, bottomleft, bottomright\"\n// which is different from \"clockwise from topleft\".\n\n// Note: is not meant to handle concave.\n\nimport UIKit\n\nclass JoshQuadView:UIView\n    {\n    func transformToFitQuadTopLeft(tl:CGPoint,tr:CGPoint,bl:CGPoint,br:CGPoint)\n        {\n        guard CGPointEqualToPoint(self.layer.anchorPoint, CGPointZero) else { print(\"suck\");return }\n\n        let b:CGRect = boundingBoxForQuadTR(tl, tr, bl, br)\n        self.frame = b\n        self.layer.transform = rectToQuad( self.bounds,\n            CGPointMake(tl.x-b.origin.x, tl.y-b.origin.y),\n            CGPointMake(tr.x-b.origin.x, tr.y-b.origin.y),\n            CGPointMake(bl.x-b.origin.x, bl.y-b.origin.y),\n            CGPointMake(br.x-b.origin.x, br.y-b.origin.y) )\n        }\n\n    func boundingBoxForQuadTR(\n            tl:CGPoint, _ tr:CGPoint, _ bl:CGPoint, _ br:CGPoint    )-&gt;(CGRect)\n        {\n        var b:CGRect = CGRectZero\n\n        let xmin:CGFloat = min(min(min(tr.x, tl.x), bl.x),br.x);\n        let ymin:CGFloat = min(min(min(tr.y, tl.y), bl.y),br.y);\n        let xmax:CGFloat = max(max(max(tr.x, tl.x), bl.x),br.x);\n        let ymax:CGFloat = max(max(max(tr.y, tl.y), bl.y),br.y);\n\n        b.origin.x = xmin\n        b.origin.y = ymin\n        b.size.width = xmax - xmin\n        b.size.height = ymax - ymin\n\n        return b;\n        }\n\n    func rectToQuad(\n            rect:CGRect,\n            _ topLeft:CGPoint,\n            _ topRight:CGPoint,\n            _ bottomLeft:CGPoint,\n            _ bottomRight:CGPoint   )-&gt;(CATransform3D)\n        {\n        return rectToQuad(rect,\n                  topLeft.x, topLeft.y,\n                  topRight.x, topRight.y,\n                  bottomLeft.x, bottomLeft.y,\n                  bottomRight.x, bottomRight.y)\n        }\n\n\n    func rectToQuad(\n            rect:CGRect,\n            _ x1a:CGFloat, _ y1a:CGFloat,\n            _ x2a:CGFloat, _ y2a:CGFloat,\n            _ x3a:CGFloat, _ y3a:CGFloat,\n            _ x4a:CGFloat, _ y4a:CGFloat    )-&gt;(CATransform3D)\n        {\n        let X = rect.origin.x;\n        let Y = rect.origin.y;\n        let W = rect.size.width;\n        let H = rect.size.height;\n\n        let y21 = y2a - y1a;\n        let y32 = y3a - y2a;\n        let y43 = y4a - y3a;\n        let y14 = y1a - y4a;\n        let y31 = y3a - y1a;\n        let y42 = y4a - y2a;\n\n        let a = -H*(x2a*x3a*y14 + x2a*x4a*y31 - x1a*x4a*y32 + x1a*x3a*y42);\n        let b = W*(x2a*x3a*y14 + x3a*x4a*y21 + x1a*x4a*y32 + x1a*x2a*y43);\n\n        // let c = H*X*(x2a*x3a*y14 + x2a*x4a*y31 - x1a*x4a*y32 + x1a*x3a*y42) - H*W*x1a*(x4a*y32 - x3a*y42 + x2a*y43) - W*Y*(x2a*x3a*y14 + x3a*x4a*y21 + x1a*x4a*y32 + x1a*x2a*y43);\n        // Could be too long for Swift. Replaced with four lines:\n        let c0 = -H*W*x1a*(x4a*y32 - x3a*y42 + x2a*y43)\n        let cx = H*X*(x2a*x3a*y14 + x2a*x4a*y31 - x1a*x4a*y32 + x1a*x3a*y42)\n        let cy = -W*Y*(x2a*x3a*y14 + x3a*x4a*y21 + x1a*x4a*y32 + x1a*x2a*y43)\n        let c = c0 + cx + cy\n\n        let d = H*(-x4a*y21*y3a + x2a*y1a*y43 - x1a*y2a*y43 - x3a*y1a*y4a + x3a*y2a*y4a);\n        let e = W*(x4a*y2a*y31 - x3a*y1a*y42 - x2a*y31*y4a + x1a*y3a*y42);\n\n        // let f = -(W*(x4a*(Y*y2a*y31 + H*y1a*y32) - x3a*(H + Y)*y1a*y42 + H*x2a*y1a*y43 + x2a*Y*(y1a - y3a)*y4a + x1a*Y*y3a*(-y2a + y4a)) - H*X*(x4a*y21*y3a - x2a*y1a*y43 + x3a*(y1a - y2a)*y4a + x1a*y2a*(-y3a + y4a)));\n        // Is too long for Swift. Replaced with four lines:\n        let f0 = -W*H*(x4a*y1a*y32 - x3a*y1a*y42 + x2a*y1a*y43)\n        let fx = H*X*(x4a*y21*y3a - x2a*y1a*y43 - x3a*y21*y4a + x1a*y2a*y43)\n        let fy = -W*Y*(x4a*y2a*y31 - x3a*y1a*y42 - x2a*y31*y4a + x1a*y3a*y42)\n        let f = f0 + fx + fy\n\n        let g = H*(x3a*y21 - x4a*y21 + (-x1a + x2a)*y43);\n        let h = W*(-x2a*y31 + x4a*y31 + (x1a - x3a)*y42);\n\n        // let i = W*Y*(x2a*y31 - x4a*y31 - x1a*y42 + x3a*y42) + H*(X*(-(x3a*y21) + x4a*y21 + x1a*y43 - x2a*y43) + W*(-(x3a*y2a) + x4a*y2a + x2a*y3a - x4a*y3a - x2a*y4a + x3a*y4a));\n        // Is too long for Swift. Replaced with four lines:\n        let i0 = H*W*(x3a*y42 - x4a*y32 - x2a*y43)\n        let ix = H*X*(x4a*y21 - x3a*y21 + x1a*y43 - x2a*y43)\n        let iy = W*Y*(x2a*y31 - x4a*y31 - x1a*y42 + x3a*y42)\n        var i = i0 + ix + iy\n\n        let kEpsilon:CGFloat = 0.0001;\n        if(fabs(i) &lt; kEpsilon) { i = kEpsilon * (i &gt; 0 ? 1.0 : -1.0); }\n\n        return CATransform3D(m11:a/i, m12:d/i, m13:0, m14:g/i,\n                            m21:b/i, m22:e/i, m23:0, m24:h/i,\n                            m31:0, m32:0, m33:1, m34:0,\n                            m41:c/i, m42:f/i, m43:0, m44:1.0)\n        }\n\n    }\n</code></pre>\n\n<p>To use in Swift:</p>\n\n<p>say you have a container view \"QuadScreen\".</p>\n\n<p>Drop the view you want to stretch will be a JoshQuadView in the scene. \"jqv\" in the example here.  </p>\n\n<p>Simply put four corner-handles (ie, images) in the scene, being PNGs of your handle icons. The code just below completely handles these handles; just follow the comments in the code for how to very easily set them up in storyboard.</p>\n\n<p>It's just one line of code to do the stretching:</p>\n\n<pre><code>class QuadScreen:UIViewController\n    {\n    // sit your JoshQuadView in this view\n    @IBOutlet var jqv:JoshQuadView!\n\n    // simply have four small subview views, \"handles\"\n    // with an icon on them (perhaps a small circle)\n    // and put those over the four corners of the jqv\n\n    // NOTE numbered CLOCKWISE from top left here:\n    @IBOutlet var handle1:UIView!\n    @IBOutlet var handle2:UIView!\n    @IBOutlet var handle3:UIView!\n    @IBOutlet var handle4:UIView!\n\n    // put a pan recognizer on each handle, action goes to here\n    // (for the pan recognizers, set cancels-in-view as needed\n    // if you, example, highlight them on touch in their class)\n\n    @IBAction func dragHandle(p:UIPanGestureRecognizer!)\n        {\n        let tr = p.translationInView(p.view)\n        p.view!.center.x += tr.x\n        p.view!.center.y += tr.y\n        p.setTranslation(CGPointZero, inView: p.view)\n\n        jqv.transformToFitQuadTopLeft(\n            handle1.center, tr: handle2.center,\n            bl: handle4.center, br: handle3.center )\n        // it's that simple, there's nothing else to do\n\n        p.setTranslation(CGPointZero, inView: p.view)\n        }\n\n    override func viewDidLayoutSubviews()\n        {\n        // don't forget to do this....is critical.\n        jqv.layer.anchorPoint = CGPointMake(0, 0)\n        }\n</code></pre>\n\n<hr>\n\n<p>As a curiosity, and for the sake of google, it's ridiculously easy to do this in </p>\n\n<h1>Android</h1>\n\n<p>they have a built-in command for reshaping polys.  This excellent answer has copy and paste code: <a href=\"http://stackoverflow.com/a/34667015/294884\">http://stackoverflow.com/a/34667015/294884</a></p>\n", "last_activity_date": 1476911465, "answer_id": 39981054, "is_accepted": false, "owner": {"user_id": 294884, "reputation": 15622, "user_type": "registered", "accept_rate": 89, "display_name": "Joe Blow", "link": "http://stackoverflow.com/users/294884/joe-blow", "profile_image": "https://www.gravatar.com/avatar/f8675693dfeb3908195657eb3a3fdda4?s=128&d=identicon&r=PG"}, "last_edit_date": 1476911465, "question_id": 9470493}