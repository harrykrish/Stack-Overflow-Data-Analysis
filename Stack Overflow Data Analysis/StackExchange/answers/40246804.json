{"body": "<p>I recently tackled this problem. First off yes you can upload directly to s3 here is what I used for some info on this: <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/dev/HTTPPOSTExamples.html\" rel=\"nofollow\">http://docs.aws.amazon.com/AmazonS3/latest/dev/HTTPPOSTExamples.html</a></p>\n\n<p>First off you need to create a policy and signature server side to add to your html form for uploading files.</p>\n\n<pre><code>$policy = base64_encode(json_encode([\n            \"expiration\" =&gt; \"2100-01-01T00:00:00Z\",\n            \"conditions\" =&gt; [\n                [\"bucket\"=&gt; \"bucketname\"],\n                [\"starts-with\", '$key', \"foldername\"],\n                [\"acl\" =&gt; \"public-read\"],\n                [\"starts-with\", '$Content-Type', \"image/\"],\n                [\"success_action_status\" =&gt; '201'],\n            ]\n        ]));\n$signature = base64_encode(hash_hmac('sha1',$policy,getenv('S3_SECRET_KEY'),true));\n</code></pre>\n\n<p>Now on the frontend my form I don't use a submit button, you could use a submit button but you will need to catch the submit and prevent the form from actually submitting till after the upload finishes.</p>\n\n<p>When we click save, it generates an md5 (use npm to install) filename so that file names can't really be guessed randomly, it then uses ajax to upload the file up to S3. After this is finished it puts the file data and returned aws data in a hidden input and submits the form. It should look something like this:</p>\n\n<pre><code>&lt;form action=\"/post/url\" method=\"POST\" id=\"form\"&gt;\n    &lt;input type=\"text\" name=\"other_field\" /&gt;\n    &lt;input type=\"file\" class=\"form-control\" id=\"image_uploader\" name=\"file\" accept=\"image/*\" /&gt;\n    &lt;input type=\"hidden\" id=\"hidden_medias\" name=\"medias\" value=\"[]\" /&gt;\n&lt;/form&gt;\n&lt;input type=\"button\" value=\"save\" id=\"save\" /&gt;\n&lt;script&gt;\n$(document).ready(function(){\n    $('#save').click(function(){\n            uploadImage(function () {\n                $('#form').submit();\n            });\n    });\n});\nvar uploadImage = function(callback) {\n    var file = $('#image_uploader')[0].files[0];\n    if(file !== undefined) {\n        var data = new FormData();\n        var filename = md5(file.name + Math.floor(Date.now() / 1000));\n        var filenamePieces = file.name.split('.');\n        var extension = filenamePieces[filenamePieces.length - 1];\n        data.append('acl',\"public-read\");\n        data.append('policy',\"{!! $policy !!}\");\n        data.append('signature',\"{!! $signature !!}\");\n        data.append('Content-type',\"image/\");\n        data.append('success_action_status',\"201\");\n        data.append('AWSAccessKeyId',\"{!! getenv('S3_KEY_ID') !!}\");\n        data.append('key',filename + '.' + extension);\n        data.append('file', file);\n\n        var fileData = {\n            type: file.type,\n            name: file.name,\n            size: file.size\n        };\n\n        $.ajax({\n            url: 'https://{bucket_name}.s3.amazonaws.com/',\n            type: 'POST',\n            data: data,\n            processData: false,\n            contentType: false,\n\n            success: function (awsData) {\n                var xmlData = new XMLSerializer().serializeToString(awsData);\n                var currentImages = JSON.parse($('#hidden_medias').val());\n                currentImages.push({\n                    awsData: xmlData,\n                    fileData: fileData\n                });\n                $('#hidden_medias').val(JSON.stringify(currentImages));\n                callback();\n            },\n            error: function (errorData) {\n                console.log(errorData);\n            }\n        });\n    }\n};\n&lt;/script&gt;\n</code></pre>\n\n<p>The controller listening for the submit then parses the JSON from that input field and creates an instance of Media (a model I created) and it stores the <code>awsData</code> and <code>fileData</code> for each image. </p>\n\n<p>Then instead of pointing html image tags to the s3 file like this:</p>\n\n<pre><code>&lt;img src=\"https://{bucketname}.s3.amazonaws.com/filename.jpg\" /&gt;\n</code></pre>\n\n<p>I do something like this:</p>\n\n<pre><code>&lt;img src=\"/medias/{id}\" /&gt;\n</code></pre>\n\n<p>Then the route can go through the normal <code>auth</code> middleware and all you need to do in Laravel. Finally, that route points to a controller that does this:</p>\n\n<pre><code>public function getResponse($id)\n{\n    $media = Media::find($id);\n    return (new Response('',301,['Location' =&gt; $media-&gt;info['aws']['Location']]));\n}\n</code></pre>\n\n<p>So what this does is simply uses a 301 redirect and sets the header location to the actual aws file. Since we generate an md5 filename when we upload the file to aws each filename is an md5 so people couldn't randomly search for aws files in the bucket.</p>\n", "tags": ["php", "laravel", "amazon-s3", "laravel-4", "laravel-5.2"], "creation_date": 1477418917, "score": 2, "last_activity_date": 1477418917, "answer_id": 40246804, "is_accepted": true, "owner": {"user_id": 1401720, "reputation": 6408, "user_type": "registered", "accept_rate": 100, "display_name": "Pitchinnate", "link": "http://stackoverflow.com/users/1401720/pitchinnate", "profile_image": "https://www.gravatar.com/avatar/c3cffa4e8f9f7741871ef6037f6b6996?s=128&d=identicon&r=PG"}, "title": "Laravel secure Amazon s3 bucket files", "question_id": 40168221}