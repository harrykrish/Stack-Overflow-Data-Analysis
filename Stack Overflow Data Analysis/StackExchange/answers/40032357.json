{"title": "Intermittent Missing Seconds with Timer", "tags": ["ios", "timer", "nstimer"], "creation_date": 1476399513, "score": 2, "body": "<p>So the issue here is that <code>Timer</code> is not accurate in this way. Or rather, its timekeeping is reasonably accurate, but the actual rate of firing has some variance as it is dependent on the runloop.</p>\n\n<p><a href=\"https://developer.apple.com/reference/foundation/timer\" rel=\"nofollow\">From the documentation:</a></p>\n\n<blockquote>\n  <p>A timer is not a real-time mechanism; it fires only when one of the\n  run loop modes to which the timer has been added is running and able\n  to check if the timer\u2019s firing time has passed.</p>\n</blockquote>\n\n<p>To show this, I got rid of all of the rounding in your code and printed the output (you don't even need to pause to see this happen). Here is what this variance looked:</p>\n\n<pre><code>18.0004420280457\n19.0005180239677\n20.0004770159721\n21.0005570054054\n21.9997390508652\n23.0003360509872\n24.0003190040588\n24.9993720054626\n25.9991790056229\n</code></pre>\n\n<p>Sometimes it fires particularly late and this causes the whole thing to get thrown off. The rounding doesn't help because you are still depending on the timer for the actual reference time and eventually it will be off by more than a second.</p>\n\n<p>There are a few ways to fix the situation here depending on what exactly you are trying to accomplish. If you absolutely need the actual time, you can adjust the timer to fire at fractions of a second and instead use that output to estimate the seconds a little more accurately. This is more work and will still not be totally right (there will always be a variance).</p>\n\n<p>Based on your code, it seems like simply incrementing a number based on the timer should be enough to accomplish your goal. Here is a simple modification to your code making this work. This will count up simply and never skip a second in the count whether you pause or not:</p>\n\n<pre><code>/// The number of seconds that have elapsed since the initial fire.\nprivate var elapsed = 0\n\nprivate var timer: Timer?\n\n/// Starts the shower timer.\nfunc startTimer() {\n    elapsed = 0\n    // Fire the timer every second.\n    timer = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(updateElapsedSeconds), userInfo: nil, repeats: true)\n}\n\n/// Pauses the shower timer.\nfunc pauseTimer() {\n    // Pause the timer.\n    timer?.invalidate()\n    // Set the timer to `nil`, according to the documentation.\n    timer = nil\n}\n\n/// Resumes the timer.\nfunc resumeTimer() {\n    // Recreate the timer.\n    timer = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(updateElapsedSeconds), userInfo: nil, repeats: true)\n}\n\n/// Sets the number of elapsed seconds since the timer has been started, accounting for pauses, if any.\nprivate func updateElapsedTime() {\n    // Get the time that has elapsed since the initial fire of the timer, and subtract any pauses.\n    elapsed += 1\n    // debug print\n    print(elapsed)\n}\n\n/// Updates the number of elapsed seconds since the timer has been firing.\n@objc private func updateElapsedSeconds() {\n    // Configure the elapsed time with each fire.\n    updateElapsedTime()\n    // Post a notification when the timer fires, passing a dictionary that includes the number of elapsed seconds.\n    NotificationCenter.default.post(name: CustomNotification.showerTimerFiredNotification, object: nil, userInfo: nil)\n}\n</code></pre>\n", "last_activity_date": 1476400358, "answer_id": 40032357, "is_accepted": true, "owner": {"user_id": 484304, "reputation": 17819, "user_type": "registered", "accept_rate": 67, "display_name": "Dima", "link": "http://stackoverflow.com/users/484304/dima", "profile_image": "https://www.gravatar.com/avatar/866fd50b077d3d8bf4ce63ec68bc1dae?s=128&d=identicon&r=PG"}, "last_edit_date": 1476400358, "question_id": 40031418}