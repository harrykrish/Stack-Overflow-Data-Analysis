{"body": "<blockquote>\n  <p><strong>NOTE:</strong> Travis Illig has provided a <a href=\"http://stackoverflow.com/a/40306029/74302\">hollistic answer to the question</a> which I am marking as the answer as it answers the question in a broad and generic way.  However, I also wanted to document the <strong>specific solution</strong> to my question.</p>\n</blockquote>\n\n<p>You need to be fairly careful of how you wire up the dependency resolver to AutoMapper, to be precise you must resolve the component context within the closure - failing to do so will result in the context being disposed before AutoMapper ever gets a chance to resolve it's dependencies.</p>\n\n<h3>Solution #1</h3>\n\n<p>In my example, the following code block that registers the <code>IMapper</code> using the previously defined <code>MapperConfiguration</code>:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>builder.Register(c =&gt; {\n    var context = c.Resolve&lt;IComponentContext&gt;();\n    var config = context.Resolve&lt;MapperConfiguration&gt;();\n    return config.CreateMapper();\n}).As&lt;IMapper&gt;();\n</code></pre>\n\n<p>Can be trivially adapted by using an overload of <code>MapperConfiguration.CreateMapper()</code> that accepts a <code>Func&lt;Type, object&gt;</code> as an argument named <code>serviceCtor</code> that AutoMapper will use to construct dependencies:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>builder.Register(c =&gt; {\n    var context = c.Resolve&lt;IComponentContext&gt;();\n    var config = context.Resolve&lt;MapperConfiguration&gt;();\n    return config.CreateMapper(context.Resolve);\n}).As&lt;IMapper&gt;();\n</code></pre>\n\n<p>It's essential that the Component Context <code>context</code> is used as it is declared within the closure, attempting to use <code>c</code> will result in the following exception:</p>\n\n<blockquote>\n  <p>This resolve operation has already ended. When registering components using lambdas, the <code>IComponentContext</code> '<code>c</code>' parameter to the lambda cannot be stored. Instead, either resolve <code>IComponentContext</code> again from '<code>c</code>', or resolve a <code>Func&lt;&gt;</code> based factory to create subsequent components from.</p>\n</blockquote>\n\n<h3>Solution #2</h3>\n\n<p>Using a very similar technique to Solution #1 it is possible to use the <code>IMapperConfiguration.ConstructServiceUsing(Func&lt;Type, object&gt;)</code> which provides for more readable code.  The original code:</p>\n\n<pre><code>builder.Register(c =&gt; {\n    var profiles = c.Resolve&lt;IEnumerable&lt;Profile&gt;&gt;();\n    return new MapperConfiguration(x =&gt; {\n        foreach (var profile in profiles) x.AddProfile(profile);           \n    });\n}).SingleInstance().AsSelf();\n</code></pre>\n\n<p>And the updated code with the call to <code>x.ConstructServiceUsing(constructor)</code>:</p>\n\n<pre><code>builder.Register(c =&gt; {\n    var profiles = c.Resolve&lt;IEnumerable&lt;Profile&gt;&gt;();\n    var context = c.Resolve&lt;IComponentContext&gt;();\n    return new MapperConfiguration(x =&gt; {\n        foreach (var profile in profiles) x.AddProfile(profile);\n        x.ConstructServicesUsing(context.Resolve);                   \n    });\n}).SingleInstance().AsSelf();\n</code></pre>\n\n<p>Again if you fail to create an instance of <code>IComponentContext</code> within the closure / lambda the context will have been disposed before the Mapper creates the dependencies.</p>\n", "tags": ["c#", "inversion-of-control", "automapper", "autofac", "automapper-5"], "creation_date": 1477689138, "score": 0, "last_activity_date": 1477689138, "answer_id": 40313274, "is_accepted": false, "owner": {"user_id": 74302, "reputation": 3686, "user_type": "registered", "accept_rate": 97, "display_name": "Richard Slater", "link": "http://stackoverflow.com/users/74302/richard-slater", "profile_image": "https://www.gravatar.com/avatar/daea6d3f8d5fd0d5b061036eaeeaa771?s=128&d=identicon&r=PG"}, "title": "Configuring AutoMapper to fulfil ITypeConverter&lt;,&gt; constructor dependecies with Autofac", "question_id": 40293597}