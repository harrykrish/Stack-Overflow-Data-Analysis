{"title": "Directed Graph In Prolog", "tags": ["graph", "path", "prolog", "logic-programming"], "creation_date": 1476641430, "score": 0, "body": "<p>Lets start with the first <code>travel/4</code> rule:</p>\n\n<pre><code>travel(A,B,P,[B|P]) :- \n   connectedEdges(A,B).\n</code></pre>\n\n<p>\"If points A and B are directly connected to each other, then we have found a direct sub-path, and hence can succeed by adding point B to the path which is unified with all the points we have visited thus far.\"</p>\n\n<p>In other words, since we have solved a sub-problem (by finding a direct connection to 2 nodes), we can essentially state that <code>P</code> (all that we have visited so far), is the tail of the path list <code>[B|P]</code> (the total path is the last node we have visited .... the current destination node, <em>prepended</em> to all the previous nodes we've visited).\n<hr>\nNow for the next <code>travel/4</code> rule:</p>\n\n<pre><code>travel(A,B,Visited,Path) :-\n   connectedEdges(A,C),           \n   C \\== B,\n   \\+member(C,Visited),\n   travel(C,B,[C|Visited],Path).\n</code></pre>\n\n<p>It is important to note that this second rule will always be tried as an alternative, whether or not the first rule succeeded. Due to that fact of this implementation, the implication here is that this code can possibly find <em>multiple</em> paths (if more than one exists).</p>\n\n<p>Anyway, in this second rule we find any nodes that are connected to <code>A</code>, <em>other than</em> <code>B</code>. Why?, this is because the first rule above already tried that; in this rule we're searching for alternatives. If that node <code>C</code> hasn't already been visited, we simply try to travel from that point (<code>C</code>) to our destination. Then we recursively query/call <code>travel/4</code> yet again, until we've found a complete path(s).</p>\n\n<p>Note again, that this implementation may find 0, 1, or more than 1 solution to a given query.\n<hr>\nTo recapitulate, the first rule is called to find <em>direct</em> connections between points. The second rule is called to find <em>indirect</em> connections between points.</p>\n", "last_activity_date": 1476641855, "answer_id": 40073679, "is_accepted": true, "owner": {"user_id": 1918809, "reputation": 943, "user_type": "registered", "accept_rate": 100, "display_name": "eazar001", "link": "http://stackoverflow.com/users/1918809/eazar001", "profile_image": "https://www.gravatar.com/avatar/02e1840590799bd5a59c76f7c8a7d6b1?s=128&d=identicon&r=PG&f=1"}, "last_edit_date": 1476641855, "question_id": 40072311}