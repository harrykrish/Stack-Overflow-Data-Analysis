{"title": "Finding first negative number in a monotonically decreasing array using recursion", "tags": ["java", "arrays", "recursion"], "creation_date": 1477363047, "score": 2, "body": "<p>I'm not sure why you are considering performance given you are implementing this using recursion. It would make more sense to make it iterative if you need efficiency.</p>\n\n<p>However there is a way of using a 'binary search' style mechanism, even using recursion:</p>\n\n<pre><code>int findNeg(int[] array, int left, int right) {\n    if (left &gt; right)\n        throw new IllegalArgumentException(\"No negative number\");\n    int mid = (left + right) / 2;\n    if (array[mid] &gt;= 0)\n        return findNeg(array, mid + 1, right);\n    else if (mid &gt; left)\n        return findNeg(array, left, mid);\n    else\n        return array[mid];\n}\n</code></pre>\n\n<p>Essentially the logic is that it is looking at a range. If the range is empty then there are no negative numbers. If the middle of the range is positive then look right. If the middle of the range is negative then look left unless you are at the left edge of the range in which case you have the first negative number.</p>\n\n<p>This is called using <code>findNeg(array, 0, array.length - 1)</code>. </p>\n", "last_activity_date": 1477363443, "answer_id": 40230504, "is_accepted": false, "owner": {"user_id": 3705127, "reputation": 10046, "user_type": "registered", "accept_rate": 53, "display_name": "sprinter", "link": "http://stackoverflow.com/users/3705127/sprinter", "profile_image": "https://www.gravatar.com/avatar/b03aedaddfa4dc1c2b331f318a724ec7?s=128&d=identicon&r=PG&f=1"}, "last_edit_date": 1477363443, "question_id": 40230362}