{"body": "<p>Here is the code I usually use. I'm the author, consider this as-is, public domain. It has a similar feature-set and concept as <a href=\"http://stackoverflow.com/a/38954889/616460\">CodeLurker's code</a> except the state machine is represented differently, the code is a bit shorter.</p>\n\n<pre><code>bool readCSVRow (QTextStream &amp;in, QStringList *row) {\n\n    static const int delta[][5] = {\n        //  ,    \"   \\n    ?  eof\n        {   1,   2,  -1,   0,  -1  }, // 0: parsing (store char)\n        {   1,   2,  -1,   0,  -1  }, // 1: parsing (store column)\n        {   3,   4,   3,   3,  -2  }, // 2: quote entered (no-op)\n        {   3,   4,   3,   3,  -2  }, // 3: parsing inside quotes (store char)\n        {   1,   3,  -1,   0,  -1  }, // 4: quote exited (no-op)\n        // -1: end of row, store column, success\n        // -2: eof inside quotes\n    };\n\n    row-&gt;clear();\n\n    if (in.atEnd())\n        return false;\n\n    int state = 0, t;\n    char ch;\n    QString cell;\n\n    while (state &gt;= 0) {\n\n        if (in.atEnd())\n            t = 4;\n        else {\n            in &gt;&gt; ch;\n            if (ch == ',') t = 0;\n            else if (ch == '\\\"') t = 1;\n            else if (ch == '\\n') t = 2;\n            else t = 3;\n        }\n\n        state = delta[state][t];\n\n        switch (state) {\n        case 0:\n        case 3:\n            cell += ch;\n            break;\n        case -1:\n        case 1:\n            row-&gt;append(cell);\n            cell = \"\";\n            break;\n        }\n\n    }\n\n    if (state == -2)\n        throw runtime_error(\"End-of-file found while inside quotes.\");\n\n    return true;\n\n}\n</code></pre>\n\n<ul>\n<li>Parameter: <code>in</code>, a <code>QTextStream</code>.</li>\n<li>Parameter: <code>row</code>, a <code>QStringList</code> that will receive the row.</li>\n<li>Returns: <code>true</code> if a row was read, <code>false</code> if EOF.</li>\n<li>Throws: <code>std::runtime_error</code> if an error occurs.</li>\n</ul>\n\n<p>It parses Excel style CSV's, handling quotes and double-quotes appropriately, and allows newlines in fields. Handles Windows and Unix line endings properly as long as your file is opened with <code>QFile::Text</code>. I don't think Qt supports old-school Mac line endings, and this doesn't support binary-mode untranslated line-endings, but for the most part this shouldn't be a problem these days.</p>\n\n<p>Other notes:</p>\n\n<ul>\n<li>Unlike CodeLurker's implementation this intentionally fails if EOF is hit inside quotes. If you change the -2's to -1's in the state table then it will be forgiving.</li>\n<li>Parses <code>x\"y\"z</code> as <code>xyz</code>, wasn't sure what the rule for mid-string quotes was. I have no idea if this is correct.</li>\n<li>Performance and memory characteristics the same as CodeLurker's (i.e. very good).</li>\n<li>Does not support unicode (<a href=\"http://doc.qt.io/qt-5/qtextstream.html#operator-gt-gt-1\" rel=\"nofollow\">converts to ISO-5589-1</a>) but changing to <code>QChar</code> should be trivial.</li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>QFile csv(filename);\ncsv.open(QFile::ReadOnly | QFile::Text);\n\nQTextStream in(&amp;csv);\nQStringList row;\nwhile (readCSVRow(in, &amp;row))\n    qDebug() &lt;&lt; row;\n</code></pre>\n", "tags": ["c++", "qt", "csv", "qt5", "qfile"], "creation_date": 1477354084, "score": 0, "last_activity_date": 1477354084, "answer_id": 40229435, "is_accepted": false, "owner": {"user_id": 616460, "reputation": 23170, "user_type": "registered", "accept_rate": 96, "display_name": "Jason C", "link": "http://stackoverflow.com/users/616460/jason-c", "profile_image": "https://i.stack.imgur.com/Yiloe.png?s=128&g=1"}, "title": "Parsing through a csv file in Qt", "question_id": 27318631}