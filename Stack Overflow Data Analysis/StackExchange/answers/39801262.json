{"body": "<p>Okay, I figured out this beast. Stick with me as I answer. </p>\n\n<p>ajax is your best friend here. </p>\n\n<p>So: first, change the <code>link_to</code> for the <code>new</code> (plus) method to a button:</p>\n\n<pre><code>&lt;button class=\"btn btn-success\" data-toggle=\"modal\" data-target=\"#new-dependency-modal-window\" id=\"newdependency\"&gt;\n    &lt;%= hidden_field_tag \"cost_id\", cost.id %&gt;\n    &lt;span class=\"glyphicon glyphicon-plus\"&gt;&lt;/span&gt;\n&lt;/button&gt; \n</code></pre>\n\n<p>Like this. Notice there is no link at all to the <code>/cost/:id/cost_dependencies/new</code> that will come into play later. </p>\n\n<p>below the final <code>div</code> (at the end of your file), add this code for the existence of the modal</p>\n\n<pre><code>&lt;div id=\"new-dependency-modal-window\" class=\"modal fade\" role=\"dialog\" aria-labelledby=\"myNewDependencyModalLabel\" aria-hidden=\"true\"&gt;\n    &lt;div class=\"modal-dialog\" role=\"document\" id=\"new_cost_dependency_modal\" style=\"width: 85%\"&gt;\n\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>next, create a controller for the Cost Dependencies, and add the normal methods:</p>\n\n<pre><code>class CostDependenciesController &lt; ApplicationController\n\n  def new\n    @cost = Cost.find(params[:cost_id])\n    @cost_dependency = CostDependency.new\n    respond_to do |format|\n        format.html # new.html.erb\n        format.json { render json: @cost_dependency }\n    end\n  end\n\n  def edit\n    @edit = true\n    @cost = Cost.find(params[:cost_id])\n    @cost_dependency = @cost.cost_dependencies.find(params[:id])\n  end\n\n  def index\n\n  end\n\n  def create\n    @cost = Cost.find(params[:cost_id])\n    @cost_dependency = @cost.cost_dependencies.new(cost_dependencies_params)\n    respond_to do |format|\n      if @cost_dependency.save\n        format.html { redirect_to controller: 'costs', action: 'index', status: 303, notice: [true, 'Cost Dependency was successfully created.'] }\n        format.json { render json: @cost_dependency, status: :created, location: @cost }\n      else\n        format.html { render action: \"new\" }\n        format.json { render json: @cost_dependency.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n\n  def update\n    @cost = Cost.find(params[:cost_id])\n    @cost_dependency = @cost.cost_dependencies.find(params[:id])\n\n    respond_to do |format|\n      if @cost_dependency.update_attributes(cost_dependencies_params)\n        format.html { redirect_to controller: 'costs', action: 'index', status: 303, notice: [true, 'Cost was successfully updated.'] }\n        format.json { head :no_content }\n      else\n        format.html { render action: \"edit\" }\n        format.json { render json: @cost.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n\ndef destroy\n  @cost = Cost.find(params[:cost_id])\n  @cost_dependency = @cost.cost_dependencies.find(params[:id])\n  @cost_dependency.destroy\n\n  respond_to do |format|\n    format.html { redirect_to controller: 'costs', action: 'index', status: 303, alert: [true, 'Cost Dependency has been deleted.'] }\n    format.json { head :no_content }\n  end\nend\n\n\nprivate\n  def cost_dependencies_params\n    params.require(:cost_dependency).permit(:cost_id, :dependency_category, :dependency_option, :per_job, :per_page)\n  end\n\nend\n</code></pre>\n\n<p>Notice how in each method there is the <code>@cost = Cost.find(params[:cost_id])</code> this will grab you the correct <code>Cost</code> for which you can call the <code>@cost.cost_dependencies.new</code> method. This is the reason for the hidden_field tag inside the button tag, to make the parameter findable by jQuery.</p>\n\n<p>From here, the goal is to call the new method from jQuery using an ajax call, which we will then grab the content and shove it inside the modal. </p>\n\n<pre><code>$(document).on \"turbolinks:load\", -&gt;\n    $('button[id=\"newdependency\"]').click -&gt;\n        cost_id = $(this).find('#cost_id').val()\n        $.ajax({\n            url: 'costs/'+cost_id+'/cost_dependencies/new',\n            type: 'GET',\n            data: {cost_id: cost_id},\n            dataType: 'html',\n            success: (data) -&gt; \n                dependencyform = $($.parseHTML(data)).find(\"#new_dependency_modal\")\n                $('#new_cost_dependency_modal').html(dependencyform)\n        })\n</code></pre>\n\n<p>So we execute once the button with the <code>newdependency</code> id has been clicked, we get the html back from the page load (which will be the entire page, navbar and all. but we labeled the content we want (see <code>new_dependency_modal</code>) so we can <code>find()</code> it. We take that html and set it inside the modal <code>div</code> on the page we are still currently on. </p>\n\n<p><strong>Note:</strong> The <code>this</code> is important here, otherwise it will grab the first cost_id it finds on the page, which would not be good, so we localize the scope.</p>\n\n<p>and just for clarity sake, here is my <code>new.html.erb</code> page that gets called. </p>\n\n<pre><code>&lt;div class=\"modal-content\" id=\"new_dependency_modal\"&gt;\n\n  &lt;div class=\"modal-header\"&gt;\n    &lt;button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\"&gt;\u00d7&lt;/button&gt;\n    &lt;h2 style=\"color: #49afcd\" class=\"center-block westmontTextMuseo3\"&gt;New Cost Dependency for - &lt;%= @cost.category+\" - \"+@cost.option %&gt;&lt;/h2&gt;\n  &lt;/div&gt;\n  &lt;div class=modal-body&gt;\n    &lt;%= render 'form' %&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Where form is just the form to create the new cost_dependency.</p>\n", "tags": ["jquery", "ruby-on-rails", "twitter-bootstrap", "model-view-controller", "associations"], "creation_date": 1475276614, "score": 0, "last_activity_date": 1475276614, "answer_id": 39801262, "is_accepted": true, "owner": {"user_id": 4032946, "reputation": 75, "user_type": "registered", "accept_rate": 57, "display_name": "Avir94", "link": "http://stackoverflow.com/users/4032946/avir94", "profile_image": "https://www.gravatar.com/avatar/d430e8647c39d6d9f8db1a660e13d49c?s=128&d=identicon&r=PG&f=1"}, "title": "Rails: creating a form_for for a belongs_to association within a bootstrap modal", "question_id": 39712224}