{"title": "How FOR XML PATH(&#39;&#39;) works when concatenating rows", "tags": ["sql-server", "tsql", "for-xml-path"], "creation_date": 1454489025, "score": 2, "body": "<p>What <code>FOR XML PATH('xxx')</code> does is create an XML string for the resultset that puts each row in a <code>&lt;xxx&gt;&lt;/xxx&gt;</code> element and each column value inside the row, in an element with the name for that column. </p>\n\n<p>If the PATH is empty it omits the row element in the XML generation. If the column has no name it omits the column element in the XML generation. When both PATH is empty and columns have no names it effectively becomes a string concatenation of all rows.</p>\n\n<p>Run the following statements to get a better insight in the process:</p>\n\n<pre><code>-- Each row is in a &lt;beta&gt;&lt;/beta&gt; element\n-- Each column in that row in a &lt;alfa&gt;&lt;/alfa&gt; element (the column name)\nSELECT\n    alfa=','+TABLE_SCHEMA + '.' + TABLE_NAME\nFROM\n    INFORMATION_SCHEMA.TABLES\nFOR\n    XML PATH('beta');\n\n-- Since the PATH is empty, the rows are not put inside an element\n-- Each column in that row is in a &lt;alfa&gt;&lt;/alfa&gt; element (the column name)\nSELECT\n    alfa=','+TABLE_SCHEMA + '.' + TABLE_NAME\nFROM\n    INFORMATION_SCHEMA.TABLES\nFOR\n    XML PATH('');\n\n-- Since the PATH is empty, the rows are not put inside an element\n-- Since the column has no name it is not put inside an element     \nSELECT\n    ','+TABLE_SCHEMA + '.' + TABLE_NAME\nFROM\n    INFORMATION_SCHEMA.TABLES\nFOR\n    XML PATH('');\n\n-- This uses the STUFF function to remove the leading comma to get a proper comma-seperated list    \nSELECT STUFF((\n    SELECT\n        ','+TABLE_SCHEMA + '.' + TABLE_NAME\n    FROM\n        INFORMATION_SCHEMA.TABLES\n    FOR\n        XML PATH('')\n    ),1,1,''\n) AS comma_seperated_list;\n</code></pre>\n\n<hr>\n\n<p>Now I hear you asking: How can I remove the column name when I simply select a column from a table. There are several ways, in order of my preference:</p>\n\n<ul>\n<li>XQuery properties: <code>SELECT [text()]=column_name ...</code></li>\n<li>Use a subquery to select the column value: <code>SELECT (SELECT column_name) ...</code></li>\n<li>CAST the column to its type: <code>SELECT CAST(column_value AS &lt;TYPE of the column&gt;) ...</code></li>\n</ul>\n\n<p>Examples:</p>\n\n<pre><code>SELECT\n    [text()]=TABLE_NAME\nFROM\n    INFORMATION_SCHEMA.TABLES\nFOR\n    XML PATH('');\n\nSELECT\n    (SELECT TABLE_NAME)\nFROM\n    INFORMATION_SCHEMA.TABLES\nFOR\n    XML PATH('');\n\nSELECT\n    CAST(TABLE_NAME AS SYSNAME)\nFROM\n    INFORMATION_SCHEMA.TABLES\nFOR\n    XML PATH('');\n</code></pre>\n", "last_activity_date": 1477741247, "answer_id": 35172160, "is_accepted": true, "owner": {"user_id": 243373, "reputation": 7351, "user_type": "registered", "display_name": "TT.", "link": "http://stackoverflow.com/users/243373/tt", "profile_image": "https://i.stack.imgur.com/NxxWB.jpg?s=128&g=1"}, "last_edit_date": 1477741247, "question_id": 35148472}