{"body": "<p>simple method <strong>only with array list , with out threads</strong>  </p>\n\n<p><strong>Note:</strong> Not efficient implementation but simple.</p>\n\n<pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Tail{\n  public static void main(String[] args) throws FileNotFoundException, IOException{\n    String path = args[0];\n    int len = Integer.parseInt(args[1]);\n\n    FileInputStream fis = new FileInputStream(path);\n    InputStreamReader input = new InputStreamReader(fis);\n    BufferedReader br = new BufferedReader(input);\n\n    /*\n    String data;\n     String result = new String();\n    int count=0,temp=0;\n    while ((data = br.readLine()) != null) {\n         count++;\n         temp++;\n         if(temp == len){\n          temp =0;\n          result = \"\";\n         }result = result.concat(data + '\\n');\n\n\n    }\n    System.out.println(\"Lines: \"+count);\n\n    System.out.println(result);\n    */\n\n    String data;\n    List&lt;String&gt; tmpData = new ArrayList&lt;String&gt;();\n    do\n    {  \n        data = br.readLine();  \n        tmpData.add(data);  \n    }while(data!=null);  \n    int i=tmpData.size() - 1;\n    int j = i - len;\n    //System.out.println(j);\n    do{\n      System.out.println(tmpData.get(i-1));\n      i--;\n    }while(i&gt;j);\n  }\n\n  do{\n      System.out.println(tmpData.get(j));\n      j++;\n    }while(j&lt;i);\n}\n</code></pre>\n", "tags": ["java", "file", "file-io", "iostream", "tail"], "creation_date": 1477416533, "score": 0, "last_activity_date": 1477416533, "answer_id": 40246121, "is_accepted": false, "owner": {"user_id": 2490002, "reputation": 161, "user_type": "registered", "display_name": "Mahesh Karthu", "link": "http://stackoverflow.com/users/2490002/mahesh-karthu", "profile_image": "https://www.gravatar.com/avatar/690e674a8b1680f13859e04a075c101c?s=128&d=identicon&r=PG"}, "title": "Java IO implementation of unix/linux &quot;tail -f&quot;", "question_id": 557844}