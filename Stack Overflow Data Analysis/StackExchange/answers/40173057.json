{"title": "What does the &quot;Other&quot; category of records mean in Chrome Timeline profiling tool?", "tags": ["javascript", "google-chrome", "d3.js", "svg", "profiling"], "creation_date": 1477042253, "score": 1, "body": "<p>I asked me the same question two years ago. I didn't know what the grey bars respectively the <em>Other</em> category stand for. </p>\n\n<p>It was hard to find an official answer because the only thing the Chrome DevTools Docs said was <strong>\"Activity that was not instrumented by DevTools\"</strong>. But this statement was removed since there is a <a href=\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/performance-reference\" rel=\"nofollow\">new documentation</a>.</p>\n\n<p>So I checked out the Chromium project and searched the devtools code for an answer. I found out that the <em>Other</em> category contains all activities that not belonging to the categories <em>Loading</em>, <em>Scripting</em>, <em>Rendering</em>, <em>Painting</em> and <em>GPU</em>. This is a <a href=\"https://cs.chromium.org/chromium/src/third_party/WebKit/Source/devtools/front_end/timeline_model/TimelineModel.js?sq=package:chromium&amp;dr=C\" rel=\"nofollow\">list of all record types</a>:</p>\n\n<pre><code>WebInspector.TimelineModel.RecordType = {\n    Task: \"Task\",\n    Program: \"Program\",\n    EventDispatch: \"EventDispatch\",\n\n    GPUTask: \"GPUTask\",\n\n    Animation: \"Animation\",\n    RequestMainThreadFrame: \"RequestMainThreadFrame\",\n    BeginFrame: \"BeginFrame\",\n    NeedsBeginFrameChanged: \"NeedsBeginFrameChanged\",\n    BeginMainThreadFrame: \"BeginMainThreadFrame\",\n    ActivateLayerTree: \"ActivateLayerTree\",\n    DrawFrame: \"DrawFrame\",\n    HitTest: \"HitTest\",\n    ScheduleStyleRecalculation: \"ScheduleStyleRecalculation\",\n    RecalculateStyles: \"RecalculateStyles\", // For backwards compatibility only, now replaced by UpdateLayoutTree.\n    UpdateLayoutTree: \"UpdateLayoutTree\",\n    InvalidateLayout: \"InvalidateLayout\",\n    Layout: \"Layout\",\n    UpdateLayer: \"UpdateLayer\",\n    UpdateLayerTree: \"UpdateLayerTree\",\n    PaintSetup: \"PaintSetup\",\n    Paint: \"Paint\",\n    PaintImage: \"PaintImage\",\n    Rasterize: \"Rasterize\",\n    RasterTask: \"RasterTask\",\n    ScrollLayer: \"ScrollLayer\",\n    CompositeLayers: \"CompositeLayers\",\n\n    ScheduleStyleInvalidationTracking: \"ScheduleStyleInvalidationTracking\",\n    StyleRecalcInvalidationTracking: \"StyleRecalcInvalidationTracking\",\n    StyleInvalidatorInvalidationTracking: \"StyleInvalidatorInvalidationTracking\",\n    LayoutInvalidationTracking: \"LayoutInvalidationTracking\",\n    LayerInvalidationTracking: \"LayerInvalidationTracking\",\n    PaintInvalidationTracking: \"PaintInvalidationTracking\",\n    ScrollInvalidationTracking: \"ScrollInvalidationTracking\",\n\n    ParseHTML: \"ParseHTML\",\n    ParseAuthorStyleSheet: \"ParseAuthorStyleSheet\",\n\n    TimerInstall: \"TimerInstall\",\n    TimerRemove: \"TimerRemove\",\n    TimerFire: \"TimerFire\",\n\n    XHRReadyStateChange: \"XHRReadyStateChange\",\n    XHRLoad: \"XHRLoad\",\n    CompileScript: \"v8.compile\",\n    EvaluateScript: \"EvaluateScript\",\n\n    CommitLoad: \"CommitLoad\",\n    MarkLoad: \"MarkLoad\",\n    MarkDOMContent: \"MarkDOMContent\",\n    MarkFirstPaint: \"MarkFirstPaint\",\n\n    TimeStamp: \"TimeStamp\",\n    ConsoleTime: \"ConsoleTime\",\n    UserTiming: \"UserTiming\",\n\n    ResourceSendRequest: \"ResourceSendRequest\",\n    ResourceReceiveResponse: \"ResourceReceiveResponse\",\n    ResourceReceivedData: \"ResourceReceivedData\",\n    ResourceFinish: \"ResourceFinish\",\n\n    RunMicrotasks: \"RunMicrotasks\",\n    FunctionCall: \"FunctionCall\",\n    GCEvent: \"GCEvent\", // For backwards compatibility only, now replaced by MinorGC/MajorGC.\n    MajorGC: \"MajorGC\",\n    MinorGC: \"MinorGC\",\n    JSFrame: \"JSFrame\",\n    JSSample: \"JSSample\",\n    // V8Sample events are coming from tracing and contain raw stacks with function addresses.\n    // After being processed with help of JitCodeAdded and JitCodeMoved events they\n    // get translated into function infos and stored as stacks in JSSample events.\n    V8Sample: \"V8Sample\",\n    JitCodeAdded: \"JitCodeAdded\",\n    JitCodeMoved: \"JitCodeMoved\",\n    ParseScriptOnBackground: \"v8.parseOnBackground\",\n\n    UpdateCounters: \"UpdateCounters\",\n\n    RequestAnimationFrame: \"RequestAnimationFrame\",\n    CancelAnimationFrame: \"CancelAnimationFrame\",\n    FireAnimationFrame: \"FireAnimationFrame\",\n\n    RequestIdleCallback: \"RequestIdleCallback\",\n    CancelIdleCallback: \"CancelIdleCallback\",\n    FireIdleCallback: \"FireIdleCallback\",\n\n    WebSocketCreate : \"WebSocketCreate\",\n    WebSocketSendHandshakeRequest : \"WebSocketSendHandshakeRequest\",\n    WebSocketReceiveHandshakeResponse : \"WebSocketReceiveHandshakeResponse\",\n    WebSocketDestroy : \"WebSocketDestroy\",\n\n    EmbedderCallback : \"EmbedderCallback\",\n\n    SetLayerTreeId: \"SetLayerTreeId\",\n    TracingStartedInPage: \"TracingStartedInPage\",\n    TracingSessionIdForWorker: \"TracingSessionIdForWorker\",\n\n    DecodeImage: \"Decode Image\",\n    ResizeImage: \"Resize Image\",\n    DrawLazyPixelRef: \"Draw LazyPixelRef\",\n    DecodeLazyPixelRef: \"Decode LazyPixelRef\",\n\n    LazyPixelRef: \"LazyPixelRef\",\n    LayerTreeHostImplSnapshot: \"cc::LayerTreeHostImpl\",\n    PictureSnapshot: \"cc::Picture\",\n    DisplayItemListSnapshot: \"cc::DisplayItemList\",\n    LatencyInfo: \"LatencyInfo\",\n    LatencyInfoFlow: \"LatencyInfo.Flow\",\n    InputLatencyMouseMove: \"InputLatency::MouseMove\",\n    InputLatencyMouseWheel: \"InputLatency::MouseWheel\",\n    ImplSideFling: \"InputHandlerProxy::HandleGestureFling::started\",\n    GCIdleLazySweep: \"ThreadState::performIdleLazySweep\",\n    GCCompleteSweep: \"ThreadState::completeSweep\",\n    GCCollectGarbage: \"BlinkGCMarking\",\n\n    // CpuProfile is a virtual event created on frontend to support\n    // serialization of CPU Profiles within tracing timeline data.\n    CpuProfile: \"CpuProfile\",\n    Profile: \"Profile\"\n}\n</code></pre>\n\n<p>And maybe this stackoverflow question is helpful: <a href=\"http://stackoverflow.com/questions/33769070/chrome-dev-tools-timeline-white-bars\">Chrome Dev Tools: Timeline - White Bars</a></p>\n\n<hr>\n\n<p><strong>Edit:</strong>\nAnd <a href=\"https://cs.chromium.org/chromium/src/third_party/WebKit/Source/devtools/front_end/timeline/TimelineUIUtils.js?dr=C&amp;sq=package:chromium\" rel=\"nofollow\">here</a> you can find the assignment of the record types to a category:</p>\n\n<pre><code>WebInspector.TimelineUIUtils._initEventStyles = function()\n{\n    if (WebInspector.TimelineUIUtils._eventStylesMap)\n        return WebInspector.TimelineUIUtils._eventStylesMap;\n\n    var recordTypes = WebInspector.TimelineModel.RecordType;\n    var categories = WebInspector.TimelineUIUtils.categories();\n\n    var eventStyles = {};\n    eventStyles[recordTypes.Task] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Task\"), categories[\"other\"]);\n    eventStyles[recordTypes.Program] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Other\"), categories[\"other\"]);\n    eventStyles[recordTypes.Animation] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Animation\"), categories[\"rendering\"]);\n    eventStyles[recordTypes.EventDispatch] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Event\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.RequestMainThreadFrame] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Request Main Thread Frame\"), categories[\"rendering\"], true);\n    eventStyles[recordTypes.BeginFrame] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Frame Start\"), categories[\"rendering\"], true);\n    eventStyles[recordTypes.BeginMainThreadFrame] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Frame Start (main thread)\"), categories[\"rendering\"], true);\n    eventStyles[recordTypes.DrawFrame] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Draw Frame\"), categories[\"rendering\"], true);\n    eventStyles[recordTypes.HitTest] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Hit Test\"), categories[\"rendering\"]);\n    eventStyles[recordTypes.ScheduleStyleRecalculation] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Schedule Style Recalculation\"), categories[\"rendering\"], true);\n    eventStyles[recordTypes.RecalculateStyles] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Recalculate Style\"), categories[\"rendering\"]);\n    eventStyles[recordTypes.UpdateLayoutTree] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Recalculate Style\"), categories[\"rendering\"]);\n    eventStyles[recordTypes.InvalidateLayout] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Invalidate Layout\"), categories[\"rendering\"], true);\n    eventStyles[recordTypes.Layout] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Layout\"), categories[\"rendering\"]);\n    eventStyles[recordTypes.PaintSetup] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Paint Setup\"), categories[\"painting\"]);\n    eventStyles[recordTypes.PaintImage] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Paint Image\"), categories[\"painting\"], true);\n    eventStyles[recordTypes.UpdateLayer] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Update Layer\"), categories[\"painting\"], true);\n    eventStyles[recordTypes.UpdateLayerTree] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Update Layer Tree\"), categories[\"rendering\"]);\n    eventStyles[recordTypes.Paint] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Paint\"), categories[\"painting\"]);\n    eventStyles[recordTypes.RasterTask] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Rasterize Paint\"), categories[\"painting\"]);\n    eventStyles[recordTypes.ScrollLayer] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Scroll\"), categories[\"rendering\"]);\n    eventStyles[recordTypes.CompositeLayers] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Composite Layers\"), categories[\"painting\"]);\n    eventStyles[recordTypes.ParseHTML] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Parse HTML\"), categories[\"loading\"]);\n    eventStyles[recordTypes.ParseAuthorStyleSheet] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Parse Stylesheet\"), categories[\"loading\"]);\n    eventStyles[recordTypes.TimerInstall] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Install Timer\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.TimerRemove] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Remove Timer\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.TimerFire] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Timer Fired\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.XHRReadyStateChange] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"XHR Ready State Change\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.XHRLoad] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"XHR Load\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.CompileScript] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Compile Script\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.EvaluateScript] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Evaluate Script\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.ParseScriptOnBackground] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Parse Script\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.MarkLoad] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Load event\"), categories[\"scripting\"], true);\n    eventStyles[recordTypes.MarkDOMContent] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"DOMContentLoaded event\"), categories[\"scripting\"], true);\n    eventStyles[recordTypes.MarkFirstPaint] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"First paint\"), categories[\"painting\"], true);\n    eventStyles[recordTypes.TimeStamp] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Timestamp\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.ConsoleTime] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Console Time\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.UserTiming] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"User Timing\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.ResourceSendRequest] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Send Request\"), categories[\"loading\"]);\n    eventStyles[recordTypes.ResourceReceiveResponse] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Receive Response\"), categories[\"loading\"]);\n    eventStyles[recordTypes.ResourceFinish] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Finish Loading\"), categories[\"loading\"]);\n    eventStyles[recordTypes.ResourceReceivedData] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Receive Data\"), categories[\"loading\"]);\n    eventStyles[recordTypes.RunMicrotasks] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Run Microtasks\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.FunctionCall] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Function Call\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.GCEvent] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"GC Event\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.MajorGC] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Major GC\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.MinorGC] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Minor GC\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.JSFrame] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"JS Frame\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.RequestAnimationFrame] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Request Animation Frame\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.CancelAnimationFrame] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Cancel Animation Frame\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.FireAnimationFrame] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Animation Frame Fired\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.RequestIdleCallback] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Request Idle Callback\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.CancelIdleCallback] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Cancel Idle Callback\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.FireIdleCallback] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Fire Idle Callback\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.WebSocketCreate] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Create WebSocket\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.WebSocketSendHandshakeRequest] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Send WebSocket Handshake\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.WebSocketReceiveHandshakeResponse] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Receive WebSocket Handshake\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.WebSocketDestroy] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Destroy WebSocket\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.EmbedderCallback] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Embedder Callback\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.DecodeImage] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Image Decode\"), categories[\"painting\"]);\n    eventStyles[recordTypes.ResizeImage] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Image Resize\"), categories[\"painting\"]);\n    eventStyles[recordTypes.GPUTask] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"GPU\"), categories[\"gpu\"]);\n    eventStyles[recordTypes.LatencyInfo] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"Input Latency\"), categories[\"scripting\"]);\n\n    eventStyles[recordTypes.GCIdleLazySweep] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"DOM GC\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.GCCompleteSweep] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"DOM GC\"), categories[\"scripting\"]);\n    eventStyles[recordTypes.GCCollectGarbage] = new WebInspector.TimelineRecordStyle(WebInspector.UIString(\"DOM GC\"), categories[\"scripting\"]);\n\n    WebInspector.TimelineUIUtils._eventStylesMap = eventStyles;\n    return eventStyles;\n}\n</code></pre>\n\n<p>The Chrome Timeline shows all record types who are unassigned or are assigned to the <em>Other</em> category as grey bars in the <em>Other</em> category.  </p>\n", "last_activity_date": 1477055371, "answer_id": 40173057, "is_accepted": false, "owner": {"user_id": 4774774, "reputation": 175, "user_type": "registered", "display_name": "Johann", "link": "http://stackoverflow.com/users/4774774/johann", "profile_image": "https://i.stack.imgur.com/SLmYa.png?s=128&g=1"}, "last_edit_date": 1477055371, "question_id": 36460614}