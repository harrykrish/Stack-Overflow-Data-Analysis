{"body": "<p>You don't need to handle the recursion yourself; you can use the overload of <code>Directory.EnumerateFiles()</code> which takes a <code>SearchOption</code> parameter.</p>\n\n<p>Provided that your root starts with a drive letter or <code>\\\\</code>, you can do what you want like this:</p>\n\n<pre><code>string root = @\"D:\\Test\\\";\n\nvar files = Directory.EnumerateFiles(root, \"*\", SearchOption.AllDirectories)\n    .Select(path =&gt; path.Replace(root, \"\"));\n\n// Now files contains all the file names you want, with the root removed.\n\nConsole.WriteLine(string.Join(\"\\n\", files));\n</code></pre>\n\n<p>Note that the file entries are not fetched until you enumerate them. You can put them all in a list like so:</p>\n\n<pre><code>var listOfFiles = files.ToList();\n</code></pre>\n\n<p>Or you can just use <code>foreach</code> to iterate over them without putting them in a list first.</p>\n\n<pre><code>foreach (var file in files)\n{\n    // Do something with file.\n}\n</code></pre>\n", "tags": ["c#", "console-application"], "creation_date": 1454947669, "score": 1, "last_activity_date": 1454947669, "answer_id": 35274066, "is_accepted": true, "owner": {"user_id": 106159, "reputation": 55234, "user_type": "registered", "accept_rate": 93, "display_name": "Matthew Watson", "link": "http://stackoverflow.com/users/106159/matthew-watson", "profile_image": "https://i.stack.imgur.com/Qfp6z.png?s=128&g=1"}, "title": "Generate list of files in directory with relative path", "question_id": 35273630}