{"title": "What does +@ mean as a method in ruby", "tags": ["ruby", "operator-overloading", "unary-operator"], "creation_date": 1476633877, "score": 11, "body": "<p>Ruby contains a few unary operators, including <code>+</code>, <code>-</code>, <code>!</code>, <code>~</code>, <code>&amp;</code> and <code>*</code>. As with other operators you can also redefine these. For <code>~</code> and <code>!</code> you can simply just say <code>def ~</code> and <code>def !</code> as they don't have a binary counterpart (e.g. you cannot say <code>a!b</code>).</p>\n\n<p>However for <code>-</code> and <code>+</code> there is both a unary, and a binary version (e.g. <code>a+b</code> and <code>+a</code> are both valid), so if you want to redefine the unary version you have to use <code>def +@</code> and <code>def -@</code>.</p>\n\n<p>Also note that there is a unary version of <code>*</code> and <code>&amp;</code> as well, but they have special meanings. For <code>*</code> it is tied to splatting the array, and for <code>&amp;</code> it is tied to converting the object to a proc, so if you want to use them you have to redefine <code>to_a</code> and <code>to_proc</code> respectively.</p>\n\n<p>Here is a more complete example showing all kinds of the unary operators:</p>\n\n<pre><code>class SmileyString &lt; String\n  def +@ \n    SmileyString.new(self + \" :)\")\n  end\n\n  def -@ \n    SmileyString.new(self + \" :(\")\n  end\n\n  def ~ \n    SmileyString.new(self + \" :~\")\n  end\n\n  def !\n    SmileyString.new(self + \" :!\")\n  end\n\n  def to_proc\n    Proc.new { |a| SmileyString.new(self + \" \" + a) }\n  end\n\n  def to_a\n    [SmileyString.new(\":(\"), self]\n  end\nend\n\na = SmileyString.new(\"Hello\")\np +a                 # =&gt; \"Hello :)\"\np ~a                 # =&gt; \"Hello :~\"\np *a                 # =&gt; [\":(\", \"Hello\"]    \np !a                 # =&gt; \"Hello :!\"\np +~a                # =&gt; \"Hello :~ :)\"\np *+!-~a             # =&gt; [\":(\", \"Hello :~ :( :! :)\"]\np %w{:) :(}.map &amp;a   # =&gt; [\"Hello :)\", \"Hello :(\"]\n</code></pre>\n\n<p>In your example the Module just simply defines an unary + operator, with a default value of not doing anything with the object (which is a common behaviour for the unary plus, <code>5</code> and <code>+5</code> usually mean the same thing). Mixing in with any class would mean the class immediately gets support for using the unary plus operator, which would do nothing much.</p>\n\n<p>For example:</p>\n\n<pre><code>module M\n  def +@\n    self\n  end\nend\n\np +\"Hello\"     # =&gt; NoMethodError: undefined method `+@' for \"Hello\":String\n\nclass String\n  include M\nend\n\np +\"Hello\"     # =&gt; \"Hello\"\n</code></pre>\n\n<p>Note that in this example you can clearly see from the error message that the <code>+@</code> method is missing from the class</p>\n", "last_activity_date": 1477748434, "answer_id": 40072337, "is_accepted": true, "owner": {"user_id": 120917, "reputation": 6199, "user_type": "registered", "accept_rate": 87, "display_name": "SztupY", "link": "http://stackoverflow.com/users/120917/sztupy", "profile_image": "https://www.gravatar.com/avatar/cfb74e792db321ba120ffa223197f673?s=128&d=identicon&r=PG"}, "last_edit_date": 1477748434, "question_id": 40072250}