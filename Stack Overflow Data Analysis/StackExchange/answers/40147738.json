{"title": "Date Picker clears the selected value from date picker text box if a date is not selected on second click and issue with validation of date", "tags": ["angularjs", "datepicker"], "creation_date": 1476947465, "score": 1, "body": "<p>At a quick glance i noticed ,</p>\n\n<pre><code> link: function (scope, element, attrs, ngModelCtrl) {\n            $(element[0]).datepicker().on(\"change\", function (e) {\n                scope.$apply(function () {\n                    ngModelCtrl.$setViewValue(element.val());\n                });\n            });\n        }\n</code></pre>\n\n<p>Should fire onchange right? What i understand from <strong>Issue 1</strong> is that it fires regardless if there is change or not. Have you thought of trying some checkings at </p>\n\n<pre><code>$(element[0]).datepicker().on(\"change\", function (e) {\n                    scope.$apply(function () {\n                        ngModelCtrl.$setViewValue(element.val());\n                    });\n                });\n</code></pre>\n\n<p>Try </p>\n\n<pre><code>$(element[0]).datepicker().on(\"change\", function (e) {\n                    scope.$apply(function () {\n                        if(element.val()) {\n                          ngModelCtrl.$setViewValue(element.val());\n                       }\n                    });\n                });\n</code></pre>\n\n<p>Just a little check on the element.val() for a try wouldn't harm.</p>\n\n<p>For issue two, I don't think you can compare the date that way.</p>\n\n<pre><code>new Date()\n</code></pre>\n\n<p>returns </p>\n\n<blockquote>\n  <p>Thu Oct 20 2016 14:54:17 GMT+0800 (Malay Peninsula Standard Time)</p>\n</blockquote>\n\n<p>What is your <code>startDateStr</code></p>\n\n<p>Noticed <code>new Date()</code> has some seconds and milliseconds.</p>\n\n<p>If you just want to compare days , month and years that is <code>(DD/MM/yyyy)</code> i suggest you convert your dates before you can compare.</p>\n\n<p>Or compare individually like </p>\n\n<pre><code>startDate.getDate() &lt; new Date().getDate() // To compare a day \n</code></pre>\n\n<p>FOr a better option iw ould suggest <a href=\"http://momentjs.com/\" rel=\"nofollow\">moment</a>. <a href=\"https://github.com/moment/moment\" rel=\"nofollow\">Github</a>.</p>\n\n<pre><code>var startDate = moment(startDateStr, 'MM-DD-YYYY').format('MMMM D');\n\nvar today = moment().format('D MMM, YYYY');\nif (startDate != undefined &amp;&amp; startDate &lt; today) {\n\n}\n</code></pre>\n\n<p><strong>Update</strong></p>\n\n<p>Have you tried moving the checking to </p>\n\n<pre><code> $scope.$watch(\"reservation.reservedFrom\", function (newValue, oldValue) {\n         if(newValue &amp;&amp; newValue !==  oldValue) {\n             $scope.checkErr();\n         }\n\n        });\n\n\n        $scope.$watch(\"reservation.reservedTill\", function (newValue, oldValue) {\n            if(newValue &amp;&amp; newValue !==  oldValue) {\n               $scope.checkErr();\n            }\n\n        });\n</code></pre>\n\n<p>When you use &lt;= or >= to compare two date objects, they are compared via valueOf, which is the same as getTime for Date.</p>\n\n<p>But when you use ==, they are two different objects of the same type, so it returns false.</p>\n\n<p>So in your case ^To compare the two dates. The correct way is</p>\n\n<pre><code> var startDate = moment(startDateStr, 'MM-DD-YYYY').format('MMMM D');\n\n    var today = moment().format('D MMM, YYYY');\n    if (startDate != undefined &amp;&amp; startDate.getTime() &lt; today.getTime()) {\n\n    }\n</code></pre>\n\n<p>These explanation is taken <a href=\"http://stackoverflow.com/questions/7244513/javascript-date-comparisons-dont-equal\">Here</a> . You can check the link for more explanation.</p>\n\n<p>The <code>getTime</code> convert the date into an epoch equivalent which is basically numerical/numbers values which can be comapred. <code>new Date()</code> is an object and so is <code>new Date('10/20/2016')</code> and object A cannot be equal to object b. To understand this more you can try on your browser console.</p>\n\n<pre><code>new Date() === new Date();\n&gt; false\n</code></pre>\n\n<p>but </p>\n\n<pre><code>new Date().getTime() === new Date().getTime()\n&gt;true;\n</code></pre>\n\n<p>The first is false is false because you are comparing two objects. The second is equivalent to comparing to numeric values. Afterall</p>\n\n<pre><code>new Date().getTime()\n&gt;1477011127232\n</code></pre>\n", "last_activity_date": 1477011145, "answer_id": 40147738, "is_accepted": false, "owner": {"user_id": 2270185, "reputation": 1178, "user_type": "registered", "accept_rate": 67, "display_name": "Nuru Salihu", "link": "http://stackoverflow.com/users/2270185/nuru-salihu", "profile_image": "https://www.gravatar.com/avatar/3b15ea1ae8bec574d3506752e7fd4d9d?s=128&d=identicon&r=PG"}, "last_edit_date": 1477011145, "question_id": 40146903}