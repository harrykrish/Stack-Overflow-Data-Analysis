{"body": "<p>My answer for this question is: </p>\n\n<pre><code>import android.app.Activity;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.net.wifi.WifiConfiguration;\nimport android.net.wifi.WifiManager;\nimport android.os.AsyncTask;\nimport android.os.Build;\nimport android.util.Log;\n\npublic class WifiAPController extends Activity {\n    public int a;\n    public int b;\n    public String password;\n    public String APname;\n\n    private static int g;\n    private static int h;\n    private static int i;\n    private static int j;\n    private WifiManager wifiManager;\n    private String logTAG;\n    private int wifiState;\n    private boolean o;\n\n    class wifiControllerTask extends AsyncTask {\n        WifiAPController wifiAPControllerClass;\n        boolean a;\n        boolean b;\n        Context mContext;\n\n        public wifiControllerTask(WifiAPController wifiAPController, boolean arg3, boolean arg4, Context context) {\n            this.wifiAPControllerClass = wifiAPController;\n            this.a = arg3;\n            this.b = arg4;\n            this.mContext = context;\n        }\n\n        protected Void a(Void[] arg3) {\n            try {\n                WifiAPController.wifiToggle(this.wifiAPControllerClass, this.a);\n            } catch (Exception v0) {\n            }\n            return null;\n        }\n\n        public void a() {\n            int sdkCurrentVersion = 21;\n            try {\n                if (this.a) {\n                    if (Build.VERSION.SDK_INT &lt; sdkCurrentVersion) {\n                        return;\n                    }\n\n                    this.wifiAPControllerClass.wifiToggle(this.mContext);\n                    return;\n                }\n\n                if (Build.VERSION.SDK_INT &lt; sdkCurrentVersion) {\n                    return;\n                }\n            } catch (Exception v0) {\n                Log.e(\"noti error\", v0.getMessage());\n            }\n        }\n\n        protected void a(Void arg2) {\n            super.onPostExecute(arg2);\n            try {\n                this.a();\n            } catch (IllegalArgumentException v0) {\n                try {\n                    this.a();\n                } catch (Exception v0_1) {\n                }\n            }\n\n            if (this.b) {\n                this.wifiAPControllerClass.finish();\n            }\n        }\n\n        protected Object doInBackground(Object[] arg2) {\n            return this.a(((Void[]) arg2));\n        }\n\n        protected void onPostExecute(Object arg1) {\n            this.a(((Void) arg1));\n        }\n\n        protected void onPreExecute() {\n            super.onPreExecute();\n        }\n    }\n\n\n    static {\n        WifiAPController.g = 0;\n        WifiAPController.h = 0;\n        WifiAPController.i = 1;\n        WifiAPController.j = 4;\n    }\n\n    public WifiAPController() {\n        super();\n        this.a = 2;\n        this.b = 3;\n        this.logTAG = \"WifiAP\";\n        this.wifiState = -1;\n        this.o = false;\n    }\n\n    static int wifiToggle(WifiAPController wifiAPController, boolean wifiToggleFlag) {\n        return wifiAPController.wifiToggle(wifiToggleFlag);\n    }\n\n    private void initWifiAPConfig(WifiConfiguration wifiConfiguration){\n        wifiConfiguration.SSID = \"SomeName\";\n        wifiConfiguration.preSharedKey = \"SomeKey1\";\n        wifiConfiguration.hiddenSSID = false;\n        wifiConfiguration.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.OPEN);\n        wifiConfiguration.allowedProtocols.set(WifiConfiguration.Protocol.RSN);\n        wifiConfiguration.allowedKeyManagement.set(4);\n        wifiConfiguration.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);\n        wifiConfiguration.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);\n    }\n\n    private int wifiToggle(boolean wifiToggleFlag) {\n        int wifiState;\n        String stateString;\n        StringBuilder message;\n        long sleepTimeout = 500;\n        int maxAttemptCount = 10;\n        int errorState = -1;\n        Log.d(this.logTAG, \"*** setWifiApEnabled CALLED **** \" + wifiToggleFlag);\n        WifiConfiguration wifiConfiguration = new WifiConfiguration();\n        initWifiAPConfig(wifiConfiguration);\n        if ((wifiToggleFlag) &amp;&amp; this.wifiState == errorState) {\n            this.wifiState = this.wifiManager.getWifiState();\n        }\n\n        if (!(!wifiToggleFlag || this.wifiManager.getConnectionInfo() == null)) {\n            Log.d(this.logTAG, \"disable wifi: calling\");\n            this.wifiManager.setWifiEnabled(false);\n            int attemptCount = maxAttemptCount;\n            while (attemptCount &gt; 0) {\n                if (this.wifiManager.getWifiState() == 1) {\n                    break;\n                }\n\n                Log.d(this.logTAG, \"disable wifi: waiting, pass: \" + (10 - attemptCount));\n                try {\n                    Thread.sleep(sleepTimeout);\n                    --attemptCount;\n                } catch (Exception v4_1) {\n                }\n            }\n\n            Log.d(this.logTAG, \"disable wifi: done, pass: \" + (10 - attemptCount));\n        }\n\n        try {\n            message = new StringBuilder();\n            stateString = wifiToggleFlag ? \"enabling\" : \"disabling\";\n            Log.d(this.logTAG, message.append(stateString).append(\" wifi ap: calling\").toString());\n            Log.d(this.logTAG, this.APname);\n            Log.d(this.logTAG, this.password);\n            Log.d(this.logTAG, \"\" + this.wifiManager.getClass().getMethod(\"setWifiApEnabled\", WifiConfiguration.class, boolean.class).invoke(this.wifiManager, wifiConfiguration, true).toString());\n            int res = this.wifiManager.addNetwork(wifiConfiguration);\n            Log.d(this.logTAG, \"\" + res);\n            wifiState = (int) this.wifiManager.getClass().getMethod(\"getWifiApState\").invoke(this.wifiManager);\n            Log.d(this.logTAG, \"\" + wifiState);\n        } catch (Exception v0_1) {\n            Log.e(\"wifi\", v0_1.getMessage());\n            wifiState = errorState;\n        }\n\n        while (maxAttemptCount &gt; 0) {\n            if (this.wifiToggle() != WifiAPController.h &amp;&amp; this.wifiToggle() != this.b &amp;&amp; this.wifiToggle() != WifiAPController.j) {\n                break;\n            }\n            message = new StringBuilder();\n            stateString = wifiToggleFlag ? \"enabling\" : \"disabling\";\n            Log.d(this.logTAG, message.append(stateString).append(\" wifi ap: waiting, pass: \").append(10 - maxAttemptCount).toString());\n            sleepTimeout = 500;\n            try {\n                Thread.sleep(sleepTimeout);\n                --maxAttemptCount;\n            } catch (Exception v0_1) {\n            }\n        }\n        message = new StringBuilder();\n        stateString = wifiToggleFlag ? \"enabling\" : \"disabling\";\n        Log.d(this.logTAG, message.append(stateString).append(\" wifi ap: done, pass: \").append(10 - maxAttemptCount).toString());\n\n        if (!wifiToggleFlag) {\n            if ((this.wifiState &gt;= WifiManager.WIFI_STATE_ENABLING &amp;&amp; this.wifiState &lt;= WifiManager.WIFI_STATE_UNKNOWN) || (this.o)) {\n                Log.d(this.logTAG, \"enable wifi: calling\");\n                this.wifiManager.setWifiEnabled(true);\n            }\n\n            this.wifiState = errorState;\n            return wifiState;\n        }\n        return wifiState;\n    }\n\n    public int wifiToggle() {\n        int result;\n        int v4 = 10;\n        try {\n            result = (int) this.wifiManager.getClass().getMethod(\"getWifiApState\").invoke(this.wifiManager);\n        } catch (Exception v0) {\n            result = -1;\n        }\n\n        if (result &gt;= v4) {\n            WifiAPController.g = v4;\n        }\n\n        WifiAPController.h = WifiAPController.g;\n        WifiAPController.i = WifiAPController.g + 1;\n        this.a = WifiAPController.g + 2;\n        this.b = WifiAPController.g + 3;\n        WifiAPController.j = WifiAPController.g + 4;\n        return result;\n    }\n\n    public void wifiToggle(Context context) {\n        Intent v0 = new Intent(context, MainActivity.class);\n    }\n\n    public void wifiToggle(String apname, String pass, WifiManager wifiManager, Context context) {\n        boolean v2 = true;\n        if (this.wifiManager == null) {\n            this.wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);\n        }\n\n        this.APname = apname;\n        this.password = pass;\n        int v0 = this.wifiToggle() == this.b || this.wifiToggle() == this.a ? 1 : 0;\n        if (v0 != 0) {\n            v2 = false;\n        }\n\n        new wifiControllerTask(this, v2, false, context).execute(new Void[0]);\n    }\n}\n</code></pre>\n\n<p>Also, in main Activity you should call like this:</p>\n\n<pre><code>    WifiAPController wifiAPController  = new WifiAPController();\n    wifiAPController.wifiToggle(\"mHotspot\", \"12345678\", wifiManager, context);\n</code></pre>\n\n<p>Don't forget about permissions:</p>\n\n<pre><code>&lt;uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" /&gt;\n&lt;uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\" /&gt;\n&lt;uses-permission android:name=\"android.permission.WRITE_SETTINGS\" /&gt;\n&lt;uses-permission android:name=\"android.permission.CHANGE_NETWORK_STATE\" /&gt;\n&lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n&lt;uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /&gt;\n</code></pre>\n\n<p>I tasted it on Nexus 6 with Marshmallow (6.0)</p>\n", "tags": ["android", "wifi", "android-wifi", "android-6.0-marshmallow", "personal-hotspot"], "creation_date": 1455998820, "score": 0, "last_activity_date": 1455998820, "answer_id": 35528390, "is_accepted": true, "owner": {"user_id": 5805982, "reputation": 51, "user_type": "registered", "display_name": "Lex Hobbit", "link": "http://stackoverflow.com/users/5805982/lex-hobbit", "profile_image": "https://i.stack.imgur.com/OFm2J.jpg?s=128&g=1"}, "title": "Android: Turn On/Off WiFi Hotspot Programmatically on Android Marshmallow (6.0)", "question_id": 35292051}