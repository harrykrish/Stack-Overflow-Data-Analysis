{"title": "What do spaCy&#39;s part-of-speech and dependency tags mean?", "tags": ["python", "nlp", "spacy"], "creation_date": 1477581272, "score": 3, "body": "<h3>Part of speech tokens</h3>\n\n<p>The spaCy docs currently claim:</p>\n\n<blockquote>\n  <p>The part-of-speech tagger uses the OntoNotes 5 version of the Penn Treebank tag set. We also map the tags to the simpler Google Universal POS Tag set.</p>\n</blockquote>\n\n<p>More precisely, the <code>.tag_</code> property exposes Treebank tags, and the <code>pos_</code> property exposes tags based upon the <a href=\"http://universaldependencies.org/\" rel=\"nofollow\">Google Universal POS Tags</a> (although spaCy extends the list).</p>\n\n<p>spaCy's docs seem to recommend that users who just want to dumbly use its results, rather than training their own models, should ignore the <code>tag_</code> attribute and use only the <code>pos_</code> one, <a href=\"https://spacy.io/docs/#token-postags\" rel=\"nofollow\">stating that the <code>tag_</code> attributes...</a></p>\n\n<blockquote>\n  <p>are primarily designed to be good features for subsequent models, particularly the syntactic parser. They are language and treebank dependent.</p>\n</blockquote>\n\n<p>That is to say, if spaCy releases an improved model trained on a new <a href=\"https://en.wikipedia.org/wiki/Treebank\" rel=\"nofollow\">treebank</a>, the <code>tag_</code> attribute may have different values to that which it had before. This clearly makes it unhelpful for users who want a consistent API across version upgrades. However, since the current tags are a variant of Penn Treebank, they are likely to mostly intersect with the set described in any Penn Treebank POS tag documentation, like this: <a href=\"http://web.mit.edu/6.863/www/PennTreebankTags.html\" rel=\"nofollow\">http://web.mit.edu/6.863/www/PennTreebankTags.html</a></p>\n\n<p>The more useful <code>pos_</code> tags are</p>\n\n<blockquote>\n  <p>A coarse-grained, less detailed tag that represents the word-class of the token</p>\n</blockquote>\n\n<p>based upon the Google Universal POS Tag set. For English, a list of the tags in the Universal POS Tag set can be found here, complete with links to their definitions: <a href=\"http://universaldependencies.org/en/pos/index.html\" rel=\"nofollow\">http://universaldependencies.org/en/pos/index.html</a></p>\n\n<p>The list is as follows:</p>\n\n<ul>\n  <li><a href=\"http://universaldependencies.org/u/pos/ADJ.html\" rel=\"nofollow\"><code>ADJ</code></a>: adjective</li>\n  <li><a href=\"http://universaldependencies.org/u/pos/ADP.html\" rel=\"nofollow\"><code>ADP</code></a>: adposition</li>\n  <li><a href=\"http://universaldependencies.org/u/pos/ADV.html\" rel=\"nofollow\"><code>ADV</code></a>: adverb</li>\n  <li><a href=\"http://universaldependencies.org/u/pos/AUX_.html\" rel=\"nofollow\"><code>AUX</code></a>: auxiliary verb</li>\n  <li><a href=\"http://universaldependencies.org/u/pos/CONJ.html\" rel=\"nofollow\"><code>CONJ</code></a>: coordinating conjunction</li>\n  <li><a href=\"http://universaldependencies.org/u/pos/DET.html\" rel=\"nofollow\"><code>DET</code></a>: determiner</li>\n  <li><a href=\"http://universaldependencies.org/u/pos/INTJ.html\" rel=\"nofollow\"><code>INTJ</code></a>: interjection</li>\n  <li><a href=\"http://universaldependencies.org/u/pos/NOUN.html\" rel=\"nofollow\"><code>NOUN</code></a>: noun</li>\n  <li><a href=\"http://universaldependencies.org/u/pos/NUM.html\" rel=\"nofollow\"><code>NUM</code></a>: numeral</li>\n  <li><a href=\"http://universaldependencies.org/u/pos/PART.html\" rel=\"nofollow\"><code>PART</code></a>: particle</li>\n  <li><a href=\"http://universaldependencies.org/u/pos/PRON.html\" rel=\"nofollow\"><code>PRON</code></a>: pronoun</li>\n  <li><a href=\"http://universaldependencies.org/u/pos/PROPN.html\" rel=\"nofollow\"><code>PROPN</code></a>: proper noun</li>\n  <li><a href=\"http://universaldependencies.org/u/pos/PUNCT.html\" rel=\"nofollow\"><code>PUNCT</code></a>: punctuation</li>\n  <li><a href=\"http://universaldependencies.org/u/pos/SCONJ.html\" rel=\"nofollow\"><code>SCONJ</code></a>: subordinating conjunction</li>\n  <li><a href=\"http://universaldependencies.org/u/pos/SYM.html\" rel=\"nofollow\"><code>SYM</code></a>: symbol</li>\n  <li><a href=\"http://universaldependencies.org/u/pos/VERB.html\" rel=\"nofollow\"><code>VERB</code></a>: verb</li>\n  <li><a href=\"http://universaldependencies.org/u/pos/X.html\" rel=\"nofollow\"><code>X</code></a>: other</li>\n</ul>\n\n<p>However, we can see from spaCy's <a href=\"https://github.com/explosion/spaCy/blob/master/spacy/parts_of_speech.pyx\" rel=\"nofollow\">parts of speech</a> module that it extends this schema with three additional POS constants, <code>EOL</code>, <code>NO_TAG</code> and <code>SPACE</code>, that are not part of the Universal POS Tag set. Of these:</p>\n\n<ul>\n<li>From <a href=\"https://github.com/explosion/spaCy/search?utf8=%E2%9C%93&amp;q=eol\" rel=\"nofollow\">searching the source code</a>, I don't think <code>EOL</code> gets used at all, although I'm not sure</li>\n<li><p><code>NO_TAG</code> is an error code. If you try parsing a sentence with a model you don't have installed, all <code>Token</code>s get assigned this POS. For instance, I don't have spaCy's German model installed, and I see this on my local if I try to use it:</p>\n\n<pre><code>&gt;&gt;&gt; import spacy\n&gt;&gt;&gt; de_nlp = spacy.load('de')\n&gt;&gt;&gt; document = de_nlp('Ich habe meine Lederhosen verloren')\n&gt;&gt;&gt; document[0]\nIch\n&gt;&gt;&gt; document[0].pos_\n''\n&gt;&gt;&gt; document[0].pos\n0\n&gt;&gt;&gt; document[0].pos == spacy.parts_of_speech.NO_TAG\nTrue\n&gt;&gt;&gt; document[1].pos == spacy.parts_of_speech.NO_TAG\nTrue\n&gt;&gt;&gt; document[2].pos == spacy.parts_of_speech.NO_TAG\nTrue\n</code></pre></li>\n<li><p><code>SPACE</code> is used for any spacing besides single normal ASCII spaces (which don't get their own token):</p>\n\n<pre><code>&gt;&gt;&gt; document = en_nlp(\"This\\nsentence\\thas      some weird spaces in\\n\\n\\n\\n\\t\\t   it.\")\n&gt;&gt;&gt; for token in document:\n...   print('%r (%s)' % (str(token), token.pos_))\n... \n'This' (DET)\n'\\n' (SPACE)\n'sentence' (NOUN)\n'\\t' (SPACE)\n'has' (VERB)\n'     ' (SPACE)\n'some' (DET)\n'weird' (ADJ)\n'spaces' (NOUN)\n'in' (ADP)\n'\\n\\n\\n\\n\\t\\t   ' (SPACE)\n'it' (PRON)\n'.' (PUNCT)\n</code></pre></li>\n</ul>\n\n<h3>Dependency tokens</h3>\n\n<p>As noted in the docs, the dependency tag scheme is based upon the ClearNLP project, and some documentation (unfortunately only in PDF form) of the tags can be found at <a href=\"http://www.mathcs.emory.edu/~choi/doc/clear-dependency-2012.pdf\" rel=\"nofollow\">http://www.mathcs.emory.edu/~choi/doc/clear-dependency-2012.pdf</a>. That document lists these tokens:</p>\n\n<ul>\n<li><code>ACOMP</code>: adjectival complement</li>\n<li><code>ADVCL</code>: adverbial clause modifier</li>\n<li><code>ADVMOD</code>: adverbial modifier</li>\n<li><code>AGENT</code>: agent</li>\n<li><code>AMOD</code>: adjectival modifier</li>\n<li><code>APPOS</code>: appositional modifier</li>\n<li><code>ATTR</code>: attribute</li>\n<li><code>AUX</code>: auxiliary</li>\n<li><code>AUXPASS</code>: passive auxiliary</li>\n<li><code>CC</code>: coordinating conjunction</li>\n<li><code>CCOMP</code>: clausal complement</li>\n<li><code>COMPLM</code>: complementizer</li>\n<li><code>CONJ</code>: conjunct</li>\n<li><code>CSUBJ</code>: clausal subject</li>\n<li><code>CSUBJPASS</code>: clausal passive subject</li>\n<li><code>DEP</code>: unclassified dependent</li>\n<li><code>DET</code>: determiner</li>\n<li><code>DOBJ</code>: direct object</li>\n<li><code>EXPL</code>: expletive</li>\n<li><code>HMOD</code>: modifier in hyphenation</li>\n<li><code>HYPH</code>: hyphen</li>\n<li><code>INFMOD</code>: infinitival modifier</li>\n<li><code>INTJ</code>: interjection</li>\n<li><code>IOBJ</code>: indirect object</li>\n<li><code>MARK</code>: maker</li>\n<li><code>META</code>: meta modifier</li>\n<li><code>NEG</code>: negation modifier</li>\n<li><code>NMOD</code>: modifier of nominal</li>\n<li><code>NN</code>: noun compound modifier</li>\n<li><code>NPADVMOD</code>: noun phrase as adverbial modifier</li>\n<li><code>NSUBJ</code>: nominal subject</li>\n<li><code>NSUBJPASS</code>: nominal passive subject</li>\n<li><code>NUM</code>: numeric modifier</li>\n<li><code>NUMBER</code>: number compound modifier</li>\n<li><code>OPRD</code>: object predicate</li>\n<li><code>PARATAXIS</code>: parenthetical modifier</li>\n<li><code>PARTMOD</code>: participial modifier</li>\n<li><code>PCOMP</code>: complement of a preposition</li>\n<li><code>POBJ</code>: object of a preposition</li>\n<li><code>POSS</code>: possession modifier</li>\n<li><code>POSSESSIVE</code>: possessive modifier</li>\n<li><code>PRECONJ</code>: pre-correlative conjunction</li>\n<li><code>PREDET</code>: predeterminer</li>\n<li><code>PREP</code>: prepositional modifier</li>\n<li><code>PRT</code>: particle</li>\n<li><code>PUNCT</code>: punctuation</li>\n<li><code>QUANTMOD</code>: quantifier phrase modifier</li>\n<li><code>RCMOD</code>: relative clause modifier</li>\n<li><code>ROOT</code>: root</li>\n<li><code>XCOMP</code>: open clausal complement</li>\n</ul>\n\n<p>and also contains the actual linguistic definitions of these terms, complete with examples. However, as with part of speech tokens, spaCy doesn't quite adhere to the scheme it claims to adhere to. Looking in its <a href=\"https://github.com/explosion/spaCy/blob/master/spacy/symbols.pyx\" rel=\"nofollow\">symbols file</a>, we can see that it defines a constant for each of the tokens above except <code>PREDET</code>, which spaCy <a href=\"https://github.com/explosion/spaCy/search?utf8=%E2%9C%93&amp;q=PREDET\" rel=\"nofollow\">doesn't use for some reason</a>. Additionally, as noted in <a href=\"https://github.com/explosion/spaCy/issues/233\" rel=\"nofollow\">https://github.com/explosion/spaCy/issues/233</a>, there are several dependency tokens that spaCy can emit that are neither included in the symbols file nor in the 2012 CLEAR documentation. These include <code>acl</code>, <code>case</code>, <code>compound</code>, <code>dative</code>, <code>nummod</code>, and <code>relcl</code>.</p>\n\n<p>Fortunately, we can find at least brief descriptions of what these undocumented dependencies mean in code comments on the <a href=\"https://github.com/emorynlp/nlp4j/blob/master/api/src/main/java/edu/emory/mathcs/nlp/common/treebank/DEPTagEn.java\" rel=\"nofollow\"><code>DEPTagEn</code></a> interface inside the nlp4j (previously called ClearNLP) project, which spaCy uses to train its parser. For instance, the meanings of the tokens above:</p>\n\n<ul>\n<li><code>acl</code> - <em>finite and non-finite clausal modifier.</em></li>\n<li><code>case</code> - <em>case marker</em></li>\n<li><code>compound</code> - <em>compound nouns/numbers</em></li>\n<li><code>dative</code> - <em>dative</em></li>\n<li><code>nummod</code> - <em>numeric modifiers</em></li>\n<li><code>relcl</code> - <em>relative clause modifiers</em></li>\n</ul>\n\n<p>These admittedly aren't great descriptions, but at least they're something! The spaCy team is <a href=\"https://github.com/explosion/spaCy/issues/555\" rel=\"nofollow\">aware of the deficiencies of the documentation</a> and working to fix it, so hopefully in a while we'll have better documentation all in one place.</p>\n", "last_activity_date": 1477742526, "answer_id": 40288324, "is_accepted": false, "owner": {"user_id": 1709587, "reputation": 24447, "user_type": "registered", "accept_rate": 66, "display_name": "Mark Amery", "link": "http://stackoverflow.com/users/1709587/mark-amery", "profile_image": "https://i.stack.imgur.com/frBtD.jpg?s=128&g=1"}, "last_edit_date": 1477742526, "question_id": 40288323}