{"title": "How to fix Unhandled exception: java.sql.SQLException for throw sqle", "tags": ["java", "database", "sqlite", "android-studio"], "creation_date": 1476951682, "score": 1, "body": "<p>Exceptions come in two types Handled and Runtime.</p>\n\n<p>Handled exceptions Must be caught(Try Catch) or thrown (throws)</p>\n\n<p>Example <strong>SQLException</strong>, <strong>IOExeption</strong></p>\n\n<p>Runtime Exceptions can be caught but they do not need to be declared as thrown.</p>\n\n<p>example: <strong>OutOfMemoryException</strong>,  <strong>IndexOutOfBoundsException</strong>.</p>\n\n<p>SQLException is a Handled Exception so as the other answer declared you either have to surround your call in a try catch block to handle the exception or declare </p>\n\n<pre><code>public void onClick(View v) throws SqlException {\n</code></pre>\n\n<p>In your case, you are catching it then rethrowing it, this means that the method has to declare it as thrown which sort of defeats the object of the try catch, usually unless you need to throw it up, you should log the error then silently continue, in your case you are declaring throw e; which is just literally throwing the problem up a level, and to do that you need to as previously mentioned - declare that the method throws it The throw new Error() is a runtime exception so it does not need to be declared, So if you don't want to have to declare it thrown you could try something like </p>\n\n<pre><code>throw new Error(sqle.getMessage());\n</code></pre>\n", "last_activity_date": 1476951982, "answer_id": 40149099, "is_accepted": true, "owner": {"user_id": 621567, "reputation": 1189, "user_type": "registered", "accept_rate": 83, "display_name": "Theresa Forster", "link": "http://stackoverflow.com/users/621567/theresa-forster", "profile_image": "https://i.stack.imgur.com/vr3H9.jpg?s=128&g=1"}, "last_edit_date": 1476951982, "question_id": 40148801}