{"title": "How to synchronise then() inside for loop", "tags": ["javascript"], "creation_date": 1476704415, "score": 0, "body": "<p>First of all. Variables declared with <code>var</code> in JavaScript are function-scoped and not block scoped which means (because the callback is asynchronous) that <code>j</code> will be 3 in all callback executions. You can get around that fact by declaring the variable <code>j</code> with <code>let</code> which instead block scopes it.</p>\n\n<pre><code>for (let j = 0; ...\n</code></pre>\n\n<p>Second. Is it important that the callbacks are run in series? In that case you will have to refactor your code considerably. Maybe making the call recursive and chain the next call of the loop to the callback of the first.</p>\n\n<p>If not, but it is still important that you can act when all callbacks are completed, you can store the deferreds in a list and pass them to <code>Promise.all(yourDeferredList)</code> which will callback when all are completed.</p>\n", "last_activity_date": 1476705034, "answer_id": 40085453, "is_accepted": false, "owner": {"user_id": 3637106, "reputation": 445, "user_type": "registered", "accept_rate": 60, "display_name": "Hampus", "link": "http://stackoverflow.com/users/3637106/hampus", "profile_image": "https://www.gravatar.com/avatar/03e08051f2048091379fee4cda57a1d8?s=128&d=identicon&r=PG&f=1"}, "last_edit_date": 1476705034, "question_id": 40085303}