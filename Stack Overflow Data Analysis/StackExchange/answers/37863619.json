{"title": "why use both os.path.abspath and os.path.realpath", "tags": ["python"], "creation_date": 1466091372, "score": 5, "body": "<p><code>os.path.realpath</code> derefences symbolic links on those operating systems which support them.</p>\n\n<p><code>os.path.abspath</code> simply removes things like '~' (Home directory), '.' and '..' from the path giving a full path from the root of the directory tree to the named file (or symlink)</p>\n\n<p>For example, on Ubuntu</p>\n\n<pre><code>$ ls -l\ntotal 0\n-rw-rw-r-- 1 guest guest 0 Jun 16 08:36 a\nlrwxrwxrwx 1 guest guest 1 Jun 16 08:36 b -&gt; a\n$ python\nPython 2.7.11 (default, Dec 15 2015, 16:46:19) \n[GCC 4.8.4] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; from os.path import abspath,realpath\n&gt;&gt;&gt; abspath('b')\n'/home/guest/play/paths/b'\n&gt;&gt;&gt; realpath('b')\n'/home/guest/play/paths/a'\n&gt;&gt;&gt; \n</code></pre>\n\n<p>Symlinks can contain relative paths, hence the need to use both. The inner call to <code>realpath</code> might return a path with embedded \"..\" parts, which <code>abspath</code> then removes.</p>\n", "last_activity_date": 1466091681, "answer_id": 37863619, "is_accepted": true, "owner": {"user_id": 943010, "reputation": 4828, "user_type": "registered", "display_name": "kdopen", "link": "http://stackoverflow.com/users/943010/kdopen", "profile_image": "https://i.stack.imgur.com/R7Q27.png?s=128&g=1"}, "last_edit_date": 1466091681, "question_id": 37863476}