{"body": "<p>As suggested by @DecentDabbler, using a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\" rel=\"nofollow\"><code>WeakSet</code></a> allowed me to ensure I never try to wrap a proxy in another proxy:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>const proxiedObjs = new WeakSet();\n\n...\n\nfunction createProxiedObject(objToProxy) {\n  // Recursively ensure object is deeply proxied\n  for (let x in objToProxy) {\n    subObj = objToProxy[x];\n    if (subObj !== null &amp;&amp; typeof subObj === 'object' &amp;&amp; !proxiedObjs.has(subObj)) {\n      objToProxy[x] = createProxiedObject(subObj);\n    }\n  }\n\n  let proxied = new Proxy(objToProxy, {\n    set: function (target, key, value) {\n      //This check is also new - if nothing actually changes\n      //I'd rather not call handleProxiedObjectChange\n      if (_.isEqual(target[key.toString()], value)) {\n        return true;\n      }\n\n      //proxy nested objects\n      if (value !== null &amp;&amp; typeof value === 'object' &amp;&amp; !proxiedObjs.has(value)) {\n        value = createProxiedObject(value);\n      }\n      target[key.toString()] = value;\n\n      handleProxiedObjectChange();\n  });\n  proxiedObjs.add(proxied);\n  return proxied;\n</code></pre>\n", "tags": ["javascript", "typescript"], "creation_date": 1476996266, "score": 1, "last_activity_date": 1476996266, "answer_id": 40164194, "is_accepted": true, "owner": {"user_id": 2216621, "reputation": 4673, "user_type": "registered", "accept_rate": 59, "display_name": "Rob Watts", "link": "http://stackoverflow.com/users/2216621/rob-watts", "profile_image": "https://www.gravatar.com/avatar/10c8cf1cdc1383558bd4b78a19d1b524?s=128&d=identicon&r=PG&f=1"}, "title": "How do I correctly manage multi-level proxying of objects", "question_id": 40142822}