{"title": "Is there a way to easily handle functions returning std::pairs?", "tags": ["c++", "c++11", "tuples", "std-pair", "minmax"], "creation_date": 1477568189, "score": 11, "body": "<p>This looks like enough of a common case to prompt a helper function:</p>\n\n<pre><code>template &lt;class T, std::size_t...Idx&gt;\nauto deref_impl(T &amp;&amp;tuple, std::index_sequence&lt;Idx...&gt;) {\n    return std::tuple&lt;decltype(*std::get&lt;Idx&gt;(std::forward&lt;T&gt;(tuple)))...&gt;(*std::get&lt;Idx&gt;(std::forward&lt;T&gt;(tuple))...);\n}\n\ntemplate &lt;class T&gt;\nauto deref(T &amp;&amp;tuple)\n    -&gt; decltype(deref_impl(std::forward&lt;T&gt;(tuple), std::make_index_sequence&lt;std::tuple_size&lt;std::remove_reference_t&lt;T&gt;&gt;::value&gt;{})) {\n    return deref_impl(std::forward&lt;T&gt;(tuple), std::make_index_sequence&lt;std::tuple_size&lt;std::remove_reference_t&lt;T&gt;&gt;::value&gt;{});\n}\n\n// ...\n\nint lhsMin;\nint lhsMax;\nstd::tie(lhsMin,lhsMax) = deref(std::minmax_element(lhs.begin(), lhs.end()));\n</code></pre>\n\n<p><code>index_sequence</code> is C++14, but a full implementation <a href=\"http://stackoverflow.com/a/17426611/3233393\">can be made in C++11</a>.</p>\n\n<p>Note: I'd keep the repeated <code>decltype</code> in <code>deref</code>'s return type even in C++14, so that SFINAE can apply.</p>\n\n<p><a href=\"http://coliru.stacked-crooked.com/a/f58f889d68415aa2\" rel=\"nofollow\">See it live on Coliru</a></p>\n", "last_activity_date": 1477736811, "answer_id": 40283652, "is_accepted": true, "owner": {"user_id": 3233393, "reputation": 21447, "user_type": "registered", "accept_rate": 80, "display_name": "Quentin", "link": "http://stackoverflow.com/users/3233393/quentin", "profile_image": "https://i.stack.imgur.com/BA5dl.gif?s=128&g=1"}, "last_edit_date": 1477736811, "question_id": 40283198}