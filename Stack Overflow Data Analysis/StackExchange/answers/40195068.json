{"title": "Find String Between To Identical Control Separators?", "tags": ["c#", "regex", "special-characters"], "creation_date": 1477157661, "score": 0, "body": "<p><code>RS</code> stands for Record Separator, and it has a value of 30 (or 0x1E in hexadecimal). You can use this regular expression:</p>\n\n<pre><code>\\x1E([\\w\\s]*?)\\x1E\n</code></pre>\n\n<p>That matches the RS, then matches any letter, number or space, and then again the RS. The <code>?</code> is to make the regex match as less characters as possible, in case there are more RS characters afterwards.</p>\n\n<p>If you prefer not to match numbers, you could use <code>[a-zA-Z\\s]</code> instead of <code>[\\w\\s]</code>.</p>\n\n<p>Example:</p>\n\n<pre><code>string fileContents = \"Something \\u001Eyour string\\u001E more things \\u001Eanother text\\u001E end.\";\nMatchCollection matches = Regex.Matches(fileContents, @\"\\x1E([\\w\\s]*?)\\x1E\");\n\nif (matches.Count == 0)\n    return; // Not found, display an error message and exit.\n\nforeach (Match match in matches)\n{\n    if (match.Groups.Count &gt; 1)\n        Console.WriteLine(match.Groups[1].Value);\n}\n</code></pre>\n\n<p>As you can see, you get a collection of <code>Match</code>, and each <code>match.Value</code> will have the whole matched string including the separators. <code>match.Groups</code> will have all matched groups, being the first one again the whole matched string (that's by default) and then each of your groups (those between parenthesis). In this case, you only have one in your regex, so you just need the second one on that list.</p>\n", "last_activity_date": 1477715657, "answer_id": 40195068, "is_accepted": true, "owner": {"user_id": 2321042, "reputation": 3243, "user_type": "registered", "display_name": "Andrew", "link": "http://stackoverflow.com/users/2321042/andrew", "profile_image": "https://www.gravatar.com/avatar/1ea2250b729654f9c6a61d9b1c43e545?s=128&d=identicon&r=PG&f=1"}, "last_edit_date": 1477715657, "question_id": 40194832}