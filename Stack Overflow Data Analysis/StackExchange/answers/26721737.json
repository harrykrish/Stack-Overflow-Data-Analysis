{"title": "How to set up JAX-RS Application using annotations only (no web.xml)?", "tags": ["java-ee", "jax-rs", "servlet-3.0"], "creation_date": 1415043494, "score": 100, "body": "<p><strong>** PLEASE READ IF YOU USE TOMCAT OR JETTY! **</strong></p>\n\n<p>The accepted answer <strong>does</strong> work, but only if the webapp is deployed to an app server like Glassfish or Wildfly, and possibly servlet containers with EE extensions like TomEE. It <strong>doesn't</strong> work on standard servlet containers like Tomcat, which I'm sure most people looking for a solution here want to use.</p>\n\n<p>If you're using a standard Tomcat install (or some other servlet container), you need to include a REST implementation since Tomcat doesn't come with one. If you're using Maven, add this to the <code>dependencies</code> section:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;dependencies&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.glassfish.jersey.bundles&lt;/groupId&gt;\n    &lt;artifactId&gt;jaxrs-ri&lt;/artifactId&gt;\n    &lt;version&gt;2.13&lt;/version&gt;\n  &lt;/dependency&gt;\n  ...\n&lt;/dependencies&gt;\n</code></pre>\n\n<p>Then just add an application config class to your project. If you don't have any special configuration needs aside from setting the context path for the rest services, the class can be empty. Once this class is added, you don't need to configure anything in <code>web.xml</code> (or have one at all):</p>\n\n<pre><code>package com.domain.mypackage;\nimport javax.ws.rs.ApplicationPath;\nimport javax.ws.rs.core.Application;\n\n@ApplicationPath(\"rest\") // set the path to REST web services\npublic class ApplicationConfig extends Application {}\n</code></pre>\n\n<p>After this, declaring your web services is straight forward using the standard JAX-RS annotations in your Java classes:</p>\n\n<pre><code>package com.domain.mypackage;\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.MatrixParam;\nimport javax.ws.rs.Path;\n\n// It's good practice to include a version number in the path so you can have\n// multiple versions deployed at once. That way consumers don't need to upgrade\n// right away if things are working for them.\n@Path(\"calc/1.0\")\npublic class CalculatorV1_0 {\n  @GET\n  @Consumes(\"text/plain\")\n  @Produces(\"text/plain\")\n  @Path(\"addTwoNumbers\")\n  public String add(@MatrixParam(\"firstNumber\") int n1, @MatrixParam(\"secondNumber\") int n2) {\n    return String.valueOf(n1 + n2);\n  }\n}\n</code></pre>\n\n<p>This should be all you need. If your Tomcat install is running locally on port 8080 and you deploy your WAR file to the context <code>myContext</code>, going to...</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>http://localhost:8080/myContext/rest/calc/1.0/addTwoNumbers;firstNumber=2;secondNumber=3\n</code></pre>\n\n<p>...should produce the expected result (5).</p>\n", "last_activity_date": 1476109427, "answer_id": 26721737, "is_accepted": false, "owner": {"user_id": 1655398, "reputation": 3659, "user_type": "registered", "display_name": "Alvin Thompson", "link": "http://stackoverflow.com/users/1655398/alvin-thompson", "profile_image": "https://www.gravatar.com/avatar/1fc81e84a1dd994625261a11b1486c27?s=128&d=identicon&r=PG"}, "last_edit_date": 1476109427, "question_id": 9373081}