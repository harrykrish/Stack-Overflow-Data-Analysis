{"title": "Delete commits from a branch in Git", "tags": ["git", "git-rebase"], "creation_date": 1251345064, "score": 465, "body": "<p>If you have not yet pushed the commit anywhere, you can use <a href=\"http://git-scm.com/docs/git-rebase\" rel=\"nofollow\"><code>git rebase -i</code></a> to remove that commit. First, find out how far back that commit is (approximately). Then do:</p>\n\n<pre><code>git rebase -i HEAD~N\n</code></pre>\n\n<p>The <code>~N</code> means rebase the last <code>N</code> commits (<code>N</code> must be a number, for example <code>HEAD~10</code>). Then, you can edit the file that Git presents to you to delete the offending commit. On saving that file, Git will then rewrite all the following commits as if the one you deleted didn't exist.</p>\n\n<p>The Git Book has a good <a href=\"http://git-scm.com/book/en/Git-Branching-Rebasing\" rel=\"nofollow\">section on rebasing</a> with pictures and examples.</p>\n\n<p>Be careful with this though, because if you change something that you <em>have</em> pushed elsewhere, another approach will be needed unless you are planning to do a force push.</p>\n", "last_activity_date": 1477011067, "answer_id": 1338758, "is_accepted": false, "owner": {"user_id": 893, "reputation": 513558, "user_type": "registered", "accept_rate": 85, "display_name": "Greg Hewgill", "link": "http://stackoverflow.com/users/893/greg-hewgill", "profile_image": "https://www.gravatar.com/avatar/747ffa5da3538e66840ebc0548b8fd58?s=128&d=identicon&r=PG"}, "last_edit_date": 1477011067, "question_id": 1338728}