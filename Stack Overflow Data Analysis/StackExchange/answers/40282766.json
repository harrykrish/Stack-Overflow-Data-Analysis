{"title": "Python Spectrum Analysis", "tags": ["python", "fft"], "creation_date": 1477565583, "score": 2, "body": "<p>The problem here is that you do not handle correctly the sampeling of your signal. In your welsch call, you consider a regularly sampled signal with sample frequency 4Hz. If you look at the time vector <code>t</code></p>\n\n<pre><code>In [1]: dt = t[1:]-t[:-1]\n\nIn [2]: dt.mean(), np.median(dt)\nOut[2]: 0.76693059125964014, 0.75600000000000023\n\nIn [3]: dt.min(), dt.max()\nOut[3]: (0.61599999999998545, 1.0880000000000081)\n</code></pre>\n\n<p>Your signal is thus not regularly sampled. You thus need to take that into acount, else you do not estimate correctly the PSD and this gives you bad estimates. </p>\n\n<p>A first correction should be to use correctly the parameter <code>fs</code> in welsch. This parameter indicates the sampling frequency of the given signal. Putting it ot 4 means that your time vector should be a regular <code>[0, .25, .5, .75, .1, ....]</code>. A better estimate would be either the median of <code>dt</code> or <code>len(t)/(t.max()-t.min())</code>, so around <code>4/3</code>.\nThis gives better PSD estimate and correct order for some of the constant but it is still different compared to Kubios values.</p>\n\n<p>To get correct estimate of the PSD, you should use a <a href=\"https://en.wikipedia.org/wiki/Non-uniform_discrete_Fourier_transform\" rel=\"nofollow\">non uniform DFT</a>.\nA package that implement such transform can be found <a href=\"http://pythonhosted.org/pyNFFT/\" rel=\"nofollow\">here</a>. The documentation is quite cryptic for this package but you need to use the adjoint method to get the Fourier Transform without scaling issue:</p>\n\n<pre><code>N = 128    # Number of frequency you will get\nM = len(t) # Number of irregular samples you have\nplan = NFFT(N, M)\n\n# Give the sample times and precompute variable for \n# the NFFT algorithm.\nplan.x = t\nplan.precompute()\n\n# put your signal in `plan.f` and use the `plan.adjoint`\n# to compute the Fourier transform of your signal\nplan.f = ibi\nFxx = plan.adjoint()\nplt.plot(abs(Fxx))\n</code></pre>\n\n<p>Here the estimates do not seems to be in line with the one from Kubios. It is possible the estimation is probably of because you do a psd estimate on the whole signal. You can try to use the <a href=\"https://en.wikipedia.org/wiki/Welch%27s_method\" rel=\"nofollow\">welch technique</a> combined with this nfft by averaging estimates on windowed signals as it do not rely on FFT but on any estimation of the PSD.</p>\n", "last_activity_date": 1477674704, "answer_id": 40282766, "is_accepted": true, "owner": {"user_id": 2642845, "reputation": 543, "user_type": "registered", "display_name": "Thomas Moreau", "link": "http://stackoverflow.com/users/2642845/thomas-moreau", "profile_image": "https://www.gravatar.com/avatar/1c7c7939d1173cd6f455ce4313e831c5?s=128&d=identicon&r=PG"}, "last_edit_date": 1477674704, "question_id": 40086784}