{"body": "<p>This is a very interesting question. I would try to explain it to you.</p>\n\n<blockquote>\n  <p>A nested class is a member of its enclosing class. Non-static nested\n  classes (inner classes) have access to other members of the enclosing\n  class, even if they are declared private. Static nested classes do not\n  have access to other members of the enclosing class.</p>\n</blockquote>\n\n<p>Basically, a <strong>static nested class interacts with the instance members</strong> of its top-level class, just like any other classes.</p>\n\n<p>So, basically you can and should consider a static nested class as a top-level class which has been nested inside another <strong>top-level class just for packaging convenience.</strong> </p>\n\n<p>So whenever you are using a nested class, <strong>start by making it static</strong>, and then see if you need to access any instance members thereby having an opportunity to make it non-static.</p>\n\n<p>Take the example from JDK,</p>\n\n<pre><code>public class LinkedList&lt;E&gt; ... {\n...\n\n private static class Entry&lt;E&gt; { ... }\n\n}\n</code></pre>\n\n<p>Here, the <code>Entry</code> is a static nested class as it doesn't make any sense for this class to be a top-level class as it is used by the <code>LinkedList</code> class only. And since it doesn't even use any members of the <code>LinkedList</code> class, thus <strong>making is static makes even more sense</strong>.</p>\n", "tags": ["java", "static-classes"], "creation_date": 1471199848, "score": 2, "last_activity_date": 1471199848, "answer_id": 38945396, "is_accepted": true, "owner": {"user_id": 2858654, "reputation": 7774, "user_type": "registered", "accept_rate": 41, "display_name": "Aritra Roy", "link": "http://stackoverflow.com/users/2858654/aritra-roy", "profile_image": "https://www.gravatar.com/avatar/74aa11ff36efcdb0b99dce510af7f517?s=128&d=identicon&r=PG"}, "title": "When is a good idea to decalre nested static class over non static nested class?", "question_id": 38945225}