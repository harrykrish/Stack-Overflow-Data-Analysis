{"title": "Libav (ffmpeg) copying decoded video timestamps to encoder", "tags": ["c++", "ffmpeg", "video-encoding", "libav"], "creation_date": 1477756263, "score": 0, "body": "<p>So, thanks 100% to <a href=\"http://stackoverflow.com/a/40278283/616460\">Andrey Turkin's amazingly clear and helpful answer</a>, I've got this working properly, I'd like to share the exact things I did:</p>\n\n<p>During initialization, with the understanding that any of these initial time bases may be changed by libav at some point:</p>\n\n<ul>\n<li><p>Initialize decoder codec context time base to something reasonable immediately after allocating codec context. I went for sub-millisecond resolution:</p>\n\n<pre><code>d.codecx-&gt;time_base = { 1, 10000 };\n</code></pre></li>\n<li><p>Initialize encoder stream time base immediately after creating the new stream (note: in the QtRLE case, if I leave this {0,0}, it'll be set by the encoder to {0,90000} after writing the header, but I don't know if other situations will be as cooperative, so I initialize it here). At this point it's safe to just copy from the input stream, although I noticed I can also initialize it arbitrarily (e.g. {1,10000}) and it will still work later:</p>\n\n<pre><code>e.stream-&gt;time_base = d.stream-&gt;time_base;\n</code></pre></li>\n<li><p>Initialize encoder codec context time base immediately after allocating it. Same deal as stream time base as far as copying from decoder:</p>\n\n<pre><code>e.codecx-&gt;time_base = d.codecx-&gt;time_base;\n</code></pre></li>\n</ul>\n\n<p>One of the things I was missing is that I can set these timestamps, and libav will obey. There are no constraints, it's up to me, and no matter what I set the decoded timestamps will be in the time base that I choose. I didn't realize this.</p>\n\n<p>Then while decoding:</p>\n\n<ul>\n<li><p>All I have to do is fill in the decoded frames pts manually. The <code>pkt_*</code> fields are ignorable:</p>\n\n<pre><code>d.rawframe-&gt;pts = av_frame_get_best_effort_timestamp(d.rawframe);\n</code></pre></li>\n<li><p>And since I'm converting formats I also copy it to the converted frame:</p>\n\n<pre><code>d.rgbframe-&gt;pts = d.rawframe-&gt;pts;\n</code></pre></li>\n</ul>\n\n<p>Then, encoding:</p>\n\n<ul>\n<li><p>Only the frame's pts needs to be set. Libav will deal with the packet. So just prior to encoding frame:</p>\n\n<pre><code>outframe-&gt;pts = inframe-&gt;pts;\n</code></pre></li>\n<li><p>However, I still have to manually convert packet timestamps, which seems strange, but all of this is pretty strange so I guess it's par for the course.  The frame timestamp is still in the decoder stream time base, so after encoding the frame but just before writing the packet:</p>\n\n<pre><code>av_packet_rescale_ts(&amp;packet, d.stream-&gt;time_base, e.stream-&gt;time_base);\n</code></pre></li>\n</ul>\n\n<p>And it works like a charm, mostly: I noticed is VLC reports the input as 29.97 FPS but the output at 30.03 FPS, which I can't quite figure out. But, everything seems to play fine in all media players I've tested with.</p>\n", "last_activity_date": 1477776862, "answer_id": 40320862, "is_accepted": false, "owner": {"user_id": 616460, "reputation": 23170, "user_type": "registered", "accept_rate": 96, "display_name": "Jason C", "link": "http://stackoverflow.com/users/616460/jason-c", "profile_image": "https://i.stack.imgur.com/Yiloe.png?s=128&g=1"}, "last_edit_date": 1477776862, "question_id": 40275242}