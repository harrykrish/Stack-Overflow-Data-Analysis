{"title": "Variable return types based on string literal type argument", "tags": ["typescript"], "creation_date": 1475055814, "score": 4, "body": "<p>Yes, you can use overload signatures to achieve exactly what you want:</p>\n\n<pre><code>type Fruit = \"apple\" | \"orange\"\n\nfunction doSomething(foo: \"apple\"): string;\nfunction doSomething(foo: \"orange\"): string[];\nfunction doSomething(foo: Fruit): string | string[]\n{\n    if (foo == \"apple\") return \"hello\";\n    else return [\"hello\", \"world\"];\n}\n\nvar test1: string[] = doSomething(\"orange\");\nvar test2: string = doSomething(\"apple\");\n</code></pre>\n\n<p><a href=\"https://www.typescriptlang.org/play/index.html#src=type%20Fruit%20%3D%20%22apple%22%20%7C%20%22orange%22%0D%0A%0D%0Afunction%20doSomething(foo%3A%20%22apple%22)%3A%20string%3B%0D%0Afunction%20doSomething(foo%3A%20%22orange%22)%3A%20string%5B%5D%3B%0D%0Afunction%20doSomething(foo%3A%20Fruit)%3A%20string%20%7C%20string%5B%5D%0D%0A%7B%0D%0A%20%20%20%20if%20(foo%20%3D%3D%20%22apple%22)%20return%20%22hello%22%3B%0D%0A%20%20%20%20else%20return%20%5B%22hello%22%2C%20%22world%22%5D%3B%0D%0A%7D%0D%0A%0D%0A%2F%2F%20Works%20as%20expected.%0D%0Avar%20test1%3A%20string%5B%5D%20%3D%20doSomething(%22orange%22)%3B%0D%0Avar%20test2%3A%20string%20%3D%20doSomething(%22apple%22)%3B%0D%0A%0D%0A%2F%2F%20Flipping%20the%20types%20will%20yield%20errors%2C%20as%20expected.%0D%0Avar%20test3%3A%20string%20%3D%20doSomething(%22orange%22)%3B%0D%0Avar%20test4%3A%20string%5B%5D%20%3D%20doSomething(%22apple%22)%3B%0D%0A\" rel=\"nofollow\">Live demo on TypeScript Playground</a></p>\n\n<p>Trying to assign <code>doSomething(\"apple\")</code> to <code>test1</code> would yield a compile-time type-error.</p>\n\n<p>It is important to note that determining which overload signature was used must always be done in the function implementation manually, and the function implementation must <a href=\"http://stackoverflow.com/a/35552201/2788872\">support all overload signatures</a>.</p>\n\n<p>There are no separate implementations per overload in TypeScript as there are in, say, C#. As such, it would be a good idea to check for each supported type explicitly, something like:</p>\n\n<pre><code>switch (foo) {\n    case \"apple\": return \"hello\";\n    case \"orange\": return [\"hello\", \"world\"];\n    default: throw new TypeError(\"Invalid string value.\");\n}\n</code></pre>\n", "last_activity_date": 1475141930, "answer_id": 39743710, "is_accepted": false, "owner": {"user_id": 2788872, "reputation": 3682, "user_type": "registered", "accept_rate": 86, "display_name": "John White", "link": "http://stackoverflow.com/users/2788872/john-white", "profile_image": "https://www.gravatar.com/avatar/a2616878b8bfb95d8fbb8a63ad18d729?s=128&d=identicon&r=PG&f=1"}, "last_edit_date": 1475141930, "question_id": 39700093}