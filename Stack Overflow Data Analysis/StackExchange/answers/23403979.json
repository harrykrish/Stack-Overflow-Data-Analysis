{"title": "Objective C - how to add a subview that has its own UIViewController", "tags": ["objective-c", "uitableview", "uiviewcontroller"], "creation_date": 1398930567, "score": 72, "body": "<p>In iOS today <strong>\"everything is a container view\"</strong>. It is the basic way you make apps today.</p>\n\n<p>An app may be so simple that it has just the one view.</p>\n\n<p>But even in that case, when you have \"different things on the screen\", then each of those \"things\" is a container view.</p>\n\n<p>It's this simple...</p>\n\n<hr>\n\n<h1>(A) Drag a container view in to your scene...</h1>\n\n<p>In the same way that you drag say a UIButton in to your scene view, simply drag a container view in to your scene view.</p>\n\n<p>The container view is the brown thing in this image. It is actually <strong>inside</strong> your <strong>scene view.</strong></p>\n\n<p><img src=\"http://i.stack.imgur.com/w9CvU.png\" alt=\"enter image description here\"></p>\n\n<p>When you drag a container view into your scene view, Xcode automatically gives you <strong><em>two things</em></strong>:</p>\n\n<ol>\n<li><p>You get the container view <strong><em>inside your scene view</em></strong>, and,</p></li>\n<li><p>you get a brand-new <code>UIViewController</code> which is <strong><em>just sitting around somewhere on the white of your storyboard</em></strong>.</p></li>\n</ol>\n\n<p>The two are <strong><em>connected</em></strong> with the \"Masonic Symbol\" thing. Explained below.</p>\n\n<hr>\n\n<h1>(B) Click on that new view controller (the new thing Xcode made for you somewhere on the white area, <em>not the thing inside your scene</em>) ... and, change the class!</h1>\n\n<p>It's really that simple.</p>\n\n<p><strong>You're done.</strong></p>\n\n<hr>\n\n<p>Here's the same thing explained visually.</p>\n\n<p>Notice the <strong><em>container view</em></strong> at <code>(A)</code>.</p>\n\n<p>Notice the <strong><em>controller</em></strong> at <code>(B)</code>.</p>\n\n<p><a href=\"http://i.stack.imgur.com/6xReZ.png\" rel=\"nofollow\"><img src=\"http://i.stack.imgur.com/6xReZ.png\" alt=\"enter image description here\"></a> </p>\n\n<p>Click on B. (That's B - not A!)</p>\n\n<p>Go to the inspector at the top right. Notice it says \"UIViewController\"</p>\n\n<p><a href=\"http://i.stack.imgur.com/4mV1K.png\" rel=\"nofollow\"><img src=\"http://i.stack.imgur.com/4mV1K.png\" alt=\"enter image description here\"></a></p>\n\n<p>Change it to your own custom class, which is a UIViewController.</p>\n\n<p><a href=\"http://i.stack.imgur.com/wpVTD.png\" rel=\"nofollow\"><img src=\"http://i.stack.imgur.com/wpVTD.png\" alt=\"enter image description here\"></a></p>\n\n<p>So, I have a Swift class <code>Snap</code> which is a <code>UIViewController</code>.</p>\n\n<p><a href=\"http://i.stack.imgur.com/p9XzR.png\" rel=\"nofollow\"><img src=\"http://i.stack.imgur.com/p9XzR.png\" alt=\"enter image description here\"></a></p>\n\n<p>So where it says \"UIViewController\" in the Inspector I typed in \"Snap\".</p>\n\n<p>(It will auto-complete \"Snap\" as you start typing \"Snap...\". Xcode knows you have a UIViewController called \"Snap\".)</p>\n\n<p>That's all there is to it - you're done.</p>\n\n<hr>\n\n<h1>Advanced! How to change the type of container view.</h1>\n\n<p>So, when you click to add a container view, Apple gives you a linked view controller automatically. In fact, it makes it a <code>UIViewController</code> by default. That's silly: it should ask which type you need. Here's how to change it:</p>\n\n<blockquote>\n  <p>At the time of writing, Xcode gives you a <code>UIViewController</code> by default. Let's say you want a <code>UICollectionViewController</code> instead:</p>\n  \n  <p>(i) Drag a container view in to your scene. Look at the UIViewController on the storyboard which Xcode gives you by default. We'll call it \"D\"</p>\n  \n  <p>(ii) Drag a <code>UICollectionViewController</code> to anywhere on the main white area of the storyboard. We'll call it \"C\"</p>\n  \n  <p>(iii) Click the container view inside your scene. Click the connections inspector. Notice there is one \"Triggered Segue\".  <strong>Mouse over</strong> \"Triggered Segue\" and notice that Xcode <strong>highlights</strong> all of \"D\"</p>\n  \n  <p>(iv) Click the \"x\" and actually <strong>delete</strong> that Triggered Segue</p>\n  \n  <p>(v) <strong>Drag from</strong> that Triggered Segue (viewDidLoad is the only choice). Drag across the storyboard to \"C\". Let go and a pop-up appears. You must select <strong>embed</strong></p>\n  \n  <p>(vi) Actually just <strong>delete</strong> all of \"D\". You're done.</p>\n</blockquote>\n\n<p>Short version: delete the unwanted UIViewController. Put a new <code>UICollectionViewController</code> on the storyboard. Control-drag from the container view's Connections-Trigger Segue-viewDidLoad, to your new controller. Be sure to select \"embed\" on the popup.</p>\n\n<hr>\n\n<h1>Entering the text identifier...</h1>\n\n<p>You will have one of these <strong>\"square in a square\"</strong> Masonic symbol things: it is on the \"bendy line\" connecting your container view with the view controller.</p>\n\n<p><img src=\"http://i.stack.imgur.com/aHHwu.png\" alt=\"enter image description here\"></p>\n\n<p>Click on it.</p>\n\n<p>That is exactly where you must type in a <strong>text identifier</strong> for the segue.</p>\n\n<p>You decide on the name. It can be any text string.</p>\n\n<p>I use \"containerClassName\" as the string. So, \"containerSnap\" for the example above.</p>\n\n<p>Then, do the following, in code, in the ViewController of the whole scene.</p>\n\n<p>Let's say you have three container views in the scene. Each container view holds a different controller, say \"Snap\", \"Clock\" and \"Other\".</p>\n\n<pre><code>var snap:Snap?\nvar clock:Clock?\nvar other:Other?\noverride func prepareForSegue(segue:(UIStoryboardSegue!), sender:AnyObject!)\n    {\n    if (segue.identifier == \"containerSnap\")\n        { snap = segue!.destinationViewController as! Snap }\n    if (segue.identifier == \"containerClock\")\n        { clock = segue!.destinationViewController as! Clock }\n    if (segue.identifier == \"containerOther\")\n        { other = segue!.destinationViewController as! Other }\n    }\n</code></pre>\n\n<p>It's that simple.  You connect a variable to refer to the controllers, using the <code>prepareForSegue</code> call.</p>\n\n<hr>\n\n<h1>The other direction...</h1>\n\n<p>Say you're \"in\" the controller which you have put in a container view (\"Snap\" in the example).</p>\n\n<p>It can be a confusing to get to the \"boss\" view controller above you (\"Dash\" in the example). Fortunately, it is this simple:</p>\n\n<pre><code>// Dash is the overall scene.\n// Here we are in Snap. Snap is one of the container views inside Dash.\nclass Snap\n{\nvar myBoss:Dash?    \noverride func viewDidAppear(animated: Bool)\n    {\n    myBoss = self.parentViewController as? Dash\n    }\n</code></pre>\n\n<p><strong>Important:</strong> Only works from <code>viewDidAppear</code> or later. Will not work in <code>viewDidLoad</code>.</p>\n\n<p>You're done.</p>\n\n<hr>\n\n<h1>prepareForSegue poorly named...</h1>\n\n<p>It's worth noting that \"prepareForSegue\" is a <strong>really bad name!</strong></p>\n\n<p>\"prepareForSegue\" is used for two purposes: loading container views, and, segueing between scenes.</p>\n\n<p>But in practice, you very rarely actually segue between scenes. Whereas every app has many, many, container views.</p>\n\n<p>It would make far more sense if \"prepareForSegue\" was called something like \"loadingContainerView\"</p>\n\n<hr>\n\n<h1>More than one...</h1>\n\n<p>It's a common situation that you have an area on the screen, where you want to show one of a number of different view controllers.</p>\n\n<p>For example, you want to show one of four different widgets.</p>\n\n<p>To do so, simply have <strong>four different container views</strong> all sitting in the <strong>same identical area</strong>.  Quite simply, in your code hide all four, and turn on only the one you need. </p>\n\n<p>(Have four <code>UIView</code> outlets, one for each of the container views.)</p>\n\n<p>For convenience on the storyboard: you may want to have one empty UIView, which holds the four container views. You can then size or move all four at once.</p>\n\n<hr>\n\n<h1>Note - Storyboard References arrive!</h1>\n\n<p>As SimplGy points out below <em>\"iOS 9's <a href=\"https://developer.apple.com/library/ios/recipes/xcode_help-IB_storyboard/Chapters/AddSBReference.html\" rel=\"nofollow\">Storyboard References</a> make container views even more awesome. You can define your reusable view (controller) wherever you like and reference it from any container view in multiple, modular storyboards.\"</em></p>\n", "last_activity_date": 1475836996, "answer_id": 23403979, "is_accepted": true, "owner": {"user_id": 294884, "reputation": 15622, "user_type": "registered", "accept_rate": 89, "display_name": "Joe Blow", "link": "http://stackoverflow.com/users/294884/joe-blow", "profile_image": "https://www.gravatar.com/avatar/f8675693dfeb3908195657eb3a3fdda4?s=128&d=identicon&r=PG"}, "last_edit_date": 1475836996, "question_id": 23399061}