{"title": "Can a C++ function be declared such that the return value cannot be ignored?", "tags": ["c++", "return-value", "void"], "creation_date": 1473138590, "score": 4, "body": "<p>To summarize from other answers &amp; comments, basically you have 3 choices:</p>\n\n<ol>\n<li>Get C++17 to be able to use  <code>[[nodiscard]]</code></li>\n<li>In g++ (also clang++), use compiler extensions like <code>__wur</code> (defined\nas <code>__attribute__ ((__warn_unused_result__))</code>), or the more portable (C++11 and up only) <code>[[gnu::warn_unused_result]]</code> attribute.</li>\n<li>Use runtime checks to catch the problem during unit testing</li>\n</ol>\n\n<hr>\n\n<p>If all of these 3 are not possible, then there is one more way, which is kind of <strong>\"Negative compiling\"</strong>. Define your <code>Unignorable</code> as below:</p>\n\n<pre><code>struct Unignorable {\n  Unignorable () = default;\n#ifdef NEGATIVE_COMPILE\n  Unignorable (const Unignorable&amp;) = delete;  // C++11\n  Unignorable&amp; operator= (const Unignorable&amp;) = delete;\n  //private: Unignorable (const Unignorable&amp;); public:  // C++03\n  //private: Unignorable&amp; operator= (const Unignorable&amp;); public: // C++03\n  /* similar thing for move-constructor if needed */\n#endif\n};\n</code></pre>\n\n<p>Now compile with <code>-DNEGATIVE_COMPILE</code> or equivalent in other compilers like MSVC. It will give errors at wherever the result <em>is Not ignored</em>:</p>\n\n<pre><code>auto x = foo();  // error\n</code></pre>\n\n<p>However, it will not give any error wherever the result <em>is ignored</em>:</p>\n\n<pre><code>foo(); // no error\n</code></pre>\n\n<p>Using any modern code browser (like eclipse-cdt), you may find all the occurrences of <code>foo()</code> and fix those places which didn't give error. In the new compilation, simply remove the pre-defined macro for \"NEGATIVE_COMPILE\". </p>\n\n<p>This might be bit better compared to simply finding <code>foo()</code> and checking for its return, because there might be many functions like <code>foo()</code> where you may not want to ignore the return value.</p>\n\n<p>This is bit tedious, but will work for all the versions of C++ with all the compilers.</p>\n", "last_activity_date": 1477747391, "answer_id": 39341050, "is_accepted": true, "owner": {"user_id": 514235, "reputation": 37596, "user_type": "registered", "accept_rate": 82, "display_name": "iammilind", "link": "http://stackoverflow.com/users/514235/iammilind", "profile_image": "https://www.gravatar.com/avatar/73c478b60c371abe43bb7ac15ff3666d?s=128&d=identicon&r=PG"}, "last_edit_date": 1477747391, "question_id": 39327028}