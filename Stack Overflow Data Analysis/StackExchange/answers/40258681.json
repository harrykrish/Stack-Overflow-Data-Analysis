{"title": "Dynamically add subplots in matplotlib with more than one column", "tags": ["python", "matplotlib"], "creation_date": 1477474604, "score": 0, "body": "<p>Here's the solution I ended up with.  It lets you reference subplots by name, and adds a new subplot if that name has not been used yet, repositioning all previous subplots in the process.</p>\n\n<p>Usage:</p>\n\n<pre><code>set_named_subplot('plot-a')  # Create a new plot\nplt.plot(np.sin(np.linspace(0, 10, 100)))  # Plot a curve\n\nset_named_subplot('plot-b')  # Create a new plot\nplt.imshow(np.random.randn(10, 10))   # Draw image\n\nset_named_subplot('plot-a')   # Set the first plot as the current one\nplt.plot(np.cos(np.linspace(0, 10, 100)))  # Plot another curve in the first plot\n\nplt.show()  # Will show two plots\n</code></pre>\n\n<p>The code:</p>\n\n<pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef add_subplot(fig = None, layout = 'grid'):\n    \"\"\"\n    Add a subplot, and adjust the positions of the other subplots appropriately.\n    Lifted from this answer: http://stackoverflow.com/a/29962074/851699\n\n    :param fig: The figure, or None to select current figure\n    :param layout: 'h' for horizontal layout, 'v' for vertical layout, 'g' for approximately-square grid\n    :return: A new axes object\n    \"\"\"\n    if fig is None:\n        fig = plt.gcf()\n    n = len(fig.axes)\n    n_rows, n_cols = (1, n+1) if layout in ('h', 'horizontal') else (n+1, 1) if layout in ('v', 'vertical') else \\\n        vector_length_to_tile_dims(n+1) if layout in ('g', 'grid') else bad_value(layout)\n    for i in range(n):\n        fig.axes[i].change_geometry(n_rows, n_cols, i+1)\n    ax = fig.add_subplot(n_rows, n_cols, n+1)\n    return ax\n\n\n_subplots = {}\n\n\ndef set_named_subplot(name, fig=None, layout='grid'):\n    \"\"\"\n    Set the current axes.  If \"name\" has been defined, just return that axes, otherwise make a new one.\n\n    :param name: The name of the subplot\n    :param fig: The figure, or None to select current figure\n    :param layout: 'h' for horizontal layout, 'v' for vertical layout, 'g' for approximately-square grid\n    :return: An axes object\n    \"\"\"\n    if name in _subplots:\n        plt.subplot(_subplots[name])\n    else:\n        _subplots[name] = add_subplot(fig=fig, layout=layout)\n    return _subplots[name]\n\n\ndef vector_length_to_tile_dims(vector_length):\n    \"\"\"\n    You have vector_length tiles to put in a 2-D grid.  Find the size\n    of the grid that best matches the desired aspect ratio.\n\n    TODO: Actually do this with aspect ratio\n\n    :param vector_length:\n    :param desired_aspect_ratio:\n    :return: n_rows, n_cols\n    \"\"\"\n    n_cols = np.ceil(np.sqrt(vector_length))\n    n_rows = np.ceil(vector_length/n_cols)\n    grid_shape = int(n_rows), int(n_cols)\n    return grid_shape\n\n\ndef bad_value(value, explanation = None):\n    \"\"\"\n    :param value: Raise ValueError.  Useful when doing conditional assignment.\n    e.g.\n    dutch_hand = 'links' if eng_hand=='left' else 'rechts' if eng_hand=='right' else bad_value(eng_hand)\n    \"\"\"\n    raise ValueError('Bad Value: %s%s' % (value, ': '+explanation if explanation is not None else ''))\n</code></pre>\n", "last_activity_date": 1477475556, "answer_id": 40258681, "is_accepted": false, "owner": {"user_id": 851699, "reputation": 1649, "user_type": "registered", "accept_rate": 36, "display_name": "Peter", "link": "http://stackoverflow.com/users/851699/peter", "profile_image": "https://i.stack.imgur.com/jDiPy.png?s=128&g=1"}, "last_edit_date": 1477475556, "question_id": 31575399}