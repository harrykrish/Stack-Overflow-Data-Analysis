{"body": "<p>Seems that there are no good solution in this case and <code>@Valid</code> annotation is not supported by default in any way, see <a href=\"https://jira.spring.io/browse/DATAREST-593\" rel=\"nofollow\">DATAREST-593</a>. That why, to support <code>@Valid</code> annotation on <code>@RepositoryRestController</code> methods, I've created the following <code>@ControllerAdvice</code> class:</p>\n\n<pre><code>package com.tivoli.api.application.advice;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.MethodParameter;\nimport org.springframework.http.HttpInputMessage;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.validation.BeanPropertyBindingResult;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.validation.ObjectError;\nimport org.springframework.validation.Validator;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdviceAdapter;\n\nimport javax.validation.Valid;\nimport javax.validation.ValidationException;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Type;\n\n/**\n * Workaround class for making JSR-303 annotation validation work for controller method parameters.\n * Check the issue &lt;a href=\"https://jira.spring.io/browse/DATAREST-593\"&gt;DATAREST-593&lt;/a&gt;\n */\n@ControllerAdvice\npublic class RequestBodyValidationProcessor extends RequestBodyAdviceAdapter {\n\n    private final Validator validator;\n\n    public RequestBodyValidationProcessor(@Autowired final Validator validator) {\n        this.validator = validator;\n    }\n\n    @Override\n    public boolean supports(final MethodParameter methodParameter, final Type targetType, final Class&lt;? extends\n            HttpMessageConverter&lt;?&gt;&gt; converterType) {\n        final Annotation[] parameterAnnotations = methodParameter.getParameterAnnotations();\n        for (final Annotation annotation : parameterAnnotations) {\n            if (annotation.annotationType().equals(Valid.class)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    @Override\n    public Object afterBodyRead(final Object body, final HttpInputMessage inputMessage, final MethodParameter\n            parameter, final Type targetType, final Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType) {\n        final Object obj = super.afterBodyRead(body, inputMessage, parameter, targetType, converterType);\n        final BindingResult bindingResult = new BeanPropertyBindingResult(obj, obj.getClass().getCanonicalName());\n        validator.validate(obj, bindingResult);\n        if (bindingResult.hasErrors()) {\n            throw new ValidationException(createErrorMessage(bindingResult));\n        }\n\n        return obj;\n    }\n\n    private String createErrorMessage(final BindingResult bindingResult) {\n        final StringBuilder stringBuilder = new StringBuilder(\"Invalid parameters specified.\");\n        if (bindingResult.getFieldErrors() != null &amp;&amp; !bindingResult.getFieldErrors().isEmpty()) {\n            stringBuilder.append(\" Fields:\");\n            bindingResult.getFieldErrors().forEach(fieldError -&gt; stringBuilder\n                    .append(\" [ \")\n                    .append(fieldError.getField())\n                    .append(\" : \")\n                    .append(fieldError.getRejectedValue())\n                    .append(\" ] \"));\n        } else if (bindingResult.getAllErrors() != null &amp;&amp; !bindingResult.getAllErrors().isEmpty()) {\n            final ObjectError objectError = bindingResult.getAllErrors().get(0); // get the first error\n            stringBuilder.append(\" Message: \")\n                    .append(objectError.getDefaultMessage());\n        }\n\n        return stringBuilder.toString();\n    }\n}\n</code></pre>\n", "tags": ["java", "spring", "validation", "spring-mvc", "spring-data-rest"], "creation_date": 1477382029, "score": 0, "last_activity_date": 1477382029, "answer_id": 40234338, "is_accepted": true, "owner": {"user_id": 1889928, "reputation": 1956, "user_type": "registered", "accept_rate": 90, "display_name": "Yuriy Yunikov", "link": "http://stackoverflow.com/users/1889928/yuriy-yunikov", "profile_image": "https://www.gravatar.com/avatar/c6b04157e65ab1a1e0e61d220d06341d?s=128&d=identicon&r=PG"}, "title": "Spring Data REST: custom methods validation", "question_id": 40219506}