{"title": "JavaScript to TypeScript: Intellisense and dynamic members", "tags": ["javascript", "typescript"], "creation_date": 1475768897, "score": 1, "body": "<blockquote>\n  <p>I would like to know if it is possible to model this sort of behavior (including having intellisense) in TypeScript?</p>\n</blockquote>\n\n<p><strong>Yes.</strong></p>\n\n<p>You can assign a generic call signature to <code>DynamicObject</code>. You'll need to declare it as a variable:</p>\n\n<pre><code>var DynamicObject: new &lt;T&gt;(obj: T) =&gt; T = function (obj)\n{\n    for (var prop in obj)\n    {\n        Object.defineProperty(this, prop, {\n            get: function () { return obj[prop]; },\n            set: function (value) { obj[prop] = value; },\n            enumerable: true,\n            configurable: false\n        });\n    }\n} as any;\n</code></pre>\n\n<p>This way, IntelliSense will treat the value returned from <code>new DynamicObject</code> as having the same type as the value passed in. Same property names, same property types. You'll get full autocomplete and type-safety.</p>\n\n<p><a href=\"https://www.typescriptlang.org/play/index.html#src=var%20DynamicObject%3A%20new%20%3CT%3E(obj%3A%20T)%20%3D%3E%20T%20%3D%20function%20(obj)%0D%0A%7B%0D%0A%20%20%20%20for%20(var%20prop%20in%20obj)%0D%0A%20%20%20%20%7B%0D%0A%20%20%20%20%20%20%20%20Object.defineProperty(this%2C%20prop%2C%20%7B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20get%3A%20function%20()%20%7B%20return%20obj%5Bprop%5D%3B%20%7D%2C%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20set%3A%20function%20(value)%20%7B%20obj%5Bprop%5D%20%3D%20value%3B%20%7D%2C%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20enumerable%3A%20true%2C%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20configurable%3A%20false%0D%0A%20%20%20%20%20%20%20%20%7D)%3B%0D%0A%20%20%20%20%7D%0D%0A%7D%20as%20any%3B%0D%0A%0D%0Avar%20obj%20%3D%20new%20DynamicObject(%7B%0D%0A%20%20%20%20name%3A%20%22John%20Smith%22%2C%0D%0A%20%20%20%20email%3A%20%22john.smith%40test.net%22%2C%0D%0A%20%20%20%20id%3A%201%0D%0A%7D)%3B%0D%0A\" rel=\"nofollow\">Live demo on TypeScript Playground</a></p>\n\n<hr>\n\n<p><em>If you have trouble wrapping your head around that part in the first line, it's the same as writing the following:</em></p>\n\n<pre><code>// Declare type (only exists during compile-time)\nvar DynamicObject: new &lt;T&gt;(obj: T) =&gt; T;\n\n// Assign value (during runtime)\nDynamicObject = function (obj)\n{\n    ...\n} as any;\n</code></pre>\n", "last_activity_date": 1475771373, "answer_id": 39900452, "is_accepted": true, "owner": {"user_id": 2788872, "reputation": 3682, "user_type": "registered", "accept_rate": 86, "display_name": "John White", "link": "http://stackoverflow.com/users/2788872/john-white", "profile_image": "https://www.gravatar.com/avatar/a2616878b8bfb95d8fbb8a63ad18d729?s=128&d=identicon&r=PG&f=1"}, "last_edit_date": 1475771373, "question_id": 39900015}