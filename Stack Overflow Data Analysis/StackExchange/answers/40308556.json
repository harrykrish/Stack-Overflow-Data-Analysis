{"body": "<p>Doing this worked:</p>\n\n<pre><code>class YourThreadFactory implements ThreadFactory {\n    public Thread newThread(Runnable r) {\n        return new Thread(r, \"Your name\");\n    }\n}\nprivate ExecutorService executor = Executors.newSingleThreadExecutor(new YourThreadFactory());\n</code></pre>\n\n<p>Because apparently, the threads of tomcat are daemons, and therefore, when they create a new thread with <code>return new Thread(r, \"Your name\");</code> it also becomes a daemon. </p>\n\n<p>But in the DefaultThreadFactory that an executor service use, I saw that it makes sure daemonity of new threads is off. </p>\n\n<p>That doesn't explain why <code>executor.shutdown();</code> didn't work though, but now at least it properly shuts down.</p>\n", "tags": ["java", "multithreading", "tomcat", "executorservice"], "creation_date": 1477669146, "score": 1, "last_activity_date": 1477669146, "answer_id": 40308556, "is_accepted": false, "owner": {"user_id": 4279201, "reputation": 869, "user_type": "registered", "accept_rate": 100, "display_name": "kuhaku", "link": "http://stackoverflow.com/users/4279201/kuhaku", "profile_image": "https://www.gravatar.com/avatar/cff52351d37f559a2f8886ccf441cdb7?s=128&d=identicon&r=PG&f=1"}, "title": "ExecutorService doesn&#39;t shut down from contextDestroyed() when stopping Tomcat", "question_id": 40236736}