{"title": "ComboBox, is it possible to have ItemsSource and SelectedValue bound to different sources?", "tags": ["c#", "wpf", "combobox"], "creation_date": 1477698538, "score": 0, "body": "<p>OK. After so many experiments the best solution I came up with was to create my own user control that is composed of both a button and a combobox that imitate the behavior I was expecting of the combobox on it own.</p>\n\n<p>First, I had a really stupid mistake in the model where both lists of members Project and Division contain the same instances of Employee, which makes the AvailableEmployees property buggy. What I really needed to do is to create a list of copies of employees in the Project instead of just references. </p>\n\n<p>In any case, I created a new user control and called it DynamicSourceComboBox. The XAML of this control looks like this:</p>\n\n<pre><code>&lt;Grid&gt;\n    &lt;Button x:Name=\"selected\"\n            Content=\"{Binding RelativeSource={RelativeSource AncestorType=local:DynamicSourceComboBox}, Path=SelectedValue}\"\n            Click=\"selected_Click\"/&gt;\n    &lt;ComboBox x:Name=\"selections\"\n              ItemsSource=\"{Binding RelativeSource={RelativeSource AncestorType=local:DynamicSourceComboBox}, Path=ItemsSource}\"\n              DisplayMemberPath=\"{Binding RelativeSource={RelativeSource AncestorType=local:DynamicSourceComboBox}, Path=DisplayMemberPath}\"\n              Visibility=\"Collapsed\"\n              SelectionChanged=\"selections_SelectionChanged\"\n              MouseLeave=\"selections_MouseLeave\"/&gt;\n&lt;/Grid&gt;\n</code></pre>\n\n<p>I have here a few bindings from the button and the combobox to properties in my user control. These are actually dependency properties. The code-behind of my user control looks like this:</p>\n\n<pre><code>public partial class DynamicSourceComboBox : UserControl\n{\n    public DynamicSourceComboBox()\n    {\n        InitializeComponent();\n    }\n\n    public object SelectedValue\n    {\n        get { return (object)GetValue(SelectedValueProperty); }\n        set { SetValue(SelectedValueProperty, value); }\n    }\n    public static readonly DependencyProperty SelectedValueProperty =\n        DependencyProperty.Register(\"SelectedValue\", typeof(object), typeof(DynamicSourceComboBox), new PropertyMetadata(null));\n\n    public IEnumerable ItemsSource\n    {\n        get { return (IEnumerable)GetValue(ItemsSourceProperty); }\n        set { SetValue(ItemsSourceProperty, value); }\n    }\n    public static readonly DependencyProperty ItemsSourceProperty =\n        ComboBox.ItemsSourceProperty.AddOwner(typeof(DynamicSourceComboBox));\n\n    public string DisplayMemberPath\n    {\n        get { return (string)GetValue(DisplayMemberPathProperty); }\n        set { SetValue(DisplayMemberPathProperty, value); }\n    }\n    public static readonly DependencyProperty DisplayMemberPathProperty =\n        ComboBox.DisplayMemberPathProperty.AddOwner(typeof(DynamicSourceComboBox));\n\n    private void selected_Click(object sender, RoutedEventArgs e)\n    {\n        selected.Visibility = Visibility.Hidden;\n        selections.Visibility = Visibility.Visible;\n        selections.IsDropDownOpen = true;\n    }\n\n    private void selections_SelectionChanged(object sender, SelectionChangedEventArgs e)\n    {\n        selections.Visibility = Visibility.Collapsed;\n        selected.Visibility = Visibility.Visible;\n        selections.IsDropDownOpen = false;\n\n        if (e.AddedItems.Count == 1)\n        {\n            var item = e.AddedItems[0];\n\n            Type itemType = item.GetType();\n            var itemTypeProps = itemType.GetProperties();\n\n            var realValue = (from prop in itemTypeProps\n                            where prop.Name == DisplayMemberPath\n                            select prop.GetValue(selections.SelectedValue)).First();\n\n            SelectedValue = realValue;\n        }  \n    }\n\n    private void selections_MouseLeave(object sender, MouseEventArgs e)\n    {\n        selections.Visibility = Visibility.Collapsed;\n        selected.Visibility = Visibility.Visible;\n        selections.IsDropDownOpen = false;\n    }\n}\n</code></pre>\n\n<p>These dependency properties imitate the properties with similar names in ComboBox but they are hooked up to the internal combobox and the button in a way that makes them behave together as a single complex combobox. </p>\n\n<p>The Click event in the button hides it and present the combobox to make the effect of just a box that is opening. Then I have a SelectionChanged event in the combobox firing to update all the needed information and a MouseLeave event just in case the user doesn't make any real selection change. </p>\n\n<p>When I need to use the new user control, I set it up like this:</p>\n\n<pre><code>&lt;local:DynamicSourceComboBox ItemsSource=\"{Binding RelativeSource={RelativeSource AncestorLevel=1, AncestorType=ListBox}, Path=DataContext.AvailableEmployees}\"\n                                                                 DisplayMemberPath=\"FirstName\"\n                                                                 SelectedValue=\"{Binding FirstName, Mode=TwoWay}\"/&gt;\n</code></pre>\n\n<p>Of course, for all of it to work, I have to make a lot of hookups with PropertyChanged events in the models, so the Projects instance will know to raise a PropertyChanged event for AvailableEmployees any time a change is made, but this is not really the concern of this user control itself.</p>\n\n<p>This is a pretty clunky solution, with a lot of extra code that is a bit hard to follow, but it's really the best (actually only) solution I could have come up with to the problem I had.</p>\n", "last_activity_date": 1477700960, "answer_id": 40314634, "is_accepted": false, "owner": {"user_id": 2921009, "reputation": 49, "user_type": "registered", "accept_rate": 67, "display_name": "user2921009", "link": "http://stackoverflow.com/users/2921009/user2921009", "profile_image": "https://www.gravatar.com/avatar/05c2c55e1cf2431283855c4e4fdbbc09?s=128&d=identicon&r=PG&f=1"}, "last_edit_date": 1477700960, "question_id": 40293130}