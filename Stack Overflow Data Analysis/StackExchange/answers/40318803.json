{"body": "<p>The question actually hides two questions:</p>\n\n<ol>\n<li>What am I <em>really</em> testing?</li>\n<li>Assuming I decided I <em>really need</em> to test for 100K edges what is the best way to do it?</li>\n</ol>\n\n<p>From my point of view and experience, the most important question is 1:</p>\n\n<ul>\n<li>Am I testing performance? Then yes, I need to test the 100K edge case (and measure time or other resources usage).</li>\n<li>Am I testing boundary conditions and I know that the implementation has conditional code around 100K edges? Then yes I need to test this case.</li>\n<li>Am I testing robustness or security and I have reasons to think I might be able to break the system under test with 100K edges? Then yes I need to test this case.</li>\n<li>On the other hand, if I am \"just\" testing correctness, why do I have the feeling that testing for, say, 10 edges is not enough to convince myself that the implementation will also work for 100K edges? I need to answer this question before continuing.</li>\n</ul>\n\n<p>To make a comparison: say I am testing a function that returns the sum of a list of numbers. Say I have a test for lists of 0,1 and 5 elements. Why should I think that 5 elements is not a good-enough representative of the generic case?</p>\n\n<p>What I am trying to say is that <em>first</em> one must really understand <em>what</em> one is testing and <em>why</em>, before jumping into the coding of the test.</p>\n\n<p>For question 2, I think robert's answer is right, I can only paraphrase it. You need to write a <em>as simple as possible</em> helper function to generate the graph at run-time.</p>\n\n<p>But looking at the code it looks like there are design problems of the <code>Graph</code> class that should be addressed before:</p>\n\n<ul>\n<li>Since the constructor requires the edge list, why is it also requiring the size of such list in parameter <code>num_edges</code>? The implementation can easily obtain the size of the list from the list itself.</li>\n<li>Also the fact of requiring the number of vertices is problematic, always for the same reason that it is receiving the edge list. The number of vertices should be calculated from the edge list, otherwise what happens if there is a contradiction between <code>num_vertices</code> and the number of vertices calculated from the edge list?</li>\n</ul>\n\n<p>The fact that you are writing a test is very good, because the test is forcing you to question the design of <code>Graph</code>. Think about it and consider redesigning, using other, simpler tests to guide your design.</p>\n", "tags": ["unit-testing", "c++11", "testing", "googletest"], "creation_date": 1477741923, "score": 1, "last_activity_date": 1477741923, "answer_id": 40318803, "is_accepted": true, "owner": {"user_id": 561422, "reputation": 1588, "user_type": "registered", "display_name": "marco.m", "link": "http://stackoverflow.com/users/561422/marco-m", "profile_image": "https://www.gravatar.com/avatar/382a85a55c2167baccf48d1415cecafe?s=128&d=identicon&r=PG&f=1"}, "title": "How to test methods of heavy data structures using Google Test?", "question_id": 40289902}