{"body": "<p>I solved this by setting the <strong>longPressGesture.minimumPressDuration</strong> to 0, and then check how far away the user dragged from the origin of the tap.</p>\n\n<p>If the drag's max distance away from the origin is greater than a certain amount, I recognize it as a drag. Else, it's a tap.</p>\n\n<p><strong>Step 1:</strong> Implement the longPressGesture to the collectionView:</p>\n\n<pre><code>    longPressGesture = UILongPressGestureRecognizer(target: self, action: #selector(MyViewController.handleLongGesture(gesture:)))\n    longPressGesture.numberOfTapsRequired = 0\n    longPressGesture.minimumPressDuration = 0\n    myCollectionView.addGestureRecognizer(longPressGesture)\n</code></pre>\n\n<p><strong>Step 2:</strong> Declare two variables on the class to calculate the distance of the drag</p>\n\n<pre><code>var startPoint: CGPoint?\nvar maxDistance: CGFloat?\n</code></pre>\n\n<p><strong>Step 3</strong> Write a function that will calculate the total distance away from the origin of the drag (we'll use this method in the next step)</p>\n\n<pre><code>func calculateDistance(from: CGPoint, to: CGPoint) -&gt; CGFloat {\n        return sqrt(pow((from.x - to.x),2) + pow((from.y - to.y),2))\n}\n</code></pre>\n\n<p><strong>Step 4:</strong> Handle the drag</p>\n\n<pre><code>func handleLongGesture(gesture: UILongPressGestureRecognizer) {\n    switch(gesture.state) {\n    case UIGestureRecognizerState.began:\n        startPoint = gesture.location(in: myCollectionView)\n        maxDistance = 0\n        guard let selectedIndexPath = myCollectionView.indexPathForItem(at: gesture.location(in: myCollectionView)) else {\n            break\n        }\n        myCollectionView.beginInteractiveMovementForItem(at: selectedIndexPath)\n\n    case UIGestureRecognizerState.changed:\n        maxDistance = max(maxDistance!, calculateDistance(from: startPoint!, to: gesture.location(in: myCollectionView)))\n        myCollectionView.updateInteractiveMovementTargetPosition(gesture.location(in: gesture.view!))\n    case UIGestureRecognizerState.ended:\n        if maxDistance! &lt; CGFloat(10) {\n            if let selectedIndexPath = myCollectionView.indexPathForItem(at: gesture.location(in: myCollectionView)) {\n                collectionView(myCollectionView, didSelectItemAt: selectedIndexPath)\n            }\n        }\n        myCollectionView.endInteractiveMovement()\n\n    default:\n        myCollectionView.cancelInteractiveMovement()\n    }\n}\n</code></pre>\n\n<p><strong>Note:</strong>\nWe call didSelectItemAtIndex on our collectionView from within step 4, so make sure whatever functionality you want to occur on a tap goes within there.</p>\n", "tags": ["ios", "uitableview", "uicollectionview", "uicollectionviewcell"], "creation_date": 1475598046, "score": 1, "last_activity_date": 1475598046, "answer_id": 39857306, "is_accepted": false, "owner": {"user_id": 3814160, "reputation": 899, "user_type": "registered", "accept_rate": 44, "display_name": "vikzilla", "link": "http://stackoverflow.com/users/3814160/vikzilla", "profile_image": "https://i.stack.imgur.com/vDrtU.jpg?s=128&g=1"}, "title": "Detect taps but also drags for cell", "question_id": 39843624}