{"title": "typesafe select onChange event using reactjs and typescript", "tags": ["javascript", "reactjs", "typescript"], "creation_date": 1472502237, "score": 2, "body": "<blockquote>\n  <p>Is it possible to retrieve the value in a type-safe manner without casting to any?</p>\n</blockquote>\n\n<p><strong>Yes.</strong> If you are certain about the element your handler is attached to, you can do:</p>\n\n<pre><code>&lt;select onChange={ e =&gt; this.selectChangeHandler(e) }&gt;\n    ...\n&lt;/select&gt;\n</code></pre>\n\n<pre class=\"lang-auto prettyprint-override\"><code>private selectChangeHandler(e: React.FormEvent)\n{\n    var target = e.target as HTMLSelectElement;\n    var intval: number = target.value; // Error: 'string' not assignable to 'number'\n}\n</code></pre>\n\n<p><a href=\"https://www.typescriptlang.org/play/#src=function%20handler(e%3A%20Event)%20%7B%0D%0A%09var%20target%20%3D%20e.target%20as%20HTMLSelectElement%3B%0D%0A%09%0D%0A%7D\" rel=\"nofollow\">Live demo</a></p>\n\n<p>The TypeScript compiler will allow this type-assertion, because an <em>HTMLSelectElement</em> is an <em>EventTarget</em>. After that, it should be type-safe, because you know that <em>e.target</em> is an <em>HTMLSelectElement</em>, because you just attached your event handler to it.</p>\n\n<p>However, to <em>guarantee</em> type-safety (which, in this case, is relevant when refactoring), it is also needed to check the actual runtime-type:</p>\n\n<pre><code>if (!(target instanceof HTMLSelectElement))\n{\n    throw new TypeError(\"Expected a HTMLSelectElement.\");\n}\n</code></pre>\n", "last_activity_date": 1475058534, "answer_id": 39214607, "is_accepted": false, "owner": {"user_id": 2788872, "reputation": 3682, "user_type": "registered", "accept_rate": 86, "display_name": "John White", "link": "http://stackoverflow.com/users/2788872/john-white", "profile_image": "https://www.gravatar.com/avatar/a2616878b8bfb95d8fbb8a63ad18d729?s=128&d=identicon&r=PG&f=1"}, "last_edit_date": 1475058534, "question_id": 33256274}