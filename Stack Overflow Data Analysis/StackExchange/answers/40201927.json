{"body": "<p>I used a <a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/Executors.html#newSingleThreadExecutor%28%29\" rel=\"nofollow\">newSingleThreadExecutor</a> to achieve this, since it can take multiple runnables to a queue and run them sequentially, it can be given tasks from several places and it will run them one by one, it's similar to <code>platform.runLater</code>.</p>\n\n<p>Having a single thread that all instances of the class hold a reference to, solves the \"many threads\" problem. </p>\n\n<p>It also won't cause a deadlock because it will at most wait for just one other thread to finish the synchronized function and then run just this one function.</p>\n", "tags": ["java", "multithreading", "tomcat", "java-8"], "creation_date": 1477218686, "score": 0, "last_activity_date": 1477218686, "answer_id": 40201927, "is_accepted": true, "owner": {"user_id": 4279201, "reputation": 869, "user_type": "registered", "accept_rate": 100, "display_name": "kuhaku", "link": "http://stackoverflow.com/users/4279201/kuhaku", "profile_image": "https://www.gravatar.com/avatar/cff52351d37f559a2f8886ccf441cdb7?s=128&d=identicon&r=PG&f=1"}, "title": "RunLater on current thread or give a task to current thread to run later", "question_id": 40076042}