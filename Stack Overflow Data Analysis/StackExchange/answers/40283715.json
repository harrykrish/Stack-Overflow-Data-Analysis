{"title": "Is there any efficiency advantage in using minmax_element over min_element and max_element together?", "tags": ["c++", "max", "min"], "creation_date": 1477568433, "score": 9, "body": "<p>You do not have to worry about <code>std::minmax_element</code> doing any sorting.  It leaves the range in the exact way it was traversed.  The reason it is more efficient is it can find both the max and min in a single pass where when looking for max and min separately you have to do two full traversals.</p>\n\n<p><code>std::minmax_element</code> has the complexity of <code>max(floor(3/2(N\u22121)), 0)</code> where as <code>std::max_element</code> and <code>std::min_element</code> each are <code>max(N-1,0)</code> so it is about 25% less operations using <code>std::minmax_element</code></p>\n\n<p>There is also a difference where <code>std::minmax_element</code> finds the last largest element while <code>std::max_element</code> finds the first largest.</p>\n\n<p>So if you need to find the min and max of a range then you should use <code>std::minmax_element</code>.  If you only need the min or max then you should use the specialized version.  Dealing with the return from <code>std::minmax_element</code> will get even easier with the upcoming C++17 standard and structured bindings.  You will be able to write</p>\n\n<pre><code>auto [min, max] = std::minmax_element(...);\n</code></pre>\n\n<p>and now the first element of the pair is stored in <code>min</code> and the second is stored in <code>max</code>.</p>\n", "last_activity_date": 1477569583, "answer_id": 40283715, "is_accepted": true, "owner": {"user_id": 4342498, "reputation": 42654, "user_type": "registered", "display_name": "NathanOliver", "link": "http://stackoverflow.com/users/4342498/nathanoliver", "profile_image": "https://i.stack.imgur.com/l3j88.jpg?s=128&g=1"}, "last_edit_date": 1477569583, "question_id": 40283673}