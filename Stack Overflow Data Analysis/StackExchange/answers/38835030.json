{"title": "&#39;is&#39; operator behaves unexpectedly with floats", "tags": ["python", "python-2.7", "python-3.x", "floating-point", "python-internals"], "creation_date": 1470676536, "score": 20, "body": "<p>This has to do with how <code>is</code> works. It checks for references instead of value. It returns <code>True</code> if either argument is assigned to the same object.</p>\n\n<p>In this case, they are different instances; <code>float(0)</code> and <code>float(0)</code> have the same value <code>==</code>, but are distinct entities as far as Python is concerned. CPython implementation also caches integers as singleton objects in this range -> <strong>[x | x \u2208 \u2124 \u2227 -5 \u2264 x \u2264 256 ]</strong>:</p>\n\n<pre><code>&gt;&gt;&gt; 0.0 is 0.0\nTrue\n&gt;&gt;&gt; float(0) is float(0)  # Not the same reference, unique instances.\nFalse\n</code></pre>\n\n<p>In this example we can demonstrate the integer <em>caching principle</em>:</p>\n\n<pre><code>&gt;&gt;&gt; a = 256\n&gt;&gt;&gt; b = 256\n&gt;&gt;&gt; a is b\nTrue\n&gt;&gt;&gt; a = 257\n&gt;&gt;&gt; b = 257\n&gt;&gt;&gt; a is b\nFalse\n</code></pre>\n\n<p>Now, if floats are passed to <code>float()</code>, the float literal is simply returned (<em>short-circuited</em>), as in the same reference is used, as there's no need to instantiate a new float from an existing float:</p>\n\n<pre><code>&gt;&gt;&gt; 0.0 is 0.0\nTrue\n&gt;&gt;&gt; float(0.0) is float(0.0)\nTrue\n</code></pre>\n\n<p>This can be demonstrated further by using <code>int()</code> also:</p>\n\n<pre><code>&gt;&gt;&gt; int(256.0) is int(256.0)  # Same reference, cached.\nTrue\n&gt;&gt;&gt; int(257.0) is int(257.0)  # Different references are returned, not cached.\nFalse\n&gt;&gt;&gt; 257 is 257  # Same reference.\nTrue\n&gt;&gt;&gt; 257.0 is 257.0  # Same reference. As @Martijn Pieters pointed out.\nTrue\n</code></pre>\n\n<p>However, the results of <code>is</code> are also dependant on the scope it is being executed in (<em>beyond the span of this question/explanation</em>), please refer to user: <strong>@<a href=\"http://stackoverflow.com/users/4952130/jim\">Jim</a></strong>'s fantastic explanation on <a href=\"http://stackoverflow.com/questions/34147515/is-operator-returns-different-results-on-integers/34147516#34147516\">code objects</a>. Even python's doc includes a section on this behavior:</p>\n\n<ul>\n<li><a href=\"https://docs.python.org/2/reference/expressions.html#id16\" rel=\"nofollow\">5.9 Comparisons</a></li>\n</ul>\n\n<blockquote>\n  <p><strong>[7]</strong> \n  Due to automatic garbage-collection, free lists, and the dynamic nature of descriptors, you may notice seemingly unusual behaviour in certain uses of the <code>is</code> operator, like those involving comparisons between instance methods, or constants. Check their documentation for more info.</p>\n</blockquote>\n", "last_activity_date": 1471100210, "answer_id": 38835030, "is_accepted": true, "owner": {"user_id": 6320655, "reputation": 2603, "user_type": "registered", "display_name": "mrdomoboto", "link": "http://stackoverflow.com/users/6320655/mrdomoboto", "profile_image": "https://i.stack.imgur.com/TRGwD.png?s=128&g=1"}, "last_edit_date": 1471100210, "question_id": 38834770}