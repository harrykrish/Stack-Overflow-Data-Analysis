{"title": "Spring Data REST: projection representation of single resource", "tags": ["spring", "rest", "spring-data", "spring-data-rest", "spring-hateoas"], "creation_date": 1477651712, "score": 0, "body": "<p>I was able to create a <code>ResourceProcessor</code> class which applies projections on any resource as suggested in <a href=\"https://jira.spring.io/browse/DATAREST-428\" rel=\"nofollow\">DATAREST-428</a>. It works the following way: if projection parameter is specified in URL - the specified projection will be applied, if not - projection with name default will be returned, applied first found projection will be applied. </p>\n\n<pre><code>/**\n * Resource processor for all resources which applies projection for single resource. By default, projections\n * are not\n * applied when working with single resource, e.g. http://127.0.0.1:8080/users/580793f642d54436e921f6ca. See\n * related issue &lt;a href=\"https://jira.spring.io/browse/DATAREST-428\"&gt;DATAREST-428&lt;/a&gt;\n */\n@Component\npublic class ProjectingProcessor implements ResourceProcessor&lt;Resource&lt;Object&gt;&gt; {\n\n    private static final String PROJECTION_PARAMETER = \"projection\";\n\n    private final ProjectionFactory projectionFactory;\n\n    private final RepositoryRestConfiguration repositoryRestConfiguration;\n\n    private final HttpServletRequest request;\n\n    public ProjectingProcessor(@Autowired final RepositoryRestConfiguration repositoryRestConfiguration,\n                               @Autowired final ProjectionFactory projectionFactory,\n                               @Autowired final HttpServletRequest request) {\n        this.repositoryRestConfiguration = repositoryRestConfiguration;\n        this.projectionFactory = projectionFactory;\n        this.request = request;\n    }\n\n    @Override\n    public Resource&lt;Object&gt; process(final Resource&lt;Object&gt; resource) {\n        if (AopUtils.isAopProxy(resource.getContent())) {\n            return resource;\n        }\n\n        final Optional&lt;Class&lt;?&gt;&gt; projectionType = findProjectionType(resource.getContent());\n        if (projectionType.isPresent()) {\n            final Object projection = projectionFactory.createProjection(projectionType.get(), resource\n                    .getContent());\n            return new Resource&lt;&gt;(projection, resource.getLinks());\n        }\n\n        return resource;\n    }\n\n    private Optional&lt;Class&lt;?&gt;&gt; findProjectionType(final Object content) {\n        final String projectionParameter = request.getParameter(PROJECTION_PARAMETER);\n        final Map&lt;String, Class&lt;?&gt;&gt; projectionsForType = repositoryRestConfiguration.getProjectionConfiguration()\n                .getProjectionsFor(content.getClass());\n\n        if (!projectionsForType.isEmpty()) {\n            if (!StringUtils.isEmpty(projectionParameter)) {\n                // projection parameter specified\n                final Class&lt;?&gt; projectionClass = projectionsForType.get(projectionParameter);\n                if (projectionClass != null) {\n                    return Optional.of(projectionClass);\n                }\n            } else if (projectionsForType.containsKey(ProjectionName.DEFAULT)) {\n                // default projection exists\n                return Optional.of(projectionsForType.get(ProjectionName.DEFAULT));\n            }\n\n            // no projection parameter specified\n            return Optional.of(projectionsForType.values().iterator().next());\n        }\n\n        return Optional.empty();\n    }\n}\n</code></pre>\n", "last_activity_date": 1477754612, "answer_id": 40303490, "is_accepted": false, "owner": {"user_id": 1889928, "reputation": 1956, "user_type": "registered", "accept_rate": 90, "display_name": "Yuriy Yunikov", "link": "http://stackoverflow.com/users/1889928/yuriy-yunikov", "profile_image": "https://www.gravatar.com/avatar/c6b04157e65ab1a1e0e61d220d06341d?s=128&d=identicon&r=PG"}, "last_edit_date": 1477754612, "question_id": 40289665}