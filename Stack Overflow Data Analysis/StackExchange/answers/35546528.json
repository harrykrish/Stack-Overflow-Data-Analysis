{"title": "Is there a declarative way to transform Array to Dictionary?", "tags": ["swift", "declarative"], "creation_date": 1456119765, "score": 7, "body": "<p>Minus error checking, it looks pretty much like:</p>\n\n<pre><code>let foo = entries.map({ $0.componentsSeparatedByString(\"=\") })\n    .reduce([String:Int]()) { acc, comps in\n        var ret = acc\n        ret[comps[0]] = Int(comps[1])\n        return ret\n    }\n</code></pre>\n\n<p>Use map to turn the <code>[String]</code> into a split up <code>[[String]]</code> and then build the dictionary of <code>[String:Int]</code> from that using reduce.</p>\n\n<p>Or, by adding an extension to <code>Dictionary</code>:</p>\n\n<pre><code>extension Dictionary {\n    init(elements:[(Key, Value)]) {\n        self.init()\n        for (key, value) in elements {\n            updateValue(value, forKey: key)\n        }\n    }\n}\n</code></pre>\n\n<p>(Quite a useful extension btw, you can use it for a lot of map/filter operations on Dictionaries, really kind of a shame it doesn't exist by default)</p>\n\n<p>It becomes even simpler:</p>\n\n<pre><code>let dict = Dictionary(elements: entries\n    .map({ $0.componentsSeparatedByString(\"=\") })\n    .map({ ($0[0], Int($0[1])!)})\n)\n</code></pre>\n\n<p>Of course, you can also combine the two map calls, but I prefer to break up the individual transforms.</p>\n\n<p>If you want to add some error checking, <code>flatMap</code> can be used instead of <code>map</code>:</p>\n\n<pre><code>let dict2 = [String:Int](elements: entries\n    .map({ $0.componentsSeparatedByString(\"=\") })\n    .flatMap({\n        if $0.count == 2, let value = Int($0[1]) {\n            return ($0[0], value)\n        } else {\n            return nil\n        }})\n)\n</code></pre>\n\n<p>Again, if you want, you can obviously merge the <code>map</code> into the <code>flatMap</code> or split them for simplicity.</p>\n\n<pre><code>let dict2 = [String:Int](elements: entries.flatMap {\n    let parts = $0.componentsSeparatedByString(\"=\")\n    if parts.count == 2, let value = Int(parts[1]) {\n        return (parts[0], value)\n    } else {\n        return nil\n    }}\n)\n</code></pre>\n", "last_activity_date": 1477690594, "answer_id": 35546528, "is_accepted": true, "owner": {"user_id": 3203487, "reputation": 22313, "user_type": "registered", "accept_rate": 67, "display_name": "David Berry", "link": "http://stackoverflow.com/users/3203487/david-berry", "profile_image": "https://www.gravatar.com/avatar/642430374fe647174b3e8bc33cdfc049?s=128&d=identicon&r=PG&f=1"}, "last_edit_date": 1477690594, "question_id": 35536011}