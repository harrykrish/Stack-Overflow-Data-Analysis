{"body": "<p><strong>How do you think is it good approach or there is another way?</strong></p>\n\n<p>I think your second approach is correct but, if you want to intercept a certain event, for instance, reload data when it gets fetched, you don't want to auto-execute a particular function bound to that event every time.</p>\n\n<p>I had a similar problem recently, I needed to execute a function only when data was fetched by a <code>factory</code>. I hate using <code>$rootScope</code> for such things. I don't like using it because it makes the application messy and I also noticed side-effects on application's benchmarks. But as you know, using <code>$rootScope</code> events like <code>$broadcast</code> and <code>$on</code> is really a good thing.</p>\n\n<p>I found out a better way to realize such thing. Using <a href=\"https://github.com/postaljs/postal.js\" rel=\"nofollow\">Postal.js</a> you can create virtual buses on your application that are shared between the components you want. For instance, you can subscribe to a channel <code>reloadItems</code> with both <code>DataFactory</code> and <code>DataController</code> and you'll emit, only on that channel, that you fetched the items and intercept that message on your controller and execute the function bound to that event. After that, if you wish, you can unsubscribe from that channel and free that bus. You can share a particular bus with n different modules.</p>\n\n<p>I noticed that using this library increases overall speed of my application since I'm not attaching anything to <code>$rootScope</code>.</p>\n\n<p>That's an example of usage</p>\n\n<pre><code>// . . . Cool stuff\n//Factory\n$scope.$bus.publish({\n                  channel : 'reloadItems',\n                  topic   : 'reloadItems'\n                  data    : items\n);\n\n// . . . Cool Stuff also\n//Controller\n$scope.$bus.subscribe({\n  channel  : 'reloadItems',\n  topic    : 'reloadItems',\n  callback : function () {\n    reloadItems();\n  }\n});\n</code></pre>\n\n<p>I really suggest you to give it a shot. You can find a interesting article on how to use it with Angular <a href=\"http://jonathancreamer.com/an-angular-event-bus-with-postal-js/\" rel=\"nofollow\">here</a>.</p>\n\n<p><strong>How do you think should I use this approach overall or use my first approach(call service method which make http request) when I don't need sharing data and use second approach(bind to variable) when I need sharing data?</strong></p>\n\n<p>I feel like you should not bind these things to a variable. Just use events to manage that. And, as I said before, your second approach is better and more modular.</p>\n\n<p><strong>Do you use mapping server models to client models or just use objects returned from server ?</strong></p>\n\n<p>Personally, I just use objects returned from the server. I like having a slim front-end and I make the most of parsing of data in the back-end, but, if I somehow need to work with data in the front-end, I never do it in controllers, I do that in Factories or Services.</p>\n\n<p>I hope I have been helpful.</p>\n", "tags": ["javascript", "angularjs"], "creation_date": 1472989806, "score": 1, "last_activity_date": 1472989806, "answer_id": 39316614, "is_accepted": true, "owner": {"user_id": 4684539, "reputation": 790, "user_type": "registered", "accept_rate": 100, "display_name": "AndreaM16", "link": "http://stackoverflow.com/users/4684539/andream16", "profile_image": "https://i.stack.imgur.com/JT5Np.png?s=128&g=1"}, "title": "Properly work with data in angular", "question_id": 39315778}