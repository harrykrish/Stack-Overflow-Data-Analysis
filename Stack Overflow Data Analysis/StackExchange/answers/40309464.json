{"body": "<p>I am adding this answer to help anyone else who is having problems with multi level routing, child routes, or auth guard.</p>\n\n<p>I use two template in my apps, </p>\n\n<pre><code>/templates/public.component.ts\n/templates/secure.component.ts\n</code></pre>\n\n<p>Here is the secure-layout.component.ts file</p>\n\n<pre><code>import { Component, OnInit }        from '@angular/core';\nimport { Router }                   from '@angular/router';\nimport { Auth }                     from './../services/auth.service';\n\n@Component({\n    providers: [ Auth ],\n    selector: 'app-dashboard',\n    templateUrl: './secure-layout.component.html'\n})\nexport class SecureLayoutComponent implements OnInit {\n\n    constructor( private router: Router, private auth: Auth ) { }\n\n    ngOnInit(): void { }\n}\n</code></pre>\n\n<p>Here is the public-layout.component.ts file</p>\n\n<pre><code>import { Component, OnInit }    from '@angular/core';\nimport { Router }               from '@angular/router';\nimport { Auth }                 from './../services/auth.service';\n\n@Component({\n    providers: [ Auth ],\n    selector: 'app-dashboard',\n    templateUrl: './public-layout.component.html'\n})\nexport class PublicLayoutComponent implements OnInit {\n\n    constructor( private router: Router, private auth: Auth ) { }\n\n    ngOnInit(): void { }\n}\n</code></pre>\n\n<p>This way I can add guard to the secure template redirecting any unauthorized traffic back to the public template. So from the\n<code>/app.routing.ts</code> file I creates routes for the layouts then inside of the components I create I create child routes which become child routes to the respective template. </p>\n\n<p>app.routing.ts</p>\n\n<pre><code>import { Routes, RouterModule }     from \"@angular/router\";\n\nimport {Guard}                      from \"./services/guard.service\";\n\n//Layouts\nimport { PublicLayoutComponent }    from './layouts/public-layout.component';\nimport { SecureLayoutComponent }    from './layouts/secure-layout.component';\n\nimport { STREAM_ROUTES }            from \"./stream/stream.routes\";\nimport { PROFILE_ROUTES }           from \"./profile/profile.routes\";\n\nconst APP_ROUTES: Routes = [\n    { path: '', redirectTo: '/stream', pathMatch: 'full', },\n    { path: '', component: PublicLayoutComponent, data: { title: 'Public Views' }, children: STREAM_ROUTES },\n    { path: '', component: SecureLayoutComponent, canActivate: [Guard], data: { title: 'Secure Views' }, children: PROFILE_ROUTES }\n];\n\n\n\nexport const routing = RouterModule.forRoot(APP_ROUTES);\n</code></pre>\n\n<p>/stream/stream.routes.ts</p>\n\n<pre><code>import { Component, OnInit } from '@angular/core';\n\n@Component({\n  templateUrl: './stream.component.html',\n})\n\nexport class StreamComponent {\n\n  constructor() { }\n\n}\n</code></pre>\n\n<p>/profile/profile.routes.ts</p>\n\n<pre><code>import { Routes } from \"@angular/router\";\n\nimport { ProfileComponent }   from './profile.component';\n\nexport const PROFILE_ROUTES: Routes = [\n    { path: '', redirectTo: 'profile', pathMatch: 'full' },\n    { path: 'profile', component: ProfileComponent }\n];\n</code></pre>\n\n<p>In this example stream is where I keep my public views and profile is where all of my secure views will be. So if I wanted to create a new public view I would go into stream and create a new route then create the html file as well as component.ts file. </p>\n\n<p>I hope this is helpful. I think this is a very nice way to handle routing for any app.</p>\n", "tags": ["angular2", "typescript", "mean-stack"], "creation_date": 1477672595, "score": 0, "last_activity_date": 1477672595, "answer_id": 40309464, "is_accepted": false, "owner": {"user_id": 2218253, "reputation": 1837, "user_type": "registered", "accept_rate": 83, "display_name": "wuno", "link": "http://stackoverflow.com/users/2218253/wuno", "profile_image": "https://www.gravatar.com/avatar/4764f26a78b60aeed3f2e83aa3a4e788?s=128&d=identicon&r=PG&f=1"}, "title": "Angular 2 Routing Not Finding Routes", "question_id": 40295834}