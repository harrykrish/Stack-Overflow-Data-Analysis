{"title": "Angular nested Promise shows an error", "tags": ["angularjs", "api", "http", "nested", "promise"], "creation_date": 1477694745, "score": 0, "body": "<p>Two main things :</p>\n\n<ul>\n<li>there's no attempt to aggregate multiple promises generated in a loop.</li>\n<li>the <code>if (propertyMarkers.length &gt; 0) {...} else {...}</code> is too deeply nested.</li>\n</ul>\n\n<p>Minor :</p>\n\n<ul>\n<li>the inner iteration can break as soon as 'parking' is found. If it continued and further 'parking' was found, then duplicate markers would be created.</li>\n</ul>\n\n\n\n<pre><code>$scope.viewPropertyList = function(latlong) {\n    $scope.locationError = false;\n    var latlongArray = latlog.split('::');\n    var searchLat_scope = latlongArray[0];\n    var searchLon_scope = latlongArray[1];\n\n    if (searchLat_scope &amp;&amp; searchLon_scope) {\n        Property.getAllProperties({\n            dest: 'property',\n            apikey: API_KEY,\n            limit: 10,\n            lat: encodeURIComponent(searchLat_scope),\n            lon: encodeURIComponent(searchLon_scope)\n        }).$promise.then(function(success) {\n            var propertyMarkers = [];\n            $scope.dbMarkers = 0;\n\n            // create an array of promises by mapping the array `success.property`.\n            var promises = success.property.map(function(prop) {\n                return Property.getProperty({\n                    dest: 'property',\n                    propertyId: prop.name,\n                    apikey: API_KEY\n                }).$promise.then(function(propertyData) {\n                    for (var j=0, k=propertyData.services.length; j&lt;k; j++) {\n                        if (propertyData.services[j].name === 'parking') {\n                            propertyMarkers.push({\n                                'propertyName': prop.propertyName,\n                                'telephone': prop.telephone,\n                                'postcode': prop.address.postcode,\n                                'city': prop.address.city,\n                                'county': prop.address.county,\n                                'addressLine1': prop.address.addressLine1\n                            });\n                            break; // 'parking' is found - no point iterating further\n                        }\n                    }\n                });\n            });\n\n            /* ******** */\n            // Aggregate `promises`\n            $q.all(promises).then(function() {\n                // This block is now un-nested from its original position, \n                // and will execute when all `promises` have resolved.\n                if (propertyMarkers.length &gt; 0) {\n                    $scope.dbMarkers = propertyMarkers;\n                    $scope.selectedLat = searchLat_scope;\n                    $scope.selectedlog = searchLon_scope;\n                } else {\n                    $scope.locationErr = true;\n                    $scope.errorMsg = 'No parking found';\n                }\n            });\n            /* ******** */\n\n        }).catch(function(error) {\n            $scope.locationErr = true;\n            $scope.errorMsg = 'Something went wrong, please try again';\n        });\n    } else {\n        $scope.locationErr = true;\n        $scope.errorMsg = 'Problem with lat/lng data';\n    }\n}\n</code></pre>\n\n<p>Notes :</p>\n\n<ul>\n<li>that the outer iteration is now coded as <code>success.property.map()</code>, which returns <code>promises</code> and avoids the need for an IIFE.</li>\n<li>Extra error handling added</li>\n</ul>\n", "last_activity_date": 1477695051, "answer_id": 40314188, "is_accepted": true, "owner": {"user_id": 3478010, "reputation": 8721, "user_type": "registered", "display_name": "Roamer-1888", "link": "http://stackoverflow.com/users/3478010/roamer-1888", "profile_image": "https://i.stack.imgur.com/y4DTM.png?s=128&g=1"}, "last_edit_date": 1477695051, "question_id": 40257447}