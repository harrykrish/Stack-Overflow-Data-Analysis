{"title": "C# Recursion Duplicate Id", "tags": ["c#", ".net", "recursion", "data-structures", "tree"], "creation_date": 1477634703, "score": 1, "body": "<p>You're passing the <code>nodeId</code> by value, so here's what happens:</p>\n\n<pre><code>Child1: nodeId = 0\n    Grandchild1_1: nodeId = 1\n    Grandchild1_2: nodeId = 2\nChild2: nodeId = 1\n    Grandchild2_1: nodeId = 2\n    Grandchild2_2: nodeId = 3\n...\n</code></pre>\n\n<p>If you pass it by reference, all the recursion calls can increase the same value, producing this:</p>\n\n<pre><code>Child1: nodeId = 0\n    Grandchild1_1: nodeId = 1\n    Grandchild1_2: nodeId = 2\nChild2: nodeId = 3\n    Grandchild2_1: nodeId = 4\n    Grandchild2_2: nodeId = 5\n...\n</code></pre>\n\n<hr>\n\n<p>Basically, by passing as value, you are creating a new copy of the <code>nodeId</code> for each child. Once you return from the lower-level recursive call, the higher-level one can't see any changes to the <code>nodeId</code> because all changes were made to the copy.</p>\n\n<p>Alternative to using <code>ref</code> is returning the last node count from the function. So here is the simplified idea of your two alternatives.</p>\n\n<p>References:</p>\n\n<pre><code>private void RecursiveCallWithRefs (Node current, ref int nodeId)\n{\n    foreach (var child in current.Children)\n    {\n        child.FillOutContents(nodeId);\n        ++nodeId;\n        RecursiveCallWithRefs(child, ref nodeId);\n    }\n}\n</code></pre>\n\n<p>Return values:</p>\n\n<pre><code>private int RecursiveCallWithReturns (Node current, int nodeId)\n{\n    foreach (var child in current.Children)\n    {\n        child.FillOutContents(nodeId);\n        nodeId = RecursiveCallWithReturns(child, nodeId + 1);\n    }\n\n    return nodeId;\n}\n</code></pre>\n\n<hr>\n\n<p>Of course, if I were you, I'd wrap this in a more abstract call:</p>\n\n<pre><code>private void FillOutNodesWithRefs (Node startingNode)\n{\n    int startingId = 0;\n    RecursiveCallWithRefs(startingNode, ref startingId);\n}\n\nprivate void FillOutNodesWithReturns (Node startingNode)\n{\n    RecursiveCallWithReturns(startingNode, 0);\n}\n</code></pre>\n", "last_activity_date": 1477635927, "answer_id": 40298967, "is_accepted": false, "owner": {"user_id": 4247453, "reputation": 170, "user_type": "registered", "accept_rate": 60, "display_name": "relatively_random", "link": "http://stackoverflow.com/users/4247453/relatively-random", "profile_image": "https://www.gravatar.com/avatar/7a1c7a7acd5e7be626b72746196af107?s=128&d=identicon&r=PG&f=1"}, "last_edit_date": 1477635927, "question_id": 40296645}