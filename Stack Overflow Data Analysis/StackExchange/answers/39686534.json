{"title": "How to design php class with properties that can only be set once", "tags": ["php", "oop", "inheritance", "abstract-class", "subclass"], "creation_date": 1474804656, "score": 3, "body": "<p>Declare the property as private and set it via a protected setter. In this setter you can do your control</p>\n\n<pre><code>abstract class YourClass {\n   private $myProperty;\n\n   protected function setMyProperty($value) {\n        if(is_null($this-&gt;myProperty)) {\n             $this-&gt;myProperty = $value;\n        }else {\n             throw new Exception(\"You can set this property only once\");\n        }\n   }\n\n   protected function getMyProperty() {\n          return $this-&gt;myProperty;\n   }\n}\n</code></pre>\n\n<p>In order to fetch the property you need also a protected getter (or public if you need to have access from external).</p>\n\n<p>Another point of view:</p>\n\n<p>There is a common rule in OOP: <a href=\"https://en.wikipedia.org/wiki/Composition_over_inheritance\" rel=\"nofollow\">prefer composition over inheritance</a></p>\n\n<p>Try to think a different approach: if you need a set of immutable properties, you can encapsulate them in an object, then use this object as component.</p>\n\n<pre><code>class MyClass {\n    /**\n     * @var MyComponent\n     */\n    protected $component;\n\n    public function __construct($property) {\n        $this-&gt;setComponent(new MyComponent($property));\n    }\n\n    protected function setComponent(MyComponent $myComponentInstance) {\n        $this-&gt;component = $myComponentInstance;\n    }\n\n    public function doSomething() {\n        echo $this-&gt;component-&gt;getMyProperty();\n    }\n}\n\nclass MyComponent {\n    private $myProperty;\n\n    public function __construct($property) {\n        $this-&gt;myProperty = $property;\n    }\n    public function getMyProperty() {\n        return $this-&gt;myProperty;\n    }\n\n}\n\n$myClass = new MyClass(\"Hello World\");\n\n$myClass-&gt;doSomething();\n</code></pre>\n\n<p>EDIT:</p>\n\n<p>Reading your edit, I think you want this:</p>\n\n<pre><code>abstract class MyAbstractClass {\n    const FOO = 1;\n\n    public function getFoo() {\n        // hint: use \"static\" instead of \"self\"\n        return static::FOO;\n    }\n}\n\nclass MyClass extends MyAbstractClass{\n    // override\n    const FOO = 2;\n}\n\n$myClass = new MyClass();\n\necho $myClass-&gt;getFoo(); // 2\n</code></pre>\n", "last_activity_date": 1474901027, "answer_id": 39686534, "is_accepted": false, "owner": {"user_id": 1049668, "reputation": 9400, "user_type": "registered", "accept_rate": 100, "display_name": "chumkiu", "link": "http://stackoverflow.com/users/1049668/chumkiu", "profile_image": "https://www.gravatar.com/avatar/dc33041c6620f995ea4900d41f1b9361?s=128&d=identicon&r=PG"}, "last_edit_date": 1474901027, "question_id": 39686401}