{"title": "Template class and nested class C++", "tags": ["c++", "templates", "inner-classes"], "creation_date": 1474985593, "score": 3, "body": "<p>Your design seems a bit overcomplicated. I think the reason this is so is perhaps you were designing it as you went along. Sometimes it helps to sit down and think about these things first, draw boxes and lines on a whiteboard if you have to.</p>\n\n<p>In any case, this isn't a direct answer to your question, it's a suggestion for an alternative based on what I'm <em>guessing</em> you are trying to do.</p>\n\n<p>It seems to me that you're trying to implement some generic keyboard input handler and tie it in to your game. It's possible that I'm entirely wrong about this, but if not, consider something like this instead. First, a generic interface for things that receive keyboard events. It need not be a template, this isn't really a good use-case for templates:</p>\n\n<pre><code>class KeyboardEventHandler {\npublic:\n    enum Direction { Left, Right, Up, Down };\n    virtual ~KeyboardEventHandler () { }\n    virtual void onDirectionKey (Direction d) = 0;\n};\n</code></pre>\n\n<p>Now your <code>SnakeGame</code>, which handles keyboard events, can inherit that and implement its own <code>SnakeGame</code>-specific logic:</p>\n\n<pre><code>class SnakeGame : public KeyboardEventHandler {\npublic:\n    void onDirectionKey (Direction d) {\n        switch (d) {\n        case Up: ...\n        case Down: ...\n        case Left: ...\n        case Right: ...\n        }\n    }\n};\n</code></pre>\n\n<p>And then whatever bit of code you have that is actually processing keyboard events and driving all of this can just work with a <code>KeyboardEventHandler *</code>, which could be a <code>SnakeGame</code>, or could be anything else you decide to use it for in the future.</p>\n\n<p>That's just one possibility for organization. For example, you could structure it like this instead, breaking out the <code>KeyboardEvent</code>, which could simplify future additions:</p>\n\n<pre><code>class KeyboardEvent {\npublic:\n    enum Direction { Left, Right, Up, Down };\n    Direction getDirection () { ... } // or whatever\n};\n\nclass KeyboardEventHandler {\npublic:\n    virtual ~KeyboardEventHandler () { }\n    virtual void onEvent (KeyboardEvent &amp;event) = 0;\n};\n</code></pre>\n\n<p>With <code>SnakeGame</code> as:</p>\n\n<pre><code>class SnakeGame : public KeyboardEventHandler {\npublic:\n    void onEvent (KeyboardEvent &amp;event) {\n        ...\n    }\n};\n</code></pre>\n\n<p>You could name that stuff something else besides <code>Direction</code> / <code>onDirectionKey</code> if you want, I picked that from your example but just make it something semantically appropriate that is also convenient (e.g. if you plan on expanding it to include more than just the arrows). But whatever, that's beside the point.</p>\n\n<p>There are also 10 zillion other ways to skin this cat but the important take-home point is: <em>If you're trying to make some generic interface for something, you really can't make it rely on the specific details of what inherits it, otherwise you're defeating the purpose of making it general to begin with.</em> In that case, either it's not a good case for generic bases / inheritance, or you've just botched the design and need to sit back and rethink.</p>\n\n<p>Remember: Your goal isn't to add as many classes and stuff as possible to your code; you're not going for like, an inheritance high score. Your goal is to keep your code clean, readable, maintainable, correct, possibly reusable, and to make your work easier on yourself. These are tools, don't just use them because you have them, instead use them when you need them to make your life easier.</p>\n\n<p><strong>However, all that said, this is still overkill for your specific application, although it is an interesting exercise.</strong> To be honest, in your specific case, I'd just chuck all the inheritance and such altogether and do something like:</p>\n\n<pre><code>class SnakeGame {\npublic:\n    void handleKeyPress (char c) {\n        // ... do the right thing here\n    }\n}\n</code></pre>\n\n<p>And be done with it.</p>\n", "last_activity_date": 1474986059, "answer_id": 39727018, "is_accepted": false, "owner": {"user_id": 616460, "reputation": 23170, "user_type": "registered", "accept_rate": 96, "display_name": "Jason C", "link": "http://stackoverflow.com/users/616460/jason-c", "profile_image": "https://i.stack.imgur.com/Yiloe.png?s=128&g=1"}, "last_edit_date": 1474986059, "question_id": 39726049}