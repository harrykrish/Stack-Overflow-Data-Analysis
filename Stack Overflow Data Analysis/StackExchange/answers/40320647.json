{"body": "<p>The tree isn't an object in itself; you just navigate it via the relationships between tokens. That's why the docs talk about navigating the tree, but not 'getting' it.</p>\n\n<p>First, let's parse some text to get a <a href=\"https://spacy.io/docs/#doc\" rel=\"nofollow\"><code>Doc</code></a> object:</p>\n\n<pre><code>&gt;&gt;&gt; import spacy\n&gt;&gt;&gt; nlp = spacy.load('en')\n&gt;&gt;&gt; doc = nlp('First, I wrote some sentences. Then spaCy parsed them. Hooray!')\n</code></pre>\n\n<p><code>doc</code> is a <a href=\"https://spacy.io/docs/#doc-sequenceapi\" rel=\"nofollow\"><code>Sequence</code></a> of <a href=\"https://spacy.io/docs/#token\" rel=\"nofollow\"><code>Token</code></a> objects:</p>\n\n<pre><code>&gt;&gt;&gt; doc[0]\nFirst\n&gt;&gt;&gt; doc[1]\n,\n&gt;&gt;&gt; doc[2]\nI\n&gt;&gt;&gt; doc[3]\nwrote\n</code></pre>\n\n<p>But it doesn't have a single root token. We parsed a text made up of three sentences, so there are three distinct trees, each with their own root. If we want to start our parsing from the root of each sentence, it will help to get the sentences as distinct objects, first. Fortunately, <code>doc</code> exposes these to us via the <a href=\"https://spacy.io/docs/#doc-spans-sents\" rel=\"nofollow\"><code>.sents</code></a> property:</p>\n\n<pre><code>&gt;&gt;&gt; sentences = list(doc.sents)\n&gt;&gt;&gt; for sentence in sentences:\n...     print(sentence)\n... \nFirst, I wrote some sentences.\nThen spaCy parsed them.\nHooray!\n</code></pre>\n\n<p>Each of these sentences is a <a href=\"https://spacy.io/docs/#span\" rel=\"nofollow\"><code>Span</code></a> with a <code>.root</code> property pointing to its root token. Usually, the root token will be the main verb of the sentence (although this may not be true for unusual sentence structures, such as sentences without a verb):</p>\n\n<pre><code>&gt;&gt;&gt; for sentence in sentences:\n...     print(sentence.root)\n... \nwrote\nparsed\nHooray\n</code></pre>\n\n<p>With the root token found, we can navigate down the tree via the <code>.children</code> property of each token. For instance, let's find the subject and object of the verb in the first sentence. The <code>.dep_</code> property of each child token <a href=\"http://stackoverflow.com/q/40288323/1709587\">describes its relationship with its parent</a>; for instance a <code>dep_</code> of <code>'nsubj'</code> means that a token is the <em>nominal subject</em> of its parent.</p>\n\n<pre><code>&gt;&gt;&gt; root_token = sentences[0].root\n&gt;&gt;&gt; for child in root_token.children:\n...     if child.dep_ == 'nsubj':\n...         subj = child\n...     if child.dep_ == 'dobj':\n...         obj = child\n... \n&gt;&gt;&gt; subj\nI\n&gt;&gt;&gt; obj\nsentences\n</code></pre>\n\n<p>We can likewise keep going down the tree by viewing one of these token's children:</p>\n\n<pre><code>&gt;&gt;&gt; list(obj.children)\n[some]\n</code></pre>\n\n<p>Thus with the properties above, you can navigate the entire tree. If you want to visualise some dependency trees for example sentences to help you understand the structure, I recommend playing with <a href=\"https://demos.explosion.ai/displacy/\" rel=\"nofollow\">displaCy</a>.</p>\n", "tags": ["python", "spacy"], "creation_date": 1477754798, "score": 0, "last_activity_date": 1477754798, "answer_id": 40320647, "is_accepted": false, "owner": {"user_id": 1709587, "reputation": 24447, "user_type": "registered", "accept_rate": 66, "display_name": "Mark Amery", "link": "http://stackoverflow.com/users/1709587/mark-amery", "profile_image": "https://i.stack.imgur.com/frBtD.jpg?s=128&g=1"}, "title": "How to get the dependency tree with spaCy?", "question_id": 36610179}