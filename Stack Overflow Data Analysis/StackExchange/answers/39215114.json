{"title": "Subprocess.Popen vs .call: What is the correct way to call a C-executable from shell script using python where all 6 jobs can run in parallel", "tags": ["python-3.x", "subprocess"], "creation_date": 1472504388, "score": 2, "body": "<p>You tried to simulate multiprocessing with subprocess.Popen() which does not work like you want: the output is blocked after a while unless you consume it, for instance with <code>communicate()</code> (but this is blocking) or by reading the output, but with 6 concurrent handles in a loop, you are bound to get deadlocks.</p>\n\n<p>The best way is run the <code>subprocess.call</code> lines in separate threads.</p>\n\n<p>There are several ways to do it. Small simple example with locking:</p>\n\n<pre><code>import threading,time\n\nlock=threading.Lock()\ndef func1(a,b,c):\n    lock.acquire()\n    print(a,b,c)\n    lock.release()\n    time.sleep(10)\n\ntl=[]\nt = threading.Thread(target=func1,args=[1,2,3])\nt.start()\ntl.append(t)\nt=threading.Thread(target=func1,args=[4,5,6])\nt.start()\ntl.append(t)\n\n# wait for all threads to complete (if you want to wait, else\n# you can skip this loop)\n\nfor t in tl:\n    t.join()\n</code></pre>\n\n<p>I took the time to create an example more suitable to your needs:</p>\n\n<p>2 threads executing a command and getting the output, then printing it within a lock to avoid mixup. I have used <code>check_output</code> method for this. I'm using windows, and I list C and D drives in parallel.</p>\n\n<pre><code>import threading,time,subprocess\n\nlock=threading.Lock()\n\ndef func1(runrescompare,rescompare_dir):\n    resrun_proc = subprocess.check_output(runrescompare, shell=True, cwd=rescompare_dir, stderr=subprocess.PIPE, universal_newlines=True)\n    lock.acquire()\n    print(resrun_proc)\n    lock.release()\n\ntl=[]\nt=threading.Thread(target=func1,args=[\"ls\",\"C:/\"])\nt.start()\ntl.append(t)\nt=threading.Thread(target=func1,args=[\"ls\",\"D:/\"])\nt.start()\ntl.append(t)\n\n# wait for all threads to complete (if you want to wait, else\n# you can skip this loop)\n\nfor t in tl:\n    t.join()\n</code></pre>\n", "last_activity_date": 1472823133, "answer_id": 39215114, "is_accepted": true, "owner": {"user_id": 6451573, "reputation": 14599, "user_type": "registered", "accept_rate": 83, "display_name": "Jean-Fran&#231;ois Fabre", "link": "http://stackoverflow.com/users/6451573/jean-fran%c3%a7ois-fabre", "profile_image": "https://i.stack.imgur.com/zE16s.jpg?s=128&g=1"}, "last_edit_date": 1472823133, "question_id": 39214970}