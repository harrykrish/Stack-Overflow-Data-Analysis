{"title": "Extracting data from XML tag", "tags": ["xml", "perl"], "creation_date": 1476818051, "score": 1, "body": "<pre><code>$xml-&gt;{personReport}{person1}[1]\n</code></pre>\n\n<p>should be</p>\n\n<pre><code>$xml-&gt;{person}{person1}{personId}{content}\n</code></pre>\n\n<p>If you don't understand why, perhaps you shouldn't be using a module so <a href=\"http://stackoverflow.com/a/33273488/589924\">complex</a> that its author discourages its use.</p>\n\n<blockquote>\n  <p>STATUS OF THIS MODULE</p>\n  \n  <p>The use of this module in new code is discouraged. Other modules are available which provide more straightforward and consistent interfaces. In particular, XML::LibXML is highly recommended and XML::Twig is an excellent alternative.</p>\n</blockquote>\n\n<hr>\n\n<p>Finding the name of each person using XML::Simple:</p>\n\n<pre><code># Assumes each person element will have at least one personId child.\n# Assumes each personId element will have a personIdScheme attribute.\n\nfor my $person (values(%{ $xml-&gt;{person} })) {\n   my @data_nodes ref($person-&gt;{personIdScheme}) eq 'ARRAY'\n      ? @{ $person-&gt;{personIdScheme} }\n      : $person-&gt;{personIdScheme};\n\n   my ($name_data_node) = grep { $_-&gt;{personIdScheme} eq 'name' } @data_nodes;\n\n   my $name = $name_data_node-&gt;{content};\n   ...\n}\n</code></pre>\n\n<p>Finding the name of each person using XML::LibXML:</p>\n\n<pre><code>for my $person_node ($doc-&gt;findnodes('/personReport/person')) {\n   my $name = $doc-&gt;findvalue('personId[@personIdScheme=\"name of\"]', $person_node);\n   ...\n}\n</code></pre>\n", "last_activity_date": 1476822840, "answer_id": 40116252, "is_accepted": true, "owner": {"user_id": 589924, "reputation": 203816, "user_type": "registered", "accept_rate": 100, "display_name": "ikegami", "link": "http://stackoverflow.com/users/589924/ikegami", "profile_image": "https://www.gravatar.com/avatar/b2cf53d5a3d25f95c0db4e025aed4153?s=128&d=identicon&r=PG"}, "last_edit_date": 1476822840, "question_id": 40115746}