{"title": "Using 8-bit registers in x86-64 indexed addressing modes", "tags": ["x86", "x86-64"], "creation_date": 1475698680, "score": 2, "body": "<p>No, you cannot use 8-bit or 16-bit registers in addressing calculations in 64-bit mode, nor can you use 8-bit registers in 32-bit mode. You <em>can</em> use 16-bit registers in 32-bit mode, and 32-bit registers in 64-bit mode, via use of the <code>0x67</code> <em>address size prefix</em> byte. </p>\n\n<p><a href=\"http://wiki.osdev.org/X86-64_Instruction_Encoding#Operand-size_and_address-size_override_prefix\" rel=\"nofollow\">This table</a> summarizes well the various options for operand and address sizes. The general pattern is that the default address size is the same as the current mode (i.e., 32-bits in 32-bit mode, 64-bits in 64-bit mode)<sup>1</sup>, and then if the <code>0x67</code> prefix is included, the address size is changed to half the usual size (i.e., 16-bits in 32-bit mode, 32-bits in 64-bit mode).</p>\n\n<p>Here's an excerpt of the full table linked above showing 64-bit long-mode behavior only, for various values of the <code>REX.W</code>, <code>0x66</code> operand and <code>0x67</code> address size prefixes:</p>\n\n<pre><code>\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2566\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2566\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2566\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2566\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551 REX.W  \u2551 0x66 prefix \u2551 0x67 prefix \u2551 Operand size  \u2551 Address size \u2551\n\u2551        \u2551 (operand)   \u2551 (address)   \u2551 (footnote 2)  \u2551              \u2551\n\u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\n\u2551      0 \u2551 No          \u2551 No          \u2551 32-bit        \u2551 64-bit       \u2551\n\u2551      0 \u2551 No          \u2551 Yes         \u2551 32-bit        \u2551 32-bit       \u2551\n\u2551      0 \u2551 Yes         \u2551 No          \u2551 16-bit        \u2551 64-bit       \u2551\n\u2551      0 \u2551 Yes         \u2551 Yes         \u2551 16-bit        \u2551 32-bit       \u2551\n\u2551      1 \u2551 Ignored     \u2551 No          \u2551 64-bit        \u2551 64-bit       \u2551\n\u2551      1 \u2551 ignored     \u2551 Yes         \u2551 64-bit        \u2551 32-bit       \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n</code></pre>\n\n<hr>\n\n<p><sup>1</sup> That might seem obvious, but it's the opposite to the way <em>operand</em> sizes work in 64-bit mode: most default to 32-bits, even in 64-bit mode, and a <em>REX prefix</em> is needed to promote them to 64-bits. </p>\n\n<p><sup>2</sup> <a href=\"http://wiki.osdev.org/X86-64_Instruction_Encoding#Usage\" rel=\"nofollow\">Some instructions</a> default to 64-bit operand size without any <code>REX</code> prefix, notably <code>push</code>, <code>pop</code>, <code>call</code> and conditional jumps, and as Peter points out below, this leads to the odd situation where at least some of these instructions (<code>push</code> and <code>pop</code> included) can't be encoded to use 32-bit operands, but can use 16-bit operands (with the <code>0x66</code> prefix).</p>\n", "last_activity_date": 1475703565, "answer_id": 39882960, "is_accepted": true, "owner": {"user_id": 149138, "reputation": 6036, "user_type": "registered", "accept_rate": 67, "display_name": "BeeOnRope", "link": "http://stackoverflow.com/users/149138/beeonrope", "profile_image": "https://www.gravatar.com/avatar/cfd457233c8ebbab383475fc097442d9?s=128&d=identicon&r=PG"}, "last_edit_date": 1475703565, "question_id": 39173410}