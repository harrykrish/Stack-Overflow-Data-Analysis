{"title": "Apollo server + React Apollo pubSub not showing data", "tags": ["javascript", "graphql", "apollo-server", "react-apollo"], "creation_date": 1477607180, "score": 1, "body": "<p>Here a couple things to check. On my schema, it has some syntax I'm not seeing in yours at the moment. See the <code>: instant_message</code> after the query strings?</p>\n\n<pre><code>const typeDefinitions = [`\n\ntype instant_message {\n  id: Int\n  fromID: String\n  toID: String\n  msgText: String\n}\ntype Query {\n  instant_message(id: Int, fromID: String, toID: String, msgText: String): [instant_message]\n}\ntype Mutation {\n  createIM(\n    fromID: String!\n    toID: String!\n    msgText: String!\n  ): instant_message\n}\ntype Subscription {\n  # Subscription fires on every comment added\n  IMAdded(id: Int, fromID: String!, toID: String!): instant_message\n}\n\nschema {\n  query: Query,\n  mutation: Mutation\n  subscription: Subscription\n}\n\n`];\n</code></pre>\n\n<p>I've got some different syntax on the client as well:</p>\n\n<pre><code>subscribe(fromID, toID, updateQueryViaSubscription) {\n    const SUBSCRIPTION_QUERY = gql`\n      subscription getIMsViaSubscription($fromID: String!, $toID: String!){\n          IMAdded(fromID:$fromID, toID: $toID){\n            id,\n            fromID,\n            toID,\n            msgText\n          }\n        } \n`;\n    this.subscriptionObserver = this.props.client.subscribe({\n        query: SUBSCRIPTION_QUERY,\n        variables: { fromID: this.fromID, toID: this.toID },\n    }).subscribe({\n        next(data) {\n            const newMsag = data.IMAdded;\n            updateQueryViaSubscription((previousResult) =&gt; {\n                // if it's our own mutation, we might get the subscription result\n                // after the mutation result.\n                // if (isDuplicateIM(newComment, previousResult.entry.comments)) {\n                //     return previousResult;\n                // }\n                // update returns a new \"immutable\" list with the new comment\n                // added to the front.\n                return update(\n                    previousResult,\n                    {\n                        instant_message: {\n                            $push: [newMsag],\n                        },\n                    }\n                );\n            });\n        },\n        error(err) {\n            console.error('err', err); },\n    });\n}\n</code></pre>\n\n<p>Please check that and let me know if the updated code gets rid of that error yet.</p>\n\n<p><strong>UPDATE:</strong> Per our discussion on Slack, you found that you needed your executableSchema to be like this:</p>\n\n<pre><code>const executableSchema = makeExecutableSchema({\n    typeDefs: typeDefinitions,\n    resolvers: Resolvers,\n    connectors: Connectors,\n    logger: console,\n});\n\nexport default executableSchema;\n</code></pre>\n\n<p>Here's the resolver I'm using:</p>\n\n<pre><code>Subscription: {\n    IMAdded(IMThatWasAdded) {\n        var ret = IMThatWasAdded;\n        return ret;\n    }\n}\n</code></pre>\n", "last_activity_date": 1477672802, "answer_id": 40295170, "is_accepted": true, "owner": {"user_id": 364966, "reputation": 412, "user_type": "registered", "accept_rate": 63, "display_name": "VikR", "link": "http://stackoverflow.com/users/364966/vikr", "profile_image": "https://www.gravatar.com/avatar/1ea2b8fe02ce7ee34472972214a3bef9?s=128&d=identicon&r=PG"}, "last_edit_date": 1477672802, "question_id": 40295099}