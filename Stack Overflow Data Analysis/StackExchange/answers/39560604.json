{"title": "How can I compute statistics by decile groups in data.table", "tags": ["r", "data.table"], "creation_date": 1474219711, "score": 1, "body": "<p>I do this type of thing a lot, so I wrote a pretty flexible <a href=\"https://github.com/ben519/mltools/blob/master/R/bin_data.R\" rel=\"nofollow\">bin_data()</a> method for it in my un-CRAN'ed R package - <a href=\"https://github.com/ben519/mltools\" rel=\"nofollow\">mltools</a>. It's entirely <code>data.table</code> based and makes use of the new <a href=\"https://channel9.msdn.com/Events/useR-international-R-User-conference/useR2016/Efficient-in-memory-non-equi-joins-using-datatable\" rel=\"nofollow\">non-equi joins</a>.</p>\n\n<p>To answer your specific question, set Bin1 as a column in <code>DT</code>, then group by Bin1</p>\n\n<pre><code># First install my package from github (Or just copy the bin_data() method)\nlibrary(devtools)\ninstall_github(\"ben519/mltools\")\n\nDT[, Bin1 := bin_data(vals=a, bins=seq(.1, .9, .1), binType=\"quantile\")]\nDT[, list(mean(b)), keyby=Bin1]\n\n                                        Bin1          V1\n1:                                        NA -0.31359818\n2:   [-1.05265747329296, -0.613869230708978) -0.14103182\n3:  [-0.613869230708978, -0.375342019639661) -0.33474492\n4: [-0.375342019639661, -0.0767031289639095)  0.20827735\n5:  [-0.0767031289639095, 0.113909160788544)  0.14890251\n6:    [0.113909160788544, 0.377079930573521)  0.16685304\n7:    [0.377079930573521, 0.581217342522697)  0.07086979\n8:    [0.581217342522697, 0.771253599758546)  0.17950572\n9:      [0.771253599758546, 1.1810650775142] -0.04951607\n</code></pre>\n\n<hr>\n\n<h1>You can do other cool stuff too</h1>\n\n<p><strong>Make 10 equally-spaced bins by quantile</strong></p>\n\n<pre><code>DT[, Bin2 := bin_data(vals=a, bins=10, binType=\"quantile\")]\nDT[, list(mean(b)), keyby=Bin2]\n\n                                         Bin2          V1\n 1:     [-2.2146998871775, -1.05265747329296) -0.16938368\n 2:   [-1.05265747329296, -0.613869230708978) -0.14103182\n 3:  [-0.613869230708978, -0.375342019639661) -0.33474492\n 4: [-0.375342019639661, -0.0767031289639095)  0.20827735\n 5:  [-0.0767031289639095, 0.113909160788544)  0.14890251\n 6:    [0.113909160788544, 0.377079930573521)  0.16685304\n 7:    [0.377079930573521, 0.581217342522697)  0.07086979\n 8:    [0.581217342522697, 0.771253599758546)  0.17950572\n 9:      [0.771253599758546, 1.1810650775142) -0.04951607\n10:       [1.1810650775142, 2.40161776050478] -0.45781268\n</code></pre>\n\n<p><strong>Make the last boundary left-closed right-open</strong></p>\n\n<pre><code>DT[, Bin3 := bin_data(vals=a, bins=10, binType=\"quantile\", boundaryType=\"lcro)\")]  \nDT[, list(mean(b)), keyby=Bin2]\n\n 1:                                        NA  0.42510038\n 2:     [-2.2146998871775, -1.05265747329296) -0.16938368\n 3:   [-1.05265747329296, -0.613869230708978) -0.14103182\n 4:  [-0.613869230708978, -0.375342019639661) -0.33474492\n 5: [-0.375342019639661, -0.0767031289639095)  0.20827735\n 6:  [-0.0767031289639095, 0.113909160788544)  0.14890251\n 7:    [0.113909160788544, 0.377079930573521)  0.16685304\n 8:    [0.377079930573521, 0.581217342522697)  0.07086979\n 9:    [0.581217342522697, 0.771253599758546)  0.17950572\n10:      [0.771253599758546, 1.1810650775142) -0.04951607\n11:       [1.1810650775142, 2.40161776050478) -0.55591413\n</code></pre>\n\n<p><strong>Specify your own explicit bins (notice empty bins are returned)</strong></p>\n\n<pre><code>bin_data(dt=DT, binCol=\"a\", bins=seq(-5, 5, 1), returnDT=TRUE)\n\n          Bin         a           b\n  1: [-5, -4)        NA          NA\n  2: [-4, -3)        NA          NA\n  3: [-3, -2) -2.214700 -0.65069635\n  4: [-2, -1) -1.989352 -0.17955653\n  5: [-2, -1) -1.470752 -0.03763417\n ---                               \n100:   [1, 2)  1.586833 -1.20808279\n101:   [2, 3)  2.401618  0.42510038\n102:   [2, 3)  2.172612  0.20753834\n103:   [3, 4)        NA          NA\n104:   [4, 5]        NA          NA\n</code></pre>\n\n<p><strong>Use variable size bins</strong></p>\n\n<pre><code>bin_data(dt=DT, binCol=\"a\", bins=data.table(LB=c(-5, 0, 1), RB=c(0, 1, Inf)), returnDT=TRUE)\n\n          Bin            a           b\n  1:  [-5, 0) -0.626453811 -0.62036668\n  2:  [-5, 0) -0.835628612 -0.91092165\n  3:  [-5, 0) -0.820468384  1.76728727\n  4:  [-5, 0) -0.305388387  1.68217608\n  5:  [-5, 0) -0.621240581  1.43228224\n ---                               \n 95: [1, Inf]  2.172611670  0.20753834\n 96: [1, Inf]  1.178086997  0.21992480\n 97: [1, Inf]  1.063099837  1.46458731\n 98: [1, Inf]  1.207867806  0.40201178\n 99: [1, Inf]  1.160402616 -0.73174817\n100: [1, Inf]  1.586833455 -1.20808279\n          Bin            a           b\n</code></pre>\n", "last_activity_date": 1474220067, "answer_id": 39560604, "is_accepted": false, "owner": {"user_id": 2146894, "reputation": 3250, "user_type": "registered", "accept_rate": 81, "display_name": "Ben", "link": "http://stackoverflow.com/users/2146894/ben", "profile_image": "https://www.gravatar.com/avatar/1fe765256b6985ff92d0554dbcf021aa?s=128&d=identicon&r=PG"}, "last_edit_date": 1474220067, "question_id": 22568956}