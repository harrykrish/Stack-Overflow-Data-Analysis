{"title": "How to install a signed certificate (.pfx) from Comodo into a Visual Studio project", "tags": ["visual-studio", "digital-certificate"], "creation_date": 1477530443, "score": 0, "body": "<p>It's not too difficult, and requires a number of steps.</p>\n\n<p><strong>Solution:</strong> - After trolling through a lot of resources, and actually doing this successfully, below are steps that are required to install a .pfx certificate into a Visual Studio project:</p>\n\n<ol>\n<li>Firstly, you have to use Firefox when doing anything with Comodo.com.  (When speaking with Comodo tech support, if you used another browser other than Firefox, the response will be \"that is the problem.\")  </li>\n<li>If you already requested (purchased) a signed certificate from Comodo using another browser, then you need to log into Comodo using Firefox, and request a \"replace\" to the signed certificate they authorized. (they will then validate and bundle into a new .zip file for download).</li>\n<li>In the downloaded zip from Comodo, there will be four files, and the certificate you want is the one with all letters and numbers in the filename, with today's date on it.</li>\n<li>Once downloaded and unzipped, extract the .crt file (with only numbers and letters in the filename) to a work folder. </li>\n<li>Open Firefox-->Options-->Advanced-->Certificates</li>\n<li>Import the Comodo .crt file</li>\n<li>Select the Backup tab, and then specify a filename, and password (and save the password).  Using Backup in Firefox will save the private key with the certificate -- the private key happens to be the private key you requested the certificate with at Comodo via Firefox.  The saved file will be a .p12 file.</li>\n<li>Download the <a href=\"https://www.digicert.com/util/\" rel=\"nofollow\">DigiCert Certificate Utility for Windows</a></li>\n<li>Start DigiCert, Import the .p12 file, then export to .pfx.</li>\n<li>In Visual Studio (2015), go to Project Properties-->Signing, and (a) add the .pfx certificate <strong>first</strong> to the \"Sign the ClickOnce Manifests\" (top of tab), and then (b) <strong>second</strong> add the .pfx to the \"Sign the assembly\" (bottom of tab), and enter the password from Step 7.  (if you don't follow this order you won't be successful).</li>\n<li>You are now done, and your compiled assembly will be protected with a signed certificate.</li>\n</ol>\n\n<p>Note that if you are obfuscating your assembly, you will need to add a post-build command to use Windows signtools.exe, which resides in C:\\Program Files (x86)\\Windows Kits\\8.1\\bin\\x86 if you installed the SDK for Visual Studio.  Search on \"post-build signtools.exe\"  (Note there is a 32-bit and 64-bit signtools.exe in folders x86 and x64.  We have learned to use the 32-bit version, since we commonly compile to AnyCPU).</p>\n", "last_activity_date": 1477757019, "answer_id": 40274499, "is_accepted": false, "owner": {"user_id": 1493382, "reputation": 271, "user_type": "registered", "accept_rate": 34, "display_name": "wrtsvkrfm", "link": "http://stackoverflow.com/users/1493382/wrtsvkrfm", "profile_image": "https://www.gravatar.com/avatar/00869c5e4a0851d3d67993f9534a4310?s=128&d=identicon&r=PG&f=1"}, "last_edit_date": 1477757019, "question_id": 40274355}