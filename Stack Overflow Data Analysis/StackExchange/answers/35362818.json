{"title": "UICollectionView Set number of columns", "tags": ["ios", "objective-c", "xcode", "uicollectionview", "uicollectionviewcell"], "creation_date": 1455280547, "score": 4, "body": "<p>Instead of the flow layout, I prefer using custom layout for specific column number and row number. Because:</p>\n\n<ol>\n<li>It can be dragged horizontally if column number is very big.</li>\n<li>It is more acceptable logically because of using column and row.</li>\n</ol>\n\n<p>Example code:</p>\n\n<pre><code>func numberOfSectionsInCollectionView(collectionView: UICollectionView) -&gt; Int {\n    return 3 //row number\n}\nfunc collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -&gt; Int {\n    return 15 //each row have 15 columns\n}\nfunc collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -&gt; UICollectionViewCell {\n\n    let cell : CollectionViewCell = collectionView.dequeueReusableCellWithReuseIdentifier(dateCellIdentifier, forIndexPath: indexPath) as! CollectionViewCell\n\n    cell.dataLabel.text = String(format: \"S: %d, R: %d\", arguments: [indexPath.section, indexPath.row])\n\n    return cell\n}\n</code></pre>\n\n<p>Custom layout:</p>\n\n<pre><code>let cellHeight: CGFloat = 40\nlet cellWidth: CGFloat = 100\n\nclass CustomCollectionViewLayout: UICollectionViewLayout {\n    private var numberOfColumns: Int!\n    private var numberOfRows: Int!\n\n    // It is two dimension array of itemAttributes\n    private var itemAttributes = [[UICollectionViewLayoutAttributes]]()\n    // It is one dimension of itemAttributes\n    private var cache = [UICollectionViewLayoutAttributes]()\n\noverride func prepareLayout() {\n    if self.cache.isEmpty {\n\n        self.numberOfColumns = self.collectionView?.numberOfItemsInSection(0)\n        self.numberOfRows = self.collectionView?.numberOfSections()\n\n        // Dynamically change cellWidth if total cell width is smaller than whole bounds\n        /* if (self.collectionView?.bounds.size.width)!/CGFloat(self.numberOfColumns) &gt; cellWidth {\n                self.cellWidth = (self.collectionView?.bounds.size.width)!/CGFloat(self.numberOfColumns)\n            }\n        */\n        for row in 0..&lt;self.numberOfRows {\n            var row_temp = [UICollectionViewLayoutAttributes]()\n            for column in 0..&lt;self.numberOfColumns {\n                let indexPath = NSIndexPath(forItem: column, inSection: row)\n\n                let attributes = UICollectionViewLayoutAttributes(forCellWithIndexPath: indexPath)\n                attributes.frame = CGRectIntegral(CGRectMake(cellWidth*CGFloat(column), cellHeight*CGFloat(row), cellWidth, cellHeight))\n\n                row_temp.append(attributes)\n\n                self.cache.append(attributes)\n            }\n            self.itemAttributes.append(row_temp)\n        }\n    }\n}\n\noverride func collectionViewContentSize() -&gt; CGSize {\n    return CGSize(width: CGFloat(self.numberOfColumns)*cellWidth, height: CGFloat(self.numberOfRows)*cellHeight)\n}\n\noverride func layoutAttributesForElementsInRect(rect: CGRect) -&gt; [UICollectionViewLayoutAttributes]? {\n\n    var layoutAttributes = [UICollectionViewLayoutAttributes]()\n\n    for attributes in cache {\n        if CGRectIntersectsRect(attributes.frame, rect) {\n            layoutAttributes.append(attributes)\n        }\n    }\n    return layoutAttributes\n}\n}\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/z0Vzt.png\" rel=\"nofollow\"><img src=\"https://i.stack.imgur.com/z0Vzt.png\" alt=\"enter image description here\"></a></p>\n", "last_activity_date": 1477318540, "answer_id": 35362818, "is_accepted": false, "owner": {"user_id": 833885, "reputation": 1651, "user_type": "registered", "accept_rate": 100, "display_name": "brianLikeApple", "link": "http://stackoverflow.com/users/833885/brianlikeapple", "profile_image": "https://www.gravatar.com/avatar/36088feaa24c5a8989fa5fdc68383787?s=128&d=identicon&r=PG"}, "last_edit_date": 1477318540, "question_id": 14674986}