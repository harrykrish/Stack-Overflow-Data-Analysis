{"body": "<p>Since getting done ultimately trumps maintaining consistency, I went ahead and restructured the delegate implementation. The routine listening on the serial port now looks like this:</p>\n\n<pre><code> Public Delegate Sub DataReceived(ByVal MsgString As String)\nPublic Delegate Sub EventHandler(param As String)\n</code></pre>\n\n<p>(EventHandler is used elsewhere)</p>\n\n<p>And:</p>\n\n<pre><code>   Private Sub ReadPort()\n\n    Dim MessagePump As DataReceived\n    MessagePump = AddressOf Serial_Port_UI.ReceiveFromServer\n\n    While _keepReading\n        If _serialPort.IsOpen Then\n            Dim readBuffer As Byte() = New Byte(_serialPort.ReadBufferSize) {}\n            Try\n                ' If there are bytes available on the serial port,\n                ' Read returns up to \"count\" bytes, but will not block (wait)\n                ' for the remaining bytes. If there are no bytes available\n                ' on the serial port, Read will block until at least one byte\n                ' is available on the port, up until the ReadTimeout milliseconds\n                ' have elapsed, at which time a TimeoutException will be thrown.\n                Dim count As Integer = _serialPort.Read(readBuffer, 0, _serialPort.ReadBufferSize)\n                Dim SerialIn As [String] = System.Text.Encoding.ASCII.GetString(readBuffer, 0, count)\n                MessagePump.Invoke(SerialIn)\n                'DataReceived(SerialIn)\n\n            Catch generatedExceptionName As TimeoutException\n            Catch ex As Exception\n                MsgBox(ex.Message)\n            End Try\n        Else\n            Dim waitTime As New TimeSpan(0, 0, 0, 0, 50)\n            Thread.Sleep(waitTime)\n        End If\n    End While\nEnd Sub\n</code></pre>\n\n<p>This all produces the desired strings into the target Form/class like this:</p>\n\n<pre><code>   Public Delegate Sub StringDelegate(ByVal strData As String)\n\nPublic Sub ReceiveFromServer(ByVal strDataIn As String)\n\n    If Me.InvokeRequired() Then\n        ' InvokeRequired: We're running on the background thread. Invoke the delegate.\n        Me.Invoke(New StringDelegate(AddressOf ReceiveFromServer), New Object() {strDataIn})\n    Else\n        Dim i As Integer = 0\n    End If\n\nEnd Sub\n</code></pre>\n\n<p>Thanks Hans for the help.</p>\n", "tags": ["vb.net", "multithreading"], "creation_date": 1477688092, "score": 0, "last_activity_date": 1477688092, "answer_id": 40313080, "is_accepted": false, "owner": {"user_id": 7077538, "reputation": 1, "user_type": "registered", "display_name": "jbmckim", "link": "http://stackoverflow.com/users/7077538/jbmckim", "profile_image": "https://www.gravatar.com/avatar/ee26e290711280d33f9244e699a5c378?s=128&d=identicon&r=PG&f=1"}, "title": "vb.net, Termie and threading and &quot;Object reference not set to an instance of an object&quot;", "question_id": 40273145}