{"title": "create a variable of derived class to refer an object of base class", "tags": ["c#", "inheritance", "new-operator"], "creation_date": 1477458406, "score": 2, "body": "<p>This does not work without a cast :</p>\n\n<pre><code>Bar test = (Bar)new Foo();\n</code></pre>\n\n<p>Other way around it is working:</p>\n\n<pre><code>Foo test = new Bar();\n</code></pre>\n\n<p>It is because a <code>Bar</code> can have things that a <code>Foo</code> doesn't and it would result into an unexpected behavior if you try to access these on the <code>Bar</code> object created from a <code>Foo</code>.</p>\n\n<p>To be a little more explicit, you can ask yourself a question to understand better casting:</p>\n\n<p>Is <code>Foo</code> a <code>Bar</code>? If yes, then the cast from <code>Foo</code> to <code>Bar</code> will work like in the following example:</p>\n\n<pre><code>Foo actuallyBar = new Bar();\n\nBar = (Bar)actuallyBar; //this will succeed because actuallyBar is actually a Bar\n</code></pre>\n\n<p>The other way of casting will always work because everytime you are asking if the Bar is a Foo the answer will be yes!</p>\n\n<pre><code>Foo foo = new Bar();//didn't even had to use explicit cast, because the compiler knows that Bar is a Foo\n</code></pre>\n", "last_activity_date": 1477726407, "answer_id": 40254130, "is_accepted": true, "owner": {"user_id": 6357360, "reputation": 1810, "user_type": "registered", "accept_rate": 93, "display_name": "meJustAndrew", "link": "http://stackoverflow.com/users/6357360/mejustandrew", "profile_image": "https://www.gravatar.com/avatar/aed7990245e27bcf868d514f3ad014ff?s=128&d=identicon&r=PG&f=1"}, "last_edit_date": 1477726407, "question_id": 40254105}