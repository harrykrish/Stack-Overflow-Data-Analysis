{"body": "<p>Yeah. Spring Boot should load it by default if <code>orm.xml</code> exists in  <code>META-INF</code> directory in result jar.<br>\nOtherwise it's possible to load it manually by creating custom <code>LocalContainerEntityManagerFactoryBean</code> as follows below:</p>\n\n<p>Application.properties</p>\n\n<pre><code>spring.jpa.orm=orm.xml\n</code></pre>\n\n<p>DBConfig.java (In case you use Hibernate as a persistence provider)</p>\n\n<pre><code>@Configuration\npublic class DBConfig extends HibernateJpaAutoConfiguration {\n\n@Value(\"${spring.jpa.orm}\")\nprivate String orm;\n\n@SuppressWarnings(\"SpringJavaAutowiringInspection\")\npublic DBConfig(DataSource dataSource, JpaProperties jpaProperties, ObjectProvider&lt;JtaTransactionManager&gt; jtaTransactionManagerProvider) {\n    super(dataSource, jpaProperties, jtaTransactionManagerProvider);\n}\n\n@Override\n@Bean\npublic LocalContainerEntityManagerFactoryBean entityManagerFactory(\n        EntityManagerFactoryBuilder factoryBuilder)\n{\n    final LocalContainerEntityManagerFactoryBean entityManagerFactoryBean = super.entityManagerFactory(factoryBuilder);\n    entityManagerFactoryBean.setMappingResources(orm);\n    return entityManagerFactoryBean;\n}\n\n}\n</code></pre>\n\n<p>I found it quite usefull for me to move all mappings to external xml-files while entities stay clean. </p>\n", "tags": ["java", "spring", "jpa", "orm", "spring-data-jpa"], "creation_date": 1476544186, "score": 0, "last_activity_date": 1476544186, "answer_id": 40060677, "is_accepted": false, "owner": {"user_id": 7022735, "reputation": 13, "user_type": "registered", "display_name": "rvit34", "link": "http://stackoverflow.com/users/7022735/rvit34", "profile_image": "https://i.stack.imgur.com/DZnj9.jpg?s=128&g=1"}, "title": "Spring Boot Load orm.xml", "question_id": 32062828}