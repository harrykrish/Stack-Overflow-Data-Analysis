{"title": "In ConcurrentHashMap how the segments are defined", "tags": ["java", "multithreading", "concurrency", "concurrenthashmap"], "creation_date": 1476407724, "score": 0, "body": "<p>Think of implementations of <code>ConcurrentHashMap</code> which use segments (not all do) as basically being a two-level hash table. Given a key, <code>K</code>, and the hashcode for the key <code>h = K.hashCode()</code>, you first hash into your array of 16 segments using <code>h</code>, just like a normal hash map (e.g., by taking <code>h % 16</code> or something like that). This gives you the segment your key lives in, this is just another map - again use <code>h</code> to look up the key within this map.</p>\n\n<p>The difference is that any locking operations, which generally occur during mutating operations like <code>put()</code>, only need to lock the involved segment, so other operations have a chance to proceed in parallel.</p>\n\n<p>To answer your questions specifically:</p>\n\n<p><strong>Q1</strong></p>\n\n<p>The segments are equally sized in capacity, but they will, in general, have unequal number of elements because the segment for the elements are selected using hashing, which won't result in a perfectly uniform except in unusual cases. It's the same as if you asked if the first half the array backing in a <code>HashMap</code> has the same number of elements as the second half. On <em>average</em> the <em>expected</em> number of elements is the same, but for any given <code>HashMap</code> it's highly unlike to have <em>exactly</em> the same number of elements in both halves, due to random variation.</p>\n\n<p><strong>Q2</strong></p>\n\n<p>No, the map will not be laid out like that. As above, the selection of elements into segments is done using a hash, which means (for a good hash function) the segments are chosen essentially at random. Imagine you had a jar of balls marked from 1 to 16, and you chose one ball at a time, 62 times, and recorded the number you got before replacing the ball. You would not expect to get a distribution like <code>4, 4, 4, 4, 4, 4, 4, 4, 4, ... , 4, 2, 2]</code>! It would be more random.</p>\n", "last_activity_date": 1476483506, "answer_id": 40033441, "is_accepted": false, "owner": {"user_id": 149138, "reputation": 6036, "user_type": "registered", "accept_rate": 67, "display_name": "BeeOnRope", "link": "http://stackoverflow.com/users/149138/beeonrope", "profile_image": "https://www.gravatar.com/avatar/cfd457233c8ebbab383475fc097442d9?s=128&d=identicon&r=PG"}, "last_edit_date": 1476483506, "question_id": 39997574}