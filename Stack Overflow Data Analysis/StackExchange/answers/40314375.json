{"body": "<p>After some search it seems the best way to do it is to reduce the texture meaning run a shader that its input is of texture size and output is of half the input size. We can sample 4 neighboring pixels and calculate the max from them and write the value to the output. </p>\n\n<pre><code>    sampler2D _MainTex;\n    float4 _MainTex_ST;\n    float4 _MainTex_TexelSize;\n\n    v2f vert(appdata v)\n    {\n        v2f o;\n        o.vertex = mul(UNITY_MATRIX_MVP, v.vertex);\n        o.uv = TRANSFORM_TEX(v.uv, _MainTex);\n        return o;\n    }\n    float4 frag (v2f i) : SV_Target\n    {\n        float dx = _MainTex_TexelSize.x*0.5;\n        float maximum = tex2D(_MainTex, i.uv + float2(-dx,-dx));\n        maximum = max(maximum, tex2D(_MainTex, i.uv + float2(dx,-dx)));\n        maximum = max(maximum, tex2D(_MainTex, i.uv + float2(-dx,dx)));\n        maximum = max(maximum, tex2D(_MainTex, i.uv + float2(dx,dx)));\n        return maximum;\n    }\n</code></pre>\n\n<p>The next iteration gets the output of the previous iteration and writes to a rendertexture that is half its input meaning quarter the original texture. So the sizes go like 1024,512,256,... and so on up to a 1 by 1 texture and that gives the max. Here is some code to show the CPU side:</p>\n\n<pre><code>        private RenderTexture Reduce(RenderTexture diff, Material mat)\n    {\n        int reductions = POT.GetPowerFromNum(diff.width);\n        var rtList = new List&lt;RenderTexture&gt;();\n        int smallRes = diff.width/2;\n        var bigRT = diff;\n        for (int i = 0; i &lt; reductions; i++)\n        {\n            var smallRT = RenderTexture.GetTemporary(smallRes, smallRes, 0, diff.format);\n            rtList.Add(smallRT);\n            GpuUtils.Blit(bigRT,smallRT,mat);\n            bigRT = smallRT;\n            smallRes &gt;&gt;= 1;\n        }\n        for (int i = 0; i &lt; reductions-1; i++)\n        {\n            RenderTexture.ReleaseTemporary(rtList[i]);\n        }\n        return rtList[reductions-1];\n    }\n</code></pre>\n\n<p>Here <code>diff</code> is the original render texture, <code>GetPowerFromNum</code> calculates the power of two like 10 for 1024, and mat is the material of the shader. </p>\n\n<p>For average one can do the same for an average shader instead of max or simply enable mipmaps for the render texture and read the highest mipmap level.</p>\n", "tags": ["unity3d", "shader"], "creation_date": 1477696023, "score": 0, "last_activity_date": 1477696023, "answer_id": 40314375, "is_accepted": false, "owner": {"user_id": 1890027, "reputation": 581, "user_type": "registered", "accept_rate": 74, "display_name": "morteza khosravi", "link": "http://stackoverflow.com/users/1890027/morteza-khosravi", "profile_image": "https://www.gravatar.com/avatar/8bcbf86df5f667dc4fc6bdc6c01c49d8?s=128&d=identicon&r=PG"}, "title": "Need average and max value of a texture in shader", "question_id": 40292021}