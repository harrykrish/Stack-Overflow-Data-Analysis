{"title": "Using Standard Cartesian Circle formula to draw circle in graphics mode (C++)", "tags": ["c++", "geometry", "turboc++", "cartesian-coordinates", "bgi"], "creation_date": 1476189675, "score": 4, "body": "<p>There are two issues in your code:</p>\n\n<p>First: You should really call <code>initgraph</code> <em>before</em> you call <code>getmaxx</code> and <code>getmaxy</code>, otherwise they will not necessarily return the correct dimensions of the graphics mode. This may or may not be a contributing factor depending on your setup.</p>\n\n<p>Second, and most importantly: <strong>In Turbo C++, int is 16-bit.</strong> For example, here is circle with radius 100 (after the previous <code>initgraph</code> order issue was fixed):</p>\n\n<p><a href=\"http://i.stack.imgur.com/BZoUp.png\" rel=\"nofollow\"><img src=\"http://i.stack.imgur.com/BZoUp.png\" alt=\"enter image description here\"></a></p>\n\n<p>Note the stray circles in the four corners. If we do a little debugging and add some print-outs (a useful strategy that you should file away for future reference):</p>\n\n<pre><code>if((((x-h)*(x-h)) + ((y-k)*(y-k))) == (radius*radius))\n{\n    printf(\": (%d-%d)^2 + (%d-%d)^2 = %d^2\\n\", x, h, y, k, radius);\n    circle(x, y, 5); //Draw smaller circle with radius \n}                   //at points which satisfy circle equation only!\n</code></pre>\n\n<p>You can see what's happening (first line is maxx and maxy, not shown in above snippet):</p>\n\n<p><a href=\"http://i.stack.imgur.com/09gNH.png\" rel=\"nofollow\"><img src=\"http://i.stack.imgur.com/09gNH.png\" alt=\"enter image description here\"></a></p>\n\n<p>In particular that circle at (63, 139) is one of the corners. If you do the math, you see that:</p>\n\n<p><strong>(63 - 319)<sup>2</sup> + (139 - 239)<sup>2</sup> = 75536</strong></p>\n\n<p>And since your ints are 16-bit, 75536 modulo 65536 = 10000 = the value that ends up being calculated = 100<sup>2</sup> = a circle where it shouldn't be.</p>\n\n<p>An easy solution to this is to just change the relevant variables to <code>long</code>:</p>\n\n<ul>\n<li>maxx, maxy</li>\n<li>x, y</li>\n<li>h, k</li>\n</ul>\n\n<p>So:</p>\n\n<pre><code>long x, y;\n...\ninitgraph(...);\n...\nlong maxx = getmaxx();\nlong maxy = getmaxy();\n...\nlong h = maxx / 2;\nlong k = maxy / 2;\n</code></pre>\n\n<p>And then you'll end up with correct output:</p>\n\n<p><a href=\"http://i.stack.imgur.com/S3879.png\" rel=\"nofollow\"><img src=\"http://i.stack.imgur.com/S3879.png\" alt=\"enter image description here\"></a></p>\n\n<p>Note of course that like <a href=\"http://stackoverflow.com/a/39971188/616460\">other answers point out</a>, since you are using ints, you'll miss a lot of points. This may or may not be OK, but some values will produce noticeably poorer results (e.g. radius 256 only seems to have 4 integer solutions). You could introduce a tolerance if you want. You could also use <a href=\"http://stackoverflow.com/a/39973839/616460\">a more direct approach</a> but that might defeat the purpose of your exercise with the Cartesian circle formula. If you're into this sort of thing, here is a 24-page document containing a bunch of discussion, proofs, and properties about <a href=\"http://eulerarchive.maa.org/docs/translations/E228en.pdf\" rel=\"nofollow\">integers that are the sum of two squares</a>.</p>\n\n<p>I don't know enough about Turbo C++ to know if you can make it use 32-bit ints, I'll leave that as an exercise to you.</p>\n", "last_activity_date": 1476191345, "answer_id": 39977484, "is_accepted": true, "owner": {"user_id": 616460, "reputation": 23170, "user_type": "registered", "accept_rate": 96, "display_name": "Jason C", "link": "http://stackoverflow.com/users/616460/jason-c", "profile_image": "https://i.stack.imgur.com/Yiloe.png?s=128&g=1"}, "last_edit_date": 1476191345, "question_id": 39970967}