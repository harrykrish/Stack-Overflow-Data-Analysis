{"title": "Javascript making image rotate to always look at mouse cursor?", "tags": ["javascript", "jquery", "css", "canvas", "html5-canvas"], "creation_date": 1476868013, "score": 1, "body": "<h2>\"Best practice\" solution.</h2>\n\n<p>As <strike>the existing</strike> (Alnitak's) answer has some issues. </p>\n\n<ul>\n<li>Wrong sign in calculations, and then too many adjustments to correct for the wrong sign. </li>\n<li>The arrow does not point at the mouse because the mouse coordinates are incorrect. Try to move the mouse to the tip of the arrow (of <strike>accepted</strike> (Alnitak's) answer) and you can see that it only works at two points on the canvas. The mouse needs to be corrected for the canvas padding/offset</li>\n<li>Canvas coordinates need to include page scroll position because the mouse events <code>pageX</code>, <code>pageY</code> properties are relative to the top left of the page, not the whole document. If you scroll the page the arrow will no longer point at the mouse if you don't. Or you can use the mouse event clientX, clientY properties that hold the mouse coordinates to the client (whole) page top left thus you dont need to correct for scroll.</li>\n<li>Using save and restore is inefficient. Use setTransform </li>\n<li>Rendering when not needed. The mouse fires many more time than the screen refreshes. Rendering when the mouse fires will will only result in renders that are never seen. Rendering is expensive in both processing and power use. Needless rendering will quickly drain a device's battery</li>\n</ul>\n\n<p>Here is a \"Best practice\" solution.</p>\n\n<p>The core function draws an image looking at a point <code>lookx</code>,<code>looky</code></p>\n\n<pre><code>var drawImageLookat(img, x, y, lookx, looky){\n   ctx.setTransform(1, 0, 0, 1, x, y);  // set scale and origin\n   ctx.rotate(Math.atan2(looky - y, lookx - x)); // set angle\n   ctx.drawImage(img,-img.width / 2, -img.height / 2); // draw image\n   ctx.setTransform(1, 0, 0, 1, 0, 0); // restore default not needed if you use setTransform for other rendering operations\n}\n</code></pre>\n\n<p>The demo show how to use <code>requestAnimationFrame</code> to ensure you only render when the DOM is ready to render, Use <code>getBoundingClientRect</code> to get the mouse position relative to the canvas.</p>\n\n<p>The counter at top left show how many mouse events have fired that did not need to be rendered. Move the mouse very slowly and the counter will not increase. Move the mouse at a normal speed and you will see that you can generate 100's of unneeded render events every few seconds. The second number is the approximate time saved in 1/1000th seconds, and the % is ratio time saved over time to render.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var canvas = document.createElement('canvas');\r\nvar ctx = canvas.getContext('2d');\r\ncanvas.width = 512;\r\ncanvas.height = 512;\r\ncanvas.style.border = \"1px solid black\";\r\ndocument.body.appendChild(canvas);\r\nvar renderSaveCount = 0; // Counts the number of mouse events that we did not have to render the whole scene\r\n\r\nvar arrow = {\r\n    x : 256,\r\n    y : 156,\r\n    image : new Image()\r\n};\r\nvar mouse = {\r\n    x : null,\r\n    y : null,\r\n    changed : false,\r\n    changeCount : 0,\r\n}\r\n\r\n\r\narrow.image.src = 'https://d30y9cdsu7xlg0.cloudfront.net/png/35-200.png';\r\n\r\nfunction drawImageLookat(img, x, y, lookx, looky){\r\n     ctx.setTransform(1, 0, 0, 1, x, y);\r\n     ctx.rotate(Math.atan2(looky - y, lookx - x) - Math.PI / 2); // Adjust image 90 degree anti clockwise (PI/2) because the image  is pointing in the wrong direction.\r\n     ctx.drawImage(img, -img.width / 2, -img.height / 2);\r\n     ctx.setTransform(1, 0, 0, 1, 0, 0); // restore default not needed if you use setTransform for other rendering operations\r\n}\r\nfunction drawCrossHair(x,y,color){\r\n    ctx.strokeStyle = color;\r\n    ctx.beginPath();\r\n    ctx.moveTo(x - 10, y);\r\n    ctx.lineTo(x + 10, y);\r\n    ctx.moveTo(x, y - 10);\r\n    ctx.lineTo(x, y + 10);\r\n    ctx.stroke();\r\n}\r\n\r\nfunction mouseEvent(e) {  // get the mouse coordinates relative to the canvas top left\r\n    var bounds = canvas.getBoundingClientRect(); \r\n    mouse.x = e.pageX - bounds.left;\r\n    mouse.y = e.pageY - bounds.top;\r\n    mouse.cx = e.clientX - bounds.left; // to compare the difference between client and page coordinates\r\n    mouse.cy = e.clienY - bounds.top;\r\n    mouse.changed = true;\r\n    mouse.changeCount += 1;\r\n}\r\ndocument.addEventListener(\"mousemove\",mouseEvent);\r\nvar renderTimeTotal = 0;\r\nvar renderCount = 0;\r\nctx.font = \"18px arial\";\r\nctx.lineWidth = 1;\r\n// only render when the DOM is ready to display the mouse position\r\nfunction update(){\r\n    if(arrow.image.complete &amp;&amp; mouse.changed){ // only render when image ready and mouse moved\r\n        var now = performance.now();\r\n        mouse.changed = false; // flag that the mouse coords have been rendered\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        // get mouse canvas coordinate correcting for page scroll\r\n        var x = mouse.x - scrollX;\r\n        var y = mouse.y - scrollY;\r\n        drawImageLookat(arrow.image, arrow.x, arrow.y, x ,y);\r\n        // Draw mouse at its canvas position\r\n        drawCrossHair(x,y,\"black\");\r\n        // draw mouse event client coordinates on canvas\r\n        drawCrossHair(mouse.cx,mouse.cy,\"rgba(255,100,100,0.2)\");\r\n       \r\n        // draw line from arrow center to mouse to check alignment is perfect\r\n        ctx.strokeStyle = \"black\";\r\n        ctx.beginPath();\r\n        ctx.globalAlpha = 0.2;\r\n        ctx.moveTo(arrow.x, arrow.y);\r\n        ctx.lineTo(x, y);\r\n        ctx.stroke();\r\n        ctx.globalAlpha = 1;\r\n\r\n        // Display how many renders that were not drawn and approx how much time saved (excludes DOM time to present canvas to display)\r\n        renderSaveCount += mouse.changeCount -1;\r\n        mouse.changeCount = 0;\r\n        var timeSaved = ((renderTimeTotal / renderCount) * renderSaveCount);\r\n        var timeRatio = ((timeSaved / renderTimeTotal) * 100).toFixed(0);\r\n\r\n        ctx.fillText(\"Avoided \"+ renderSaveCount + \" needless renders. Saving ~\" + timeSaved.toFixed(0) +\"ms \" + timeRatio + \"% .\",10,20);\r\n        // get approx render time per frame\r\n        renderTimeTotal += performance.now()-now;\r\n        renderCount += 1;\r\n\r\n    }\r\n    requestAnimationFrame(update);\r\n\r\n}\r\nrequestAnimationFrame(update);\r\n              </code></pre>\r\n</div>\r\n</div>\r\n</p>\n", "last_activity_date": 1477676475, "answer_id": 40126873, "is_accepted": true, "owner": {"user_id": 3877726, "reputation": 10339, "user_type": "registered", "accept_rate": 43, "display_name": "Blindman67", "link": "http://stackoverflow.com/users/3877726/blindman67", "profile_image": "https://i.stack.imgur.com/C7qq2.png?s=128&g=1"}, "last_edit_date": 1477676475, "question_id": 40120470}