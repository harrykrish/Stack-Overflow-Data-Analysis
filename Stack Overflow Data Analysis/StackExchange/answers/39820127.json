{"body": "<p>When using <code>virtual</code> inheritance the constructor call of the <code>virtual</code> base is the responsibility of the <em>most derived</em> class rather than the responsibility of any intermediate class. The reason is obvious: the use of <code>virtual</code> inheritance indicates that there is an expectation that there are actually multiple derived classes using the base class. Which one of these derived classes would be responsible for constructing the <code>virtual</code> base?</p>\n\n<p>So, the constructor of any of the derived classes needs to provide an argument to the <code>virtual</code> base, e.g.:</p>\n\n<pre><code>IllegalArgumentException::IllegalArgumentException(std::string const&amp; what)\n    : std::runtime_error(what)\n    , RuntimeException(what) {\n}\n</code></pre>\n\n<p>To avoid having intermediate bases call the constructor of the <code>virtual</code> base classes intended for <code>virtual</code> inheritance often provide a default constructor. Of course, that opens up the possibility that the most derived class incorrectly relies on the proper constructor being called by one of its bases.</p>\n", "tags": ["c++", "inheritance", "virtual-inheritance", "ctor-initializer"], "creation_date": 1475432134, "score": 2, "last_activity_date": 1475432134, "answer_id": 39820127, "is_accepted": true, "owner": {"user_id": 1120273, "reputation": 104617, "user_type": "registered", "accept_rate": 92, "display_name": "Dietmar K&#252;hl", "link": "http://stackoverflow.com/users/1120273/dietmar-k%c3%bchl", "profile_image": "https://www.gravatar.com/avatar/4cbcb185abce0204cf5ac705ba32d53a?s=128&d=identicon&r=PG"}, "title": "Deriving class from virtual base with no default constructor", "question_id": 39820001}