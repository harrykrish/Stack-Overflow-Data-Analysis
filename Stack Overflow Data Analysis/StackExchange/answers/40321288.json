{"body": "<p>Ok, after trying hard I solved.</p>\n\n<p>After the test, I came to the conclusion (obvious) that somethig was wrong with my JAdaptiveLabel. So I searched online for another version, to see if it was my implementation or the adaptivity itself the problem.</p>\n\n<p>I came to this answer: <a href=\"http://stackoverflow.com/a/30745512/6397798\">@Warren K</a></p>\n\n<p>I used his class as it was and it worked, so my implementation was bugged.</p>\n\n<p>I started from his version and changed the resizing algorithm, since his was iterative (change size till you find the perfect one) and mine was mathematical (just get the involved measures and calculate the perfect size).</p>\n\n<p>It worked. Now the layout get disposed properly and the label changes font size if I resize the window.</p>\n\n<p>Here the code modified:</p>\n\n<pre><code>package it.bracco23.util;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\n\n// Improved version of http://java-sl.com/tip_adapt_label_font_size.html\n\npublic class JAdaptiveLabel extends JLabel {\n\n    private Graphics g;\n    private boolean init = false;\n\n    public JAdaptiveLabel(String text, Icon icon, int horizontalAlignment) {\n        super(text, icon, horizontalAlignment);\n        init();\n    }\n\n    public JAdaptiveLabel(String text, int horizontalAlignment) {\n        super(text, horizontalAlignment);\n        init();\n    }\n\n    public JAdaptiveLabel(String text) {\n        super(text);\n        init();\n    }\n\n    public JAdaptiveLabel(Icon image, int horizontalAlignment) {\n        super(image, horizontalAlignment);\n        init();\n    }\n\n    public JAdaptiveLabel(Icon image) {\n        super(image);\n        init();\n    }\n\n    public JAdaptiveLabel() {\n        init();\n    }\n\n\n\n    protected void init() {\n        addComponentListener(new ComponentAdapter() {\n            public void componentResized(ComponentEvent e) {\n                adaptLabelFont(JAdaptiveLabel.this);\n            }\n        });\n        init = true;\n    }\n\n   protected void adaptLabelFont(JLabel l) {\n        if (g==null) {\n            return;\n        }\n\n        Rectangle r  = l.getBounds();\n        Insets ins = l.getInsets();\n        r.x          = 0;    \n        r.y          = 0;    \n        Font f       = l.getFont();\n        Dimension dim = getTextSize(l, f);\n        //0.9f is a scale factor to don't let the text take too much space\n        //without it will work, but the text may appear to close to the border\n        float xFactor = ((r.width - ins.left - ins.right) * 0.9f) / dim.width;\n        float yFactor = ((r.height - ins.top - ins.bottom) * 0.9f) / dim.height;\n\n        /*the next lines assure the scaling factors are not zero (can happen)\n        and are different enough from 1. Without this last check, it might happen\n        that the font starts to cycle between two sizes. */\n        xFactor = (xFactor != 0 &amp;&amp; Math.abs(xFactor - 1)&gt;0.1) ? xFactor : 1;\n        yFactor = (yFactor != 0 &amp;&amp; Math.abs(xFactor - 1)&gt;0.1) ? yFactor : 1;\n        float fontSize = f.getSize() * Math.min(xFactor, yFactor);\n\n        setFont(f.deriveFont(f.getStyle(), fontSize));\n        repaint();\n    }\n\n    private Dimension getTextSize(JLabel l, Font f) {\n        Dimension size  = new Dimension();\n        FontMetrics fm  = g.getFontMetrics(f);\n        size.width      = fm.stringWidth(l.getText());\n        size.height     = fm.getHeight();\n        return size;\n    }\n\n    protected void paintComponent(Graphics g) {\n        super.paintComponent(g);\n        this.g=g;\n    }\n\n      @Override\n    public void setText(String text) {\n        super.setText(text);\n        if(init){\n           adaptLabelFont(this);\n        }\n    }\n\n}\n</code></pre>\n\n<p>If you use this version of the class inside the example I gave, everything works fine!</p>\n\n<p>P.S. I also added a call to the resizing method in setText, since you must change the size when the label resize or change its content.</p>\n", "tags": ["java", "swing", "jlabel", "miglayout"], "creation_date": 1477759100, "score": 0, "last_activity_date": 1477759100, "answer_id": 40321288, "is_accepted": true, "owner": {"user_id": 6397798, "reputation": 61, "user_type": "registered", "display_name": "bracco23", "link": "http://stackoverflow.com/users/6397798/bracco23", "profile_image": "https://www.gravatar.com/avatar/02009503bb2e6dfa0785c8645919aa5d?s=128&d=identicon&r=PG&f=1"}, "title": "MigLayout and JLabel derivative show strange behaviour and don&#39;t follow layout", "question_id": 40205737}