{"title": "Process Tasks in Order", "tags": ["c#", "task"], "creation_date": 1477438153, "score": -2, "body": "<p>I figured it out and rewrote my code above to do this:</p>\n\n<pre><code>private void myEvent_Handler(object sender, SomeEvent e)\n{\n  // I dont know how many times this event will fire\n  Task t = new Task(() =&gt;\n  {\n    if (something == true) \n    {\n        DoSomething(e);  \n    }\n  });\n  t.RunSynchronously();\n}\n</code></pre>\n\n<p>That is working great and is not blocking my UI thread.  </p>\n\n<p>UPDATE: Although I have found that this was working great for me (it fixed my race condition and my UI thread was not blocked), upon further investigation, I found that the method calling this code was not executing on UI thread (which explains why this code was not blocking my UI thread) but checking for ManagedThreadId, I found that the task above was running on same thread on which this method is running.\nAs a result, I changed my implementation according to these 2 posts:</p>\n\n<p><a href=\"https://msdn.microsoft.com/library/system.threading.tasks.taskscheduler.aspx\" rel=\"nofollow\">https://msdn.microsoft.com/library/system.threading.tasks.taskscheduler.aspx</a></p>\n\n<p><a href=\"http://stackoverflow.com/questions/2293976/how-and-if-to-write-a-single-consumer-queue-using-the-tpl\">How (and if) to write a single-consumer queue using the TPL?</a></p>\n\n<p>to use LimitedConcurrencyLevelTaskScheduler (provided in above MSDN article.</p>\n\n<p>That solution works well, the task is not executing on same thread as the method in which task in instantiated which increases performance.</p>\n", "last_activity_date": 1477588108, "answer_id": 40251355, "is_accepted": true, "owner": {"user_id": 3453898, "reputation": 695, "user_type": "registered", "accept_rate": 74, "display_name": "dbnex14", "link": "http://stackoverflow.com/users/3453898/dbnex14", "profile_image": "https://www.gravatar.com/avatar/654b07502deb9fcacf3193a50203cffb?s=128&d=identicon&r=PG&f=1"}, "last_edit_date": 1477588108, "question_id": 40229255}