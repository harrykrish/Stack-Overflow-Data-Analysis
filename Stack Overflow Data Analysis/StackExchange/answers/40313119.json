{"body": "<p>What's not mentioned in the <a href=\"http://php.net/manual/en/function.array-uintersect.php\" rel=\"nofollow\"><code>array_uintersect</code> docs</a> is that, internally, <a href=\"https://github.com/php/php-src/blob/master/ext/standard/array.c#L4099\" rel=\"nofollow\">PHP <em>sorts</em> all the arrays</a> first, left to right. Only <em>after</em> the arrays are sorted does PHP walk them (again, left to right) to find the intersection.</p>\n\n<p>The third argument (the comparison function) is passed to the internal sort algorithm, not the intersecting algorithm. Thus, the debugging output seen is the sorting algorithm figuring out the ordering.</p>\n\n<p>The <a href=\"https://github.com/php/php-src/blob/master/Zend/zend_sort.c#L317\" rel=\"nofollow\">zend_sort implementation</a> generally uses a <a href=\"http://stackoverflow.com/a/3166119/2908724\">uses a bisecting quick sort implementation</a>. For arrays of the size in your example, PHP uses insertion sort. For large arrays, PHP uses a 3 or 5 point pivot so as to <a href=\"http://stackoverflow.com/a/5126947/2908724\">improve worst-case complexity</a>.</p>\n\n<p>Since you're not explicitly returning any value from the comparison function, PHP defaults to returning null (0), and since PHP is using insertion sort, you're seeing O(n*n) behavior as the sort walks all the combinations.</p>\n", "tags": ["php", "arrays", "set-intersection", "array-intersect"], "creation_date": 1477688276, "score": 1, "last_activity_date": 1477688276, "answer_id": 40313119, "is_accepted": true, "owner": {"user_id": 2908724, "reputation": 11650, "user_type": "registered", "accept_rate": 100, "display_name": "bishop", "link": "http://stackoverflow.com/users/2908724/bishop", "profile_image": "https://i.stack.imgur.com/1xBJR.png?s=128&g=1"}, "title": "PHP: array_uintersect() unexpected behaviour", "question_id": 40288922}