{"title": "Converting a 3D List to a 3D NumPy array", "tags": ["python", "list", "python-3.x", "numpy"], "creation_date": 1477588673, "score": 4, "body": "<p>The answers by @SonderingNarcissit and @MadPhysicist are already quite nice.</p>\n\n<p>Here is a quick way of adding a number to each element in your list and keeping the structure. You can replace the function <code>return_number</code> by anything you like, if you want to not only add a number but do something else with it:</p>\n\n<pre><code>def return_number(my_number):\n    return my_number + 4\n\n\ndef add_number(my_list):\n\n    if isinstance(my_list, (int, float)):\n        return return_number(my_list)\n    else:\n        return [add_number(xi) for xi in my_list]\n\nA = [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0], [0], [0]]]\n</code></pre>\n\n<p>Then </p>\n\n<pre><code>print add_number(A)\n</code></pre>\n\n<p>gives you the desired output:</p>\n\n<pre><code>[[[4, 4, 4], [4, 4, 4], [4, 4, 4]], [[4], [4], [4]]]\n</code></pre>\n\n<p>So what it does is that it look recursively through your list of lists and everytime it finds a number it adds the value 4; this should work for arbitrarily deep nested lists. That currently only works for numbers and lists; if you also have e.g. also dictionaries in your lists then you would have to add another if-clause.</p>\n", "last_activity_date": 1477671888, "answer_id": 40290642, "is_accepted": true, "owner": {"user_id": 1534017, "reputation": 4139, "user_type": "registered", "accept_rate": 90, "display_name": "Cleb", "link": "http://stackoverflow.com/users/1534017/cleb", "profile_image": "https://www.gravatar.com/avatar/aa667d0e455aa30f3410756d719de795?s=128&d=identicon&r=PG"}, "last_edit_date": 1477671888, "question_id": 40289943}