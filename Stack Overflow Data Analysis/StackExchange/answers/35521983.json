{"title": "Why there are no constructs for concurrency in Kotlin?", "tags": ["java", "concurrency", "kotlin"], "creation_date": 1455964409, "score": 15, "body": "<p><strong>UPDATE:</strong>  <em><a href=\"https://blog.jetbrains.com/kotlin/2016/10/kotlin-1-1-m02-is-here/\" rel=\"nofollow\">Kotlin 1.1 Milestone 2 was released</a> and it continues the development of the concurrency constructs for Kotlin:  Read more about it at  <a href=\"https://github.com/Kotlin/kotlinx.coroutines\" rel=\"nofollow\">https://github.com/Kotlin/kotlinx.coroutines</a></em></p>\n\n<p>Kotlin has reserved the keywords <code>async</code> and <code>await</code> allowing for future language support of concurrency (possible using these, possibly in another form). </p>\n\n<p><strong>In the meantime, Kotlin already has:</strong></p>\n\n<ul>\n<li>the <a href=\"http://kovenant.komponents.nl/\" rel=\"nofollow\">Kovenant library</a> adds Promises to Kotlin</li>\n<li>the <a href=\"http://docs.paralleluniverse.co/quasar/\" rel=\"nofollow\">Quasar library</a> provides light-weight threads and continuations</li>\n<li><a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-synchronized/\" rel=\"nofollow\"><code>synchronized</code></a> and <a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-volatile/index.html\" rel=\"nofollow\"><code>volatile</code></a> annotations which map directly to the same keywords in Java</li>\n<li><a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/synchronized.html\" rel=\"nofollow\"><code>synchronized</code> blocks</a> which in Kotlin come from an inline function <code>synchronized()</code>.</li>\n<li>Kotlin has a <a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.concurrent/index.html\" rel=\"nofollow\"><code>Kotlin.concurrent</code> package and extensions</a> with new functions and also extensions to JDK classes.</li>\n<li>you can access anything in the <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/package-summary.html\" rel=\"nofollow\"><code>java.util.concurrent</code> package</a> such as <code>ConcurrentHashMap</code>, <code>CountdownLatch</code>, <code>CyclicBarrier</code>, <code>Semaphore</code>, ...</li>\n<li>you can access anything in the <a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/locks/package-summary.html\" rel=\"nofollow\"><code>java.util.concurrent.locks</code> package</a> and Kotlin has <a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.concurrent/index.html\" rel=\"nofollow\">extensions for a few of these</a> including the cool <a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.concurrent/java.util.concurrent.locks.-lock/with-lock.html\" rel=\"nofollow\"><code>withLock()</code> extension function</a> and similar <a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.concurrent/java.util.concurrent.locks.-reentrant-read-write-lock/index.html\" rel=\"nofollow\"><code>read</code>/<code>write</code> extensions</a> for <code>ReentrantReadWriteLock</code>. </li>\n<li>you can access anything in the <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/package-summary.html\" rel=\"nofollow\"><code>java.util.concurrent.atomic</code> package</a> such as <code>AtomicReference</code>, <code>AtomicLong</code>, ...</li>\n<li>you can use <a href=\"https://kotlinlang.org/docs/reference/java-interop.html#waitnotify\" rel=\"nofollow\"><code>wait</code> and <code>notify</code> on objects</a></li>\n</ul>\n\n<p>You have everything Java has and more.  Your phrase <em>\"synchronization and locks\"</em> is satisfied by the list above, and then you have even more and without language changes.  Any language features would only make it a bit prettier.  </p>\n\n<p>So you can have 100% Kotlin code, using the small Kotlin runtime, the JVM runtime from the JDK, and any other JVM library you want to use.  No need for Java code, just Java (as-in JVM) libraries.</p>\n\n<p>A quick sample of some features:</p>\n\n<pre><code>class SomethingSyncd {\n    @Synchronized fun syncFoo() {\n\n    }\n\n    val myLock = Any()\n\n    fun foo() {\n        synchronized(myLock) {\n            // ... code\n        }\n    }\n\n    @Volatile var thing = mapOf(...)\n}\n</code></pre>\n", "last_activity_date": 1477351450, "answer_id": 35521983, "is_accepted": true, "owner": {"user_id": 3679676, "reputation": 12075, "user_type": "registered", "accept_rate": 100, "display_name": "Jayson Minard", "link": "http://stackoverflow.com/users/3679676/jayson-minard", "profile_image": "https://www.gravatar.com/avatar/c0faaf44a8922cf165ff73d9efd0dade?s=128&d=identicon&r=PG"}, "last_edit_date": 1477351450, "question_id": 35520583}