{"title": "Which code does perform better to find a specific element in a list", "tags": ["java", "filter", "java-8", "java-stream"], "creation_date": 1477700827, "score": 0, "body": "<p>Since i couldn't get a answer based on the java internal implementation, i did a benchmark for my self.</p>\n\n<p>I want to share with you the results i came up with. I did run a benchmark for every list from size 1 to 1000. Every benchmark for every list size did run 10000 times with the average calculated to get out errors.</p>\n\n<p><em>Disclaimer: I'm not a benchmark expert and i just did a simple implementation. The results are not 100% accurate and the conclusions i made can be wrong. If you can do it better, than feel free improve my benchmark oder make one your self and post the results in a new answer.</em></p>\n\n<p>You can find the benchmark files here: <a href=\"https://github.com/Spenhouet/BenchmarkFindElement\" rel=\"nofollow\">https://github.com/Spenhouet/BenchmarkFindElement</a></p>\n\n<ol>\n<li>Using a parallelStream for this simple task has more overhead and is slower than just a normal stream.</li>\n<li>If the list is sorted and the wanted item is the last of the list,\n<code>.findFirst()</code> ist faster than <code>.findAny()</code>.</li>\n<li>If the list is sorted and the wanted item is the last of the list,\nby using <code>.findAny()</code> the \"for\" method is faster.</li>\n<li>If the list is shuffled and the wanted item id is random than \n<code>.findFirst()</code> and <code>.findAny()</code> makes no difference.</li>\n<li>If the list is shuffled and the wanted item id is random than there is only a little difference between the \"stream\" and the \"for\" method. The \"stream\" method is a little bit better</li>\n</ol>\n\n<p>Tested with Java Version: 1.8.0_111</p>\n\n<p>For example the performance graph for finding a random id in the the shuffled lists with 505 to 575 items. The blue line is the \"for\" method and the red line the \"stream\" method.</p>\n\n<p><a href=\"https://i.stack.imgur.com/By08l.jpg\" rel=\"nofollow\"><img src=\"https://i.stack.imgur.com/By08l.jpg\" alt=\"Benchmark-Graph for subset of items\"></a></p>\n\n<p>For example the performance graph for finding a random id in the the shuffled lists with 1 to 100000 items (only 10 times average). The blue line is the \"for\" method and the red line the \"stream\" method.</p>\n\n<p><a href=\"https://i.stack.imgur.com/LOQK0.jpg\" rel=\"nofollow\"><img src=\"https://i.stack.imgur.com/LOQK0.jpg\" alt=\"Benchmark-Graph for 1 to 100000 items\"></a></p>\n\n<p>If you want to take a look at some graphs / generate them your selfe, then just download the repository from the github link above, import the project and run it with the VM options -Xms1024m -Xmx4068m.</p>\n\n<p>With 1 to 40000 list elements and 100 runs each for average and the VM options: -Xms1024m -Xmx4068m -XX:+PrintCompilation -verbose:gc -Xbatch -XX:CICompilerCount=2</p>\n\n<p><a href=\"https://i.stack.imgur.com/Jyi3u.jpg\" rel=\"nofollow\"><img src=\"https://i.stack.imgur.com/Jyi3u.jpg\" alt=\"Benchmark-Graph for 1 to 40000 items and other VM options\"></a></p>\n", "last_activity_date": 1477750857, "answer_id": 40314839, "is_accepted": false, "owner": {"user_id": 2230045, "reputation": 530, "user_type": "registered", "accept_rate": 88, "display_name": "Spen", "link": "http://stackoverflow.com/users/2230045/spen", "profile_image": "https://i.stack.imgur.com/HbP4Q.jpg?s=128&g=1"}, "last_edit_date": 1477750857, "question_id": 40280919}