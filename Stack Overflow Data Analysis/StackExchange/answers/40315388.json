{"body": "<p>Here is a jazzed up version of the compact on close, which displays messages for common problems; for example, for when the source file does not exist; when the source file has an invalid filename extension; and when the destination file exists (it mustn't).  </p>\n\n<pre><code>Option Compare Database\nOption Explicit\n\n'   Declare an enumeration of long integer\n'   constants, to be used as the return values\n'   for the RepairDatabase() function.\n'   As Access's CompactRepair() method returns\n'   TRUE or FALSE, the Enum uses -1 (TRUE) for\n'   success and 0 for failure.\nPublic Enum ryCompactResult\n    cmpCompactSuccessful = -1\n    cmpCompactFailed = 0\n    cmpErrorOccurred = 1\n    cmpSourceFileDoesNotExist = 2\n    cmpInvalidSourceFileNameExtension = 3\n    cmpDestinationFileExists = 4\nEnd Enum\n\n\nPrivate Sub TestRepair()\n\n    Dim strSource As String\n    Dim strDestination As String\n    Dim lngRetVal As ryCompactResult\n\n    strSource = \"C:\\MyFolder\\db1.mdb\"\n    strDestination = \"C:\\MyFolder\\db2.mdb\"\n\n    '   Call the function:\n    lngRetVal = RepairDatabase(strSource, strDestination)\n\n    '   Examine the return value from the function\n    '   and display appropriate message:\n    Select Case lngRetVal\n\n    Case cmpCompactSuccessful\n        MsgBox \"Compact &amp; repair successful.\", _\n            vbOKOnly + vbInformation, _\n            \"Program Information\"\n\n    Case cmpSourceFileDoesNotExist\n        MsgBox strSource &amp; vbNewLine &amp; vbNewLine _\n            &amp; \"The above file does not exist.\", _\n            vbOKOnly + vbExclamation, _\n            \"Program Finished\"\n\n    Case cmpInvalidSourceFileNameExtension\n        MsgBox strSource &amp; vbNewLine &amp; vbNewLine _\n            &amp; \"The above file has an invalid filename \" _\n            &amp; \"extension.\", vbOKOnly + vbExclamation, _\n            \"Program Finished\"\n\n    Case cmpDestinationFileExists\n        MsgBox strDestination &amp; vbNewLine &amp; vbNewLine _\n            &amp; \"The above destination file exists. \" _\n            &amp; vbNewLine _\n            &amp; \"Please delete the above file or \" _\n            &amp; \"use a different destination filename.\", _\n            vbOKOnly + vbExclamation, \"Program Finished\"\n\n    Case cmpErrorOccurred\n        '   The RepairDatabase() function has\n        '   already displayed an error message.\n\n    End Select\n\n\nEnd Sub\n\nFunction RepairDatabase( _\n    strSource As String, _\n    strDestination As String) As ryCompactResult\n\n    ' IN:\n    '\n    '   strSource:\n    '       The full path to the database that is\n    '       to be compacted.\n    '\n    '   strDestination:\n    '       The full path to the resultant database\n    '       after strSource has been compacted.\n    '\n    ' OUT:\n    '\n    '   This function returns one of the values in\n    '   the ryCompactResult Enum.\n\n\n    Dim lngRetVal As ryCompactResult\n    Dim strFileName As String\n    Dim strFileNameExtn As String\n    Dim lngPos As Long\n\n\nOn Error GoTo Error_RepairDatabase\n\n    '   See if source file exists:\n    strFileName = Dir(strSource)\n    If Len(strFileName) = 0 Then\n        lngRetVal = cmpSourceFileDoesNotExist\n        GoTo Exit_RepairDatabase\n    End If\n\n    '   See if source filename has appropriate\n    '   filename extension (mdb or accdb).\n    '   First, see if filename contains a period:\n    lngPos = InStr(strFileName, \".\")\n    If lngPos = 0 Then\n        '   Period not found in filename;\n        '   i.e. no filename extension found.\n        lngRetVal = cmpInvalidSourceFileNameExtension\n        GoTo Exit_RepairDatabase\n    Else\n        '   Get filename extension:\n        strFileNameExtn = Mid(strFileName, lngPos + 1)\n        strFileNameExtn = LCase(strFileNameExtn)\n\n        Select Case strFileNameExtn\n        Case \"mdb\", \"accdb\"\n            '   Correct filename extension found.\n            '   We can proceed with compact &amp; repair.\n        Case Else\n            '   Invalid filename extension found.\n            lngRetVal = cmpInvalidSourceFileNameExtension\n            GoTo Exit_RepairDatabase\n        End Select\n    End If\n\n    '   Destination file must not exist:\n    strFileName = Dir(strDestination)\n    If Len(strFileName) &gt; 0 Then\n        lngRetVal = cmpDestinationFileExists\n        GoTo Exit_RepairDatabase\n    End If\n\n    '   Compact and repair database:\n    lngRetVal = Application.CompactRepair( _\n                strSource, strDestination, True)\n\nExit_RepairDatabase:\n\n    RepairDatabase = lngRetVal\n    Exit Function\n\nError_RepairDatabase:\n\n    lngRetVal = cmpErrorOccurred\n    MsgBox \"Error No: \" &amp; Err.Number _\n        &amp; vbNewLine &amp; vbNewLine _\n        &amp; Err.Description, _\n        vbOKOnly + vbExclamation, _\n        \"Error Information\"\n\n    Resume Exit_RepairDatabase\n\nEnd Function\n</code></pre>\n\n<p>Here is another Compact/Repair function below, but not advisable to do arbitrarily on every close - just replace/remove my on error code with your own</p>\n\n<pre><code>Function RepairDatabase(strSource As String, _\n        strDestination As String) As Boolean\n        ' Input values: the paths and file names of\n        ' the source and destination files.\n\nDim strSource As String\nDim strDestination As String\n\nstrSource = \"\\\\Dg\\Debt \\2010\\Summary\\Summary.mdb\"\nstrDestination = \"\\\\Dg\\Debt \\2010\\Summary\\Summary_Compact.mdb\"\n\n    ' Trap for errors.\n    On Error GoTo ErrorRoutine\n\n    ' Compact and repair the database. Use the return value of\n    ' the CompactRepair method to determine if the file was\n    ' successfully compacted.\n    RepairDatabase = _\n        Application.CompactRepair( _\n        LogFile:=True, _\n        SourceFile:=strSource, _\n        DestinationFile:=strDestination)\n\n    ' Reset the error trap and exit the function.\n    On Error GoTo 0\n    Exit Function\n\n' Return False if an error occurs.\nExit_Function:\n    Exit Function\nErrorRoutine:\n    RepairDatabase = False\n    Call LogError(Err.Number, Err.Description, conMod &amp; \".RepairDatabase\", , True)\n    Resume Exit_Function\nEnd Function\n\nCall the function as such:\nCall RepairDatabase(strSource, strDestination)\n</code></pre>\n\n<p>Call the function as such:</p>\n\n<pre><code>Call RepairDatabase(strSource, strDestination)\n</code></pre>\n", "tags": ["ms-access", "jet", "compact-database"], "creation_date": 1477706987, "score": 0, "last_activity_date": 1477706987, "answer_id": 40315388, "is_accepted": false, "owner": {"user_id": 7075507, "reputation": 16, "user_type": "registered", "display_name": "queens_living", "link": "http://stackoverflow.com/users/7075507/queens-living", "profile_image": "https://www.gravatar.com/avatar/8488c20e43f4e296f9ba61b4f9c80370?s=128&d=identicon&r=PG&f=1"}, "title": "MS Access Jet Database programatically compact", "question_id": 40313446}