{"body": "<p>Try using these methods- </p>\n\n<ol>\n<li><p>Check if the <code>uses-permission</code> statements are in the right place, they should be below <code>&lt;manifest&gt;</code> and above <code>&lt;application&gt;</code> tags. The correct format -</p>\n\n<p><code>&lt;manifest&gt;\n    &lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/&gt;\n    ...\n    &lt;application&gt;\n        ...\n        &lt;activity&gt; \n            ...\n        &lt;/activity&gt;\n    &lt;/application&gt;\n&lt;/manifest&gt;</code></p></li>\n<li><p>Starting from Android Kitkat, there is a new storage policy -</p></li>\n</ol>\n\n<blockquote>\n  <p>The WRITE_EXTERNAL_STORAGE permission must only grant write access to the primary external storage on a device. Apps must not be allowed to write to secondary external storage devices, except in their package-specific directories as allowed by synthesized permissions. Restricting writes in this way ensures the system can clean up files when applications are uninstalled.</p>\n</blockquote>\n\n<p>This can however be exploited  without rooting(although I have not tried this one), as <a href=\"http://stackoverflow.com/a/25872432/5210825\">mentioned here</a> -</p>\n\n<pre><code>//Returns an OutputStream to write to the file. The file will be truncated immediately.\npublic OutputStream write()\n    throws IOException {\nif (file.exists() &amp;&amp; file.isDirectory()) {\n    throw new IOException(\"File exists and is a directory.\");\n}\n\n// Delete any existing entry from the media database.\n// This may also delete the file (for media types), but that is irrelevant as it will be truncated momentarily in any case.\nString where = MediaStore.MediaColumns.DATA + \"=?\";\nString[] selectionArgs = new String[] { file.getAbsolutePath() };\ncontentResolver.delete(filesUri, where, selectionArgs);\n\nContentValues values = new ContentValues();\nvalues.put(MediaStore.Files.FileColumns.DATA, file.getAbsolutePath());\nUri uri = contentResolver.insert(filesUri, values);\n\nif (uri == null) {\n    // Should not occur.\n    throw new IOException(\"Internal error.\");\n}\n\nreturn contentResolver.openOutputStream(uri);\n}\n</code></pre>\n", "tags": ["android", "permissions", "android-sdcard"], "creation_date": 1477766921, "score": -1, "last_activity_date": 1477766921, "answer_id": 40322478, "is_accepted": false, "owner": {"user_id": 5210825, "reputation": 652, "user_type": "registered", "accept_rate": 89, "display_name": "InfinityChaos", "link": "http://stackoverflow.com/users/5210825/infinitychaos", "profile_image": "https://i.stack.imgur.com/M71fg.gif?s=128&g=1"}, "title": "saving file on sdcard with permission error", "question_id": 40322259}