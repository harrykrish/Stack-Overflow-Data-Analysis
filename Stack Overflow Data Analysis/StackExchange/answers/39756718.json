{"body": "<p>In case anybody is interested I post here my full solution,\nable to work with datasets bigger than memory. It uses some of your ideas and some mine.\nMy data is the file file.csv (or you can even do it with a compressed file using fread(\"unzip -c name.zip\").</p>\n\n<pre><code>## Initialization\nnline &lt;- 1500000  # total number of lines  or use wc -l to do it automatically.\nchunk &lt;- 5000    # change it according to your memory and number of columns.\ntimes &lt;- ceiling(nline/chunk)\nname &lt;- names(fread(\"file.csv\", stringsAsFactors=F, integer64 = \"character\", nrows=0, na.strings=c(\"\", \"NA\")) )\nidvars =  grep(\"_20[0-9][0-9]$\",name , invert = TRUE) \n\n# Now we loop every chunk\n\nfor(iter in 0:(times-1)) {\n  my &lt;- fread(\"file.csv\", stringsAsFactors=F, integer64 = \"character\", skip=1+(iter*chunk), nrows=chunk, na.strings=c(\"\", \"NA\")) \n  colnames(my) &lt;- name\n  temp &lt;- melt(my, id.vars = idvars)  \n    newfile &lt;- dcast(\n    temp[, `:=`(var = sub('_20[0-9][0-9]$', '', variable), year = sub('.*_', '', variable), variable = NULL)],  \n    ... ~ var, value.var='value')  \n  fwrite(newfile, \"long.csv\", quote=FALSE, sep=\",\", append=T)\n  rm(temp); rm(newfile); rm(my); gc()\n  }\n</code></pre>\n\n<h3>#</h3>\n\n<p>As said before the problem with this method is that it converts all the value to character but if you save them to a file and read the file again (as here) you get the proper classes.</p>\n\n<p>In case of very large files this method is very slow.</p>\n\n<p>I encourage you to improve this solution or suggest any generic solution with tidyr, splitstackshape or other packages.</p>\n\n<p>Or even better it would be great to do it with a database such as sqlite.</p>\n\n<p>The solution should work on datasets with unordered columns or even with \"_\" in the middle of the name, such as:</p>\n\n<pre><code>set.seed(1)\nDT &lt;- data.table(   \n  ID = c(1:15),\n  Name = c(\"Bob\",\"Ana\",\"Smith\",\"Sam\",\"Big\",\"Lulu\", \"Loli\", \"Chochi\", \"Tom\", \"Dick\", \"Pet\", \"Shin\", \"Rock\", \"Pep\", \"XXX\"),\n  Kind_2001 = factor(sample(c(letters[1:3], NA), 15, TRUE)),\n  Kind_2002 = factor(sample(c(letters[1:3], NA), 15, TRUE)),\n  Kind_2003 = factor(sample(c(letters[1:3], NA), 15, TRUE)),\n  Conc_2004 = sample(49,15),\n  aa_Conc_2001 = c(sample(99,14), NA),\n  Conc_2002 = sample(79,15)\n)\n</code></pre>\n", "tags": ["r", "data.table"], "creation_date": 1475093140, "score": 0, "last_activity_date": 1475093140, "answer_id": 39756718, "is_accepted": false, "owner": {"user_id": 425895, "reputation": 1607, "user_type": "registered", "accept_rate": 51, "display_name": "skan", "link": "http://stackoverflow.com/users/425895/skan", "profile_image": "https://www.gravatar.com/avatar/d6550112f6a27da8c4596d6a2e63bc6c?s=128&d=identicon&r=PG"}, "title": "R converting to long format, pattern", "question_id": 39639457}