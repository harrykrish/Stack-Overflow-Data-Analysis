{"body": "<p>Actually I managed to run the first request on my device ! It was just a problem with the sent requests which were not accurate. </p>\n\n<p>No I want to handle the main goal : retrieve data from the thermometer. With a sniffing tool I saw that i must send a setup packet + 8 bytes of variable through the control pipe. Then on endpoint 0x81 the device should send back 4 * 8 bytes of data in interrupt mode. I tested that with a prototyping tool : </p>\n\n<p><a href=\"https://i.stack.imgur.com/eOuIL.jpg\" rel=\"nofollow\">screen of data request</a></p>\n\n<p>As I undestand it I should do an isochronous transfer. I have tried the following code without success for now.</p>\n\n<pre><code>public void testCom(){\n        if (!this.pret) return;\n\n        ByteBuffer buffer = ByteBuffer.allocateDirect(18);\n        buffer.rewind();\n        // descriptor device\n        int transfered = LibUsb.controlTransfer(handle,\n                LibUsb.ENDPOINT_IN,LibUsb.REQUEST_GET_DESCRIPTOR,(short)0x0100,(short)0x0000,buffer,2000L);\n        if (transfered &lt; 0) throw new LibUsbException(\"Control transfer failed\", transfered);\n        System.out.println(transfered + \" bytes sent\");\n\n        System.out.println(\"--- DEVICE DESCRIPTOR ---\");\n        System.out.println(byteBuffer2String(buffer));\n        System.out.println();\n\n        buffer = ByteBuffer.allocateDirect(9);\n        // descriptor configuration\n        transfered = LibUsb.controlTransfer(handle,\n                LibUsb.ENDPOINT_IN,LibUsb.REQUEST_GET_DESCRIPTOR,(short)0x0200,(short)0x0000,buffer,2000L);\n        if (transfered &lt; 0) throw new LibUsbException(\"Control transfer failed\", transfered);\n        System.out.println(transfered + \" bytes sent\");\n\n        System.out.println(\"--- CONFIGURATION DESCRIPTOR ---\");\n        System.out.println(byteBuffer2String(buffer));\n        System.out.println();\n\n        buffer = ByteBuffer.allocateDirect(8);\n        // descriptor string\n        transfered = LibUsb.controlTransfer(handle,\n                LibUsb.ENDPOINT_IN,LibUsb.REQUEST_GET_DESCRIPTOR,(short)0x0300,(short)0x0409,buffer,2000L);\n        if (transfered &lt; 0) throw new LibUsbException(\"Control transfer failed\", transfered);\n        System.out.println(transfered + \" bytes sent\");\n\n        System.out.println(\"--- DESCRIPTOR STRING ---\");\n        System.out.println(byteBuffer2String(buffer));\n        System.out.println();\n\n        System.out.println(\"TRYING TO GET DATA  ...\");\n\n        ByteBuffer bufferArgCmd = ByteBuffer.allocateDirect(16);\n        /*bufferArgCmd.put((byte)0x21);\n        bufferArgCmd.put((byte)0x09);\n        bufferArgCmd.put((byte)0x02);\n        bufferArgCmd.put((byte)0x00);\n        bufferArgCmd.put((byte)0x00);\n        bufferArgCmd.put((byte)0x00);\n        bufferArgCmd.put((byte)0x08);\n        bufferArgCmd.put((byte)0x00);*/\n\n        bufferArgCmd.put((byte)0xA1);\n        bufferArgCmd.put((byte)0x00);\n        bufferArgCmd.put((byte)0x00);\n        bufferArgCmd.put((byte)0x20);\n        bufferArgCmd.put((byte)0xA1);\n        bufferArgCmd.put((byte)0x00);\n        bufferArgCmd.put((byte)0x00);\n        bufferArgCmd.put((byte)0x20);\n        bufferArgCmd.rewind();\n\n        ByteBuffer bufferResCmd = ByteBuffer.allocateDirect(4);\n        bufferResCmd.get();\n        bufferResCmd.get();\n\n        ByteBuffer bufferData = ByteBuffer.allocateDirect(32);\n\n\n        ByteBuffer buffer81 = BufferUtils.allocateByteBuffer(32);\n        // buffer81.put(data);\n        Transfer transfer = LibUsb.allocTransfer(0);\n        LibUsb.fillInterruptTransfer(transfer, handle, ENDPOINT_ID, bufferData,\n            receiveData, null, 3000L);\n        LibUsb.fillControlSetup(bufferArgCmd,(byte)0x21,(byte)0x09,(short)0x0200,(short)0x0,(short)0x08);\n        // LibUsb.fillControlTransfer(transfer, handle, bufferArgCmd,\n             //   sendData, null, 2000L);\n        System.out.println(\"doing interrupt transfer to device\");\n        int result = LibUsb.submitTransfer(transfer);\n        if (result != LibUsb.SUCCESS)\n        {\n            throw new LibUsbException(\"Unable to submit transfer\", result);\n        }\n\n        System.out.println(\"Resultat du transfert : \");\n        System.out.println(byteBuffer2String(bufferData));\n    }\n\n    // This callback is called after the ADB CONNECT message header is\n    // sent and sends the ADB CONNECT message body.\n    final TransferCallback receiveData = new TransferCallback()\n    {\n        @Override\n        public void processTransfer(Transfer transfer)\n        {\n            System.out.println(transfer.actualLength() + \" bytes received !!!! \");\n            // write(handle, CONNECT_BODY, bodySent);\n            // LibUsb.freeTransfer(transfer);\n        }\n    };\n\n // This callback is called after the ADB CONNECT message header is\n    // sent and sends the ADB CONNECT message body.\n    final TransferCallback sendData = new TransferCallback()\n    {\n        @Override\n        public void processTransfer(Transfer transfer)\n        {\n            System.out.println(\"send command to device\");\n            // write(handle, CONNECT_BODY, bodySent);\n            // LibUsb.freeTransfer(transfer);\n        }\n    };\n</code></pre>\n\n<p>The response is below : </p>\n\n<pre><code>&gt; Thermometre Pearl NC-7004 detect\u00e9 !\nDevice Descriptor:\n  bLength                 18\n  bDescriptorType          1\n  bcdUSB                1.10\n  bDeviceClass             0 Per Interface\n  bDeviceSubClass          0\n  bDeviceProtocol          0\n  bMaxPacketSize0          8\n  idVendor            0x1941\n  idProduct           0x8021\n  bcdDevice             1.00\n  iManufacturer            0\n  iProduct                 0\n  iSerial                  0\n  bNumConfigurations       1\n\nclaim device handle\nfalse\n0\nfalse\nclaim interface\n18 bytes sent\n--- DEVICE DESCRIPTOR ---\n1201 1001 0000 0008 4119 2180 0001 0000 0001\n\n9 bytes sent\n--- CONFIGURATION DESCRIPTOR ---\n0902 2200 0101 0080 32\n\n4 bytes sent\n--- DESCRIPTOR STRING ---\n0403 0904 0000 0000\n\ntentative de communication de la requete de donn\u00e9es ...\ndoing interrupt transfer to device\nResultat du transfert :\n0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000\njava.lang.IllegalStateException: deviceHandlePointer is not initialized\n        at org.usb4java.LibUsb.attachKernelDriver(Native Method)\n        at usbDriver.Communication2.terminerCom(Communication2.java:313)\n        at usbDriver.usbDriver.main(usbDriver.java:37)\n</code></pre>\n\n<p>Can you give me advice about how to perform this ?</p>\n", "tags": ["linux", "libusb", "libusb-1.0"], "creation_date": 1477433884, "score": 0, "last_activity_date": 1477433884, "answer_id": 40250667, "is_accepted": false, "owner": {"user_id": 7069713, "reputation": 1, "user_type": "registered", "display_name": "Belze88", "link": "http://stackoverflow.com/users/7069713/belze88", "profile_image": "https://lh3.googleusercontent.com/-PdL811Yv52M/AAAAAAAAAAI/AAAAAAAAAEw/71LAt1C0U2A/photo.jpg?sz=128"}, "title": "USB error 9 during control transfer", "question_id": 40241304}